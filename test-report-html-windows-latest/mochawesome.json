{
  "stats": {
    "suites": 58,
    "tests": 197,
    "passes": 192,
    "pending": 5,
    "failures": 0,
    "start": "2022-09-05T16:28:05.639Z",
    "end": "2022-09-05T16:28:27.530Z",
    "duration": 21891,
    "testsRegistered": 199,
    "passPercent": 98.96907216494846,
    "pendingPercent": 2.512562814070352,
    "other": 0,
    "hasOther": false,
    "skipped": 2,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "5b62d75d-e350-4456-8376-fe1e87e56c88",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [
        {
          "title": "Get top level VHDL",
          "fullTitle": "Get top level VHDL",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const code_dummy = `\nlibrary ieee;\nuse ieee.std_logic_1164.all;\nuse ieee.numeric_std.all;\nentity test_entity_name is\ngeneric (\n    a : integer;\n    b : unsigned;\n    c : signed;\n    d : std_logic;\n    e : std_logic_vector;\n    f : std_logic_vector(5 downto 0)\n  );\nport(\n  g : in std_logic;\n  h : out std_logic;\n  i : inout std_logic\n);\nend test_entity_name;  \narchitecture e_arch of test_entity_name is\nbegin \nend e_arch;\n`;\nconst expected = 'test_entity_name';\nconst current = await hdl_utils.get_toplevel(code_dummy, general_1.HDL_LANG.VHDL);\n(0, assert_1.equal)(current, expected);",
          "err": {},
          "uuid": "0bd9a439-be40-4e37-9099-a650ec9cba22",
          "parentUUID": "5b62d75d-e350-4456-8376-fe1e87e56c88",
          "isHook": false,
          "skipped": true
        },
        {
          "title": "Get top level Verilog",
          "fullTitle": "Get top level Verilog",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const code_dummy = `\nmodule test_entity_name2 \n    #(\n        parameter a=8,\n        parameter b=9,\n        parameter c=10, d=11\n    )\n    (\n        input e,\n        output f,\n        input reg g,\n        input wire h,\n        input reg [7:0] i, j,\n        input wire [9:0] k,\n        output wire [9:0] l\n    );  \n\n    function [7:0] sum;  \n        input [7:0] a, b;  \n        begin  \n            sum = a + b;  \n        end  \n    endfunction\n\n    wire m;\n    wire n, p;\n    reg [1:0] q;\n\n    localparam r = 2;\n\n    always @(posedge a) begin : label_0\n    end\n\n    always_comb begin\n    end\n\n    always_ff begin : label_1\n    end\n\n    always_latch begin\n    end\n\n    test_entity_name \n    #(\n      .a(a ),\n      .b(b ),\n      .c(c ),\n      .d (d )\n    )\n    test_entity_name_dut (\n      .e (e ),\n      .f (f ),\n      .g (g ),\n      .h (h ),\n      .i (i ),\n      .j (j ),\n      .k (k ),\n      .l  ( l)\n    );\n  \nendmodule\n`;\nconst expected = 'test_entity_name2';\nconst current = await hdl_utils.get_toplevel(code_dummy, general_1.HDL_LANG.VERILOG);\n(0, assert_1.equal)(current, expected);",
          "err": {},
          "uuid": "2d700a0a-ea7c-414e-b0e4-1013a689fca9",
          "parentUUID": "5b62d75d-e350-4456-8376-fe1e87e56c88",
          "isHook": false,
          "skipped": true
        }
      ],
      "suites": [
        {
          "uuid": "28dedfc7-2b86-452e-8145-cac1c5592cb5",
          "title": "teroshdl:linter",
          "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\command\\linter\\linter.spec.ts",
          "file": "\\tests\\command\\linter\\linter.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check linter",
              "fullTitle": "teroshdl:linter Check linter",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "28738165-be53-41cc-a2b2-e1eff4798943",
              "parentUUID": "28dedfc7-2b86-452e-8145-cac1c5592cb5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "28738165-be53-41cc-a2b2-e1eff4798943"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "bb1e323c-99c3-49e7-99df-927b421e9f8b",
          "title": "teroshdl:template",
          "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\command\\template\\template.spec.ts",
          "file": "\\tests\\command\\template\\template.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check template",
              "fullTitle": "teroshdl:template Check template",
              "timedOut": false,
              "duration": 2503,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (context.timeout)\n    this.timeout(context.timeout);\nreturn run.call(this);",
              "err": {},
              "uuid": "02f2c3ea-cba6-4e45-a357-228edd36cf8d",
              "parentUUID": "bb1e323c-99c3-49e7-99df-927b421e9f8b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "02f2c3ea-cba6-4e45-a357-228edd36cf8d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2503,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "dce91396-711c-4f43-97f5-6a6526380ed9",
          "title": "Check diagram generator",
          "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\documenter\\diagram.spec.ts",
          "file": "\\tests\\documenter\\diagram.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "With ports and generics and color",
              "fullTitle": "Check diagram generator With ports and generics and color",
              "timedOut": false,
              "duration": 488,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 0;\nconst OPT = {\n    blackandwhite: false\n};\nconst hdl_element = new common_hdl.Hdl_element(general_1.HDL_LANG.VHDL, common_hdl.TYPE_HDL_ELEMENT.ENTITY);\n// Ports\nhdl_element.add_port(port_input);\nhdl_element.add_port(port_output);\n// Generics\nhdl_element.add_generic(generic_0);\nhdl_element.add_generic(generic_1);\nconst svg_diagram = diagram.diagram_generator(hdl_element, OPT);\nconst file_o = paht_lib.join(C_OUTPUT_BASE_PATH, `output_${test_index}.svg`);\nfs.writeFileSync(file_o, svg_diagram);\ncheck_test(test_index);",
              "err": {},
              "uuid": "bfe6f66b-1af8-443d-b7c2-60f84d19d664",
              "parentUUID": "dce91396-711c-4f43-97f5-6a6526380ed9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Only ports and color",
              "fullTitle": "Check diagram generator Only ports and color",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 1;\nconst OPT = {\n    blackandwhite: false\n};\nconst hdl_element = new common_hdl.Hdl_element(general_1.HDL_LANG.VHDL, common_hdl.TYPE_HDL_ELEMENT.ENTITY);\n// Ports\nhdl_element.add_port(port_input);\nhdl_element.add_port(port_output);\nconst svg_diagram = diagram.diagram_generator(hdl_element, OPT);\nconst file_o = paht_lib.join(C_OUTPUT_BASE_PATH, `output_${test_index}.svg`);\nfs.writeFileSync(file_o, svg_diagram);\ncheck_test(test_index);",
              "err": {},
              "uuid": "03e816b2-78fd-4525-8142-b79a5a641313",
              "parentUUID": "dce91396-711c-4f43-97f5-6a6526380ed9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Only generics and color",
              "fullTitle": "Check diagram generator Only generics and color",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 2;\nconst OPT = {\n    blackandwhite: false\n};\nconst hdl_element = new common_hdl.Hdl_element(general_1.HDL_LANG.VHDL, common_hdl.TYPE_HDL_ELEMENT.ENTITY);\n// Generics\nhdl_element.add_generic(generic_0);\nhdl_element.add_generic(generic_1);\nconst svg_diagram = diagram.diagram_generator(hdl_element, OPT);\nconst file_o = paht_lib.join(C_OUTPUT_BASE_PATH, `output_${test_index}.svg`);\nfs.writeFileSync(file_o, svg_diagram);\ncheck_test(test_index);",
              "err": {},
              "uuid": "6f1da7bb-0dbf-45c4-89ff-fee4353a3252",
              "parentUUID": "dce91396-711c-4f43-97f5-6a6526380ed9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Empty and color",
              "fullTitle": "Check diagram generator Empty and color",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 3;\nconst OPT = {\n    blackandwhite: false\n};\nconst hdl_element = new common_hdl.Hdl_element(general_1.HDL_LANG.VHDL, common_hdl.TYPE_HDL_ELEMENT.ENTITY);\nconst svg_diagram = diagram.diagram_generator(hdl_element, OPT);\nconst file_o = paht_lib.join(C_OUTPUT_BASE_PATH, `output_${test_index}.svg`);\nfs.writeFileSync(file_o, svg_diagram);\ncheck_test(test_index);",
              "err": {},
              "uuid": "44e86232-e960-4eab-b75a-96bf91e9904e",
              "parentUUID": "dce91396-711c-4f43-97f5-6a6526380ed9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "With ports and generics and black and white",
              "fullTitle": "Check diagram generator With ports and generics and black and white",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 4;\nconst OPT = {\n    blackandwhite: true\n};\nconst hdl_element = new common_hdl.Hdl_element(general_1.HDL_LANG.VHDL, common_hdl.TYPE_HDL_ELEMENT.ENTITY);\n// Ports\nhdl_element.add_port(port_input);\nhdl_element.add_port(port_output);\n// Generics\nhdl_element.add_generic(generic_0);\nhdl_element.add_generic(generic_1);\nconst svg_diagram = diagram.diagram_generator(hdl_element, OPT);\nconst file_o = paht_lib.join(C_OUTPUT_BASE_PATH, `output_${test_index}.svg`);\nfs.writeFileSync(file_o, svg_diagram);\ncheck_test(test_index);",
              "err": {},
              "uuid": "a3a45f68-eb9c-4f05-9509-5c9744acd60a",
              "parentUUID": "dce91396-711c-4f43-97f5-6a6526380ed9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bfe6f66b-1af8-443d-b7c2-60f84d19d664",
            "03e816b2-78fd-4525-8142-b79a5a641313",
            "6f1da7bb-0dbf-45c4-89ff-fee4353a3252",
            "44e86232-e960-4eab-b75a-96bf91e9904e",
            "a3a45f68-eb9c-4f05-9509-5c9744acd60a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 529,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d5d91240-e9d6-4a72-8c3a-1c667a004de5",
          "title": "Check documenter creator with html",
          "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\documenter\\documenter.spec.ts",
          "file": "\\tests\\documenter\\documenter.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Entity VHDL",
              "fullTitle": "Check documenter creator with html Entity VHDL",
              "timedOut": false,
              "duration": 763,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.VHDL;\nconst hdl_type = 'entity';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "7258551b-ac83-450e-b4a8-33286866fa43",
              "parentUUID": "d5d91240-e9d6-4a72-8c3a-1c667a004de5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Package VHDL",
              "fullTitle": "Check documenter creator with html Package VHDL",
              "timedOut": false,
              "duration": 508,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.VHDL;\nconst hdl_type = 'package';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "ad1f3a4f-0668-4a29-86c0-6dae1f7cd7c4",
              "parentUUID": "d5d91240-e9d6-4a72-8c3a-1c667a004de5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Module Verilog",
              "fullTitle": "Check documenter creator with html Module Verilog",
              "timedOut": false,
              "duration": 1768,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.VERILOG;\nconst hdl_type = 'entity';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "e212008e-37ae-4f2b-b631-ca4d2331b817",
              "parentUUID": "d5d91240-e9d6-4a72-8c3a-1c667a004de5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Package SystemVerilog",
              "fullTitle": "Check documenter creator with html Package SystemVerilog",
              "timedOut": false,
              "duration": 425,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.SYSTEMVERILOG;\nconst hdl_type = 'package';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "f13f39b3-d9a7-4cd2-a82b-cf6306fadeb1",
              "parentUUID": "d5d91240-e9d6-4a72-8c3a-1c667a004de5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Interface SystemVerilog",
              "fullTitle": "Check documenter creator with html Interface SystemVerilog",
              "timedOut": false,
              "duration": 416,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.SYSTEMVERILOG;\nconst hdl_type = 'interface';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "fadbdcf0-6a8d-496c-8641-9a462beeeb5d",
              "parentUUID": "d5d91240-e9d6-4a72-8c3a-1c667a004de5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7258551b-ac83-450e-b4a8-33286866fa43",
            "ad1f3a4f-0668-4a29-86c0-6dae1f7cd7c4",
            "e212008e-37ae-4f2b-b631-ca4d2331b817",
            "f13f39b3-d9a7-4cd2-a82b-cf6306fadeb1",
            "fadbdcf0-6a8d-496c-8641-9a462beeeb5d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3880,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "54c4acf9-0763-4b94-bd0d-b79e4f75eb58",
          "title": "Check documenter creator with markdown",
          "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\documenter\\documenter.spec.ts",
          "file": "\\tests\\documenter\\documenter.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Entity VHDL",
              "fullTitle": "Check documenter creator with markdown Entity VHDL",
              "timedOut": false,
              "duration": 379,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.VHDL;\nconst hdl_type = 'entity';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "61b9333f-e155-42ab-a054-fe5094eed9bd",
              "parentUUID": "54c4acf9-0763-4b94-bd0d-b79e4f75eb58",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Package VHDL",
              "fullTitle": "Check documenter creator with markdown Package VHDL",
              "timedOut": false,
              "duration": 376,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.VHDL;\nconst hdl_type = 'package';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "b1a64c6e-213a-40ec-a22b-97394bf3e0fa",
              "parentUUID": "54c4acf9-0763-4b94-bd0d-b79e4f75eb58",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Module Verilog",
              "fullTitle": "Check documenter creator with markdown Module Verilog",
              "timedOut": false,
              "duration": 725,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.VERILOG;\nconst hdl_type = 'entity';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "ba2e097a-a7cf-4e8d-8a8c-ac4314efa8d3",
              "parentUUID": "54c4acf9-0763-4b94-bd0d-b79e4f75eb58",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Package SystemVerilog",
              "fullTitle": "Check documenter creator with markdown Package SystemVerilog",
              "timedOut": false,
              "duration": 230,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.SYSTEMVERILOG;\nconst hdl_type = 'package';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "4c7e2afa-e571-4c0c-8f74-4dd689e2d78e",
              "parentUUID": "54c4acf9-0763-4b94-bd0d-b79e4f75eb58",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Interface SystemVerilog",
              "fullTitle": "Check documenter creator with markdown Interface SystemVerilog",
              "timedOut": false,
              "duration": 368,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.SYSTEMVERILOG;\nconst hdl_type = 'interface';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "53d0154c-9acb-432b-aba0-bff2725b1bcb",
              "parentUUID": "54c4acf9-0763-4b94-bd0d-b79e4f75eb58",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "61b9333f-e155-42ab-a054-fe5094eed9bd",
            "b1a64c6e-213a-40ec-a22b-97394bf3e0fa",
            "ba2e097a-a7cf-4e8d-8a8c-ac4314efa8d3",
            "4c7e2afa-e571-4c0c-8f74-4dd689e2d78e",
            "53d0154c-9acb-432b-aba0-bff2725b1bcb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2078,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "38c2bfd3-117a-4d42-80cd-b1b4e9c6f6f5",
          "title": "Test Doxygen elements single line and only 1 element in the description.",
          "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\documenter\\doxygen.spec.ts",
          "file": "\\tests\\documenter\\doxygen.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Testing author",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing author",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "a23da4e5-e875-46c4-b4bf-05d8966e4df6",
              "parentUUID": "38c2bfd3-117a-4d42-80cd-b1b4e9c6f6f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing version",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing version",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "e7f8b6a7-916e-4563-80cf-98c15064166e",
              "parentUUID": "38c2bfd3-117a-4d42-80cd-b1b4e9c6f6f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing project",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing project",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "70fe1833-e148-492e-87b5-13f497f8fe0d",
              "parentUUID": "38c2bfd3-117a-4d42-80cd-b1b4e9c6f6f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing copyright",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing copyright",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "daff889d-5138-49be-a258-eef30a7dda38",
              "parentUUID": "38c2bfd3-117a-4d42-80cd-b1b4e9c6f6f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing brief",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing brief",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "297174ea-54e1-4c3c-a3d8-8ff1eaaf8ca4",
              "parentUUID": "38c2bfd3-117a-4d42-80cd-b1b4e9c6f6f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing details",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing details",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "0d8c8586-a441-478a-bd4a-5df881355962",
              "parentUUID": "38c2bfd3-117a-4d42-80cd-b1b4e9c6f6f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing custom_section_begin",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing custom_section_begin",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "415e4d15-5ea4-4676-8c0a-94863fbe3be5",
              "parentUUID": "38c2bfd3-117a-4d42-80cd-b1b4e9c6f6f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing custom_section_end",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing custom_section_end",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "674c0467-2d21-4e06-8b8e-5078383438dc",
              "parentUUID": "38c2bfd3-117a-4d42-80cd-b1b4e9c6f6f5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a23da4e5-e875-46c4-b4bf-05d8966e4df6",
            "e7f8b6a7-916e-4563-80cf-98c15064166e",
            "70fe1833-e148-492e-87b5-13f497f8fe0d",
            "daff889d-5138-49be-a258-eef30a7dda38",
            "297174ea-54e1-4c3c-a3d8-8ff1eaaf8ca4",
            "0d8c8586-a441-478a-bd4a-5df881355962",
            "415e4d15-5ea4-4676-8c0a-94863fbe3be5",
            "674c0467-2d21-4e06-8b8e-5078383438dc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0da5cdd9-7c17-4035-920f-1a919ec6b53b",
          "title": "Test Doxygen elements multi line and only 1 element in the description.",
          "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\documenter\\doxygen.spec.ts",
          "file": "\\tests\\documenter\\doxygen.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Testing author",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing author",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "ba91b036-e6d6-4153-84f2-0334c04d575c",
              "parentUUID": "0da5cdd9-7c17-4035-920f-1a919ec6b53b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing version",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing version",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "ab967a5f-2fe5-4537-98a1-a8bfea08ab26",
              "parentUUID": "0da5cdd9-7c17-4035-920f-1a919ec6b53b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing project",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing project",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "ebeecbbf-9bf6-429b-a12f-e2212650b657",
              "parentUUID": "0da5cdd9-7c17-4035-920f-1a919ec6b53b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing copyright",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing copyright",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "c50c1502-bbfc-4ff3-bbfd-a908cbdce1a2",
              "parentUUID": "0da5cdd9-7c17-4035-920f-1a919ec6b53b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing brief",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing brief",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "5396bf87-8f3c-4035-9637-0713a4cb139e",
              "parentUUID": "0da5cdd9-7c17-4035-920f-1a919ec6b53b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing details",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing details",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "713e2a5e-81a4-49d3-9ea6-73e65832b182",
              "parentUUID": "0da5cdd9-7c17-4035-920f-1a919ec6b53b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing custom_section_begin",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing custom_section_begin",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "6c5feaf7-4a29-4f1f-b73e-dd5afc6c852f",
              "parentUUID": "0da5cdd9-7c17-4035-920f-1a919ec6b53b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing custom_section_end",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing custom_section_end",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "94764cd0-e42e-4cfd-b2b6-3c52f563070e",
              "parentUUID": "0da5cdd9-7c17-4035-920f-1a919ec6b53b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ba91b036-e6d6-4153-84f2-0334c04d575c",
            "ab967a5f-2fe5-4537-98a1-a8bfea08ab26",
            "ebeecbbf-9bf6-429b-a12f-e2212650b657",
            "c50c1502-bbfc-4ff3-bbfd-a908cbdce1a2",
            "5396bf87-8f3c-4035-9637-0713a4cb139e",
            "713e2a5e-81a4-49d3-9ea6-73e65832b182",
            "6c5feaf7-4a29-4f1f-b73e-dd5afc6c852f",
            "94764cd0-e42e-4cfd-b2b6-3c52f563070e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "42eb72d3-2aae-436b-915f-b25fce4521e1",
          "title": "Check sections creator with html",
          "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\documenter\\section_creator.spec.ts",
          "file": "\\tests\\documenter\\section_creator.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Title section",
              "fullTitle": "Check sections creator with html Title section",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"title\";\nconst section = creator.get_title_section(hdl_element, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "2ad40cdd-dcf0-4d40-a36a-9ec9bdb0245e",
              "parentUUID": "42eb72d3-2aae-436b-915f-b25fce4521e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Input section",
              "fullTitle": "Check sections creator with html Input section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"input\";\nconst file_path = \"/example/of/sample.vhd\";\nconst section = creator.get_input_section(file_path, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "eed270df-9ca1-4e3a-84c0-f40c4d97b945",
              "parentUUID": "42eb72d3-2aae-436b-915f-b25fce4521e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Info section",
              "fullTitle": "Check sections creator with html Info section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"info\";\nconst section = creator.get_info_section(hdl_element, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "e2a1aff7-63e8-4f13-91f8-23b6e85ffa8c",
              "parentUUID": "42eb72d3-2aae-436b-915f-b25fce4521e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Diagram section",
              "fullTitle": "Check sections creator with html Diagram section",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "this.skip();\nconst section_name = \"diagram\";\nconst svg_path = paht_lib.join(C_OUTPUT_BASE_PATH, 'input_path.svg');\nconst section = creator.get_diagram_section(hdl_element, configuration, svg_path);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, true);",
              "err": {},
              "uuid": "7f4f4acf-ff09-4a69-aaf7-edbfb38c5b84",
              "parentUUID": "42eb72d3-2aae-436b-915f-b25fce4521e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Custom begin section",
              "fullTitle": "Check sections creator with html Custom begin section",
              "timedOut": false,
              "duration": 233,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"custom_section_begin\";\nconst input_path = paht_lib.join(__dirname, 'section_creator', 'helpers', 'input_path.vhd');\nconst section = creator.get_custom_section('custom_section_begin', hdl_element, configuration, input_path);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "593dd413-184d-4d9d-aa53-caf080734c51",
              "parentUUID": "42eb72d3-2aae-436b-915f-b25fce4521e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Custom end section",
              "fullTitle": "Check sections creator with html Custom end section",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"custom_section_end\";\nconst input_path = paht_lib.join(__dirname, 'section_creator', 'helpers', 'input_path.vhd');\nconst section = creator.get_custom_section('custom_section_end', hdl_element, configuration, input_path);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "2a8d708b-5e9d-4bff-a3ee-6094ad03611f",
              "parentUUID": "42eb72d3-2aae-436b-915f-b25fce4521e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Description section",
              "fullTitle": "Check sections creator with html Description section",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (configuration.output_type === common_documenter.doc_output_type.MARKDOWN) {\n    this.skip();\n}\nconst section_name = \"description\";\nconst section = creator.get_description_section(hdl_element, configuration, C_OUTPUT_BASE_PATH);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "1fae7501-8270-4e6c-bd85-9c748a395225",
              "parentUUID": "42eb72d3-2aae-436b-915f-b25fce4521e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Port section",
              "fullTitle": "Check sections creator with html Port section",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"port\";\nconst section = creator.get_in_out_section(hdl_element, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "927f1c66-ca8b-4340-8540-ce480aa0937f",
              "parentUUID": "42eb72d3-2aae-436b-915f-b25fce4521e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Signal-constant section",
              "fullTitle": "Check sections creator with html Signal-constant section",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"signal_constant\";\nconst section = creator.get_signal_constant_section(hdl_element, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "58b93081-89ed-4662-a72f-2daa76d0892e",
              "parentUUID": "42eb72d3-2aae-436b-915f-b25fce4521e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Process section",
              "fullTitle": "Check sections creator with html Process section",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"process\";\nconst section = creator.get_process_section(hdl_element, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "f6117aba-eb6f-4807-88cd-2d44aba84c62",
              "parentUUID": "42eb72d3-2aae-436b-915f-b25fce4521e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Function section",
              "fullTitle": "Check sections creator with html Function section",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"function\";\nconst section = creator.get_function_section(hdl_element, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "a3b2acbe-1db0-40f5-a82b-53240990e54f",
              "parentUUID": "42eb72d3-2aae-436b-915f-b25fce4521e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Instantiation section",
              "fullTitle": "Check sections creator with html Instantiation section",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"instantiation\";\nconst section = creator.get_instantiation_section(hdl_element, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "24864863-ac92-4fb2-b7a9-4d9ce017c575",
              "parentUUID": "42eb72d3-2aae-436b-915f-b25fce4521e1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2ad40cdd-dcf0-4d40-a36a-9ec9bdb0245e",
            "eed270df-9ca1-4e3a-84c0-f40c4d97b945",
            "e2a1aff7-63e8-4f13-91f8-23b6e85ffa8c",
            "593dd413-184d-4d9d-aa53-caf080734c51",
            "2a8d708b-5e9d-4bff-a3ee-6094ad03611f",
            "1fae7501-8270-4e6c-bd85-9c748a395225",
            "927f1c66-ca8b-4340-8540-ce480aa0937f",
            "58b93081-89ed-4662-a72f-2daa76d0892e",
            "f6117aba-eb6f-4807-88cd-2d44aba84c62",
            "a3b2acbe-1db0-40f5-a82b-53240990e54f",
            "24864863-ac92-4fb2-b7a9-4d9ce017c575"
          ],
          "failures": [],
          "pending": [
            "7f4f4acf-ff09-4a69-aaf7-edbfb38c5b84"
          ],
          "skipped": [],
          "duration": 256,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7cf25a01-7104-4403-869e-841418404140",
          "title": "Check sections creator with markdown",
          "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\documenter\\section_creator.spec.ts",
          "file": "\\tests\\documenter\\section_creator.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Title section",
              "fullTitle": "Check sections creator with markdown Title section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"title\";\nconst section = creator.get_title_section(hdl_element, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "5f1d1e50-c40b-42de-b40b-2f55e55e79c9",
              "parentUUID": "7cf25a01-7104-4403-869e-841418404140",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Input section",
              "fullTitle": "Check sections creator with markdown Input section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"input\";\nconst file_path = \"/example/of/sample.vhd\";\nconst section = creator.get_input_section(file_path, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "2e42d78e-6210-499d-89fd-3be2f4613c16",
              "parentUUID": "7cf25a01-7104-4403-869e-841418404140",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Info section",
              "fullTitle": "Check sections creator with markdown Info section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"info\";\nconst section = creator.get_info_section(hdl_element, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "feb1afee-9f2c-450b-aded-f3548fc84d34",
              "parentUUID": "7cf25a01-7104-4403-869e-841418404140",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Diagram section",
              "fullTitle": "Check sections creator with markdown Diagram section",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "this.skip();\nconst section_name = \"diagram\";\nconst svg_path = paht_lib.join(C_OUTPUT_BASE_PATH, 'input_path.svg');\nconst section = creator.get_diagram_section(hdl_element, configuration, svg_path);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, true);",
              "err": {},
              "uuid": "353238fa-0373-45fa-9e6d-32701aa81e50",
              "parentUUID": "7cf25a01-7104-4403-869e-841418404140",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Custom begin section",
              "fullTitle": "Check sections creator with markdown Custom begin section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"custom_section_begin\";\nconst input_path = paht_lib.join(__dirname, 'section_creator', 'helpers', 'input_path.vhd');\nconst section = creator.get_custom_section('custom_section_begin', hdl_element, configuration, input_path);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "f4dd5c7e-49d8-4e72-996c-7f16368722e6",
              "parentUUID": "7cf25a01-7104-4403-869e-841418404140",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Custom end section",
              "fullTitle": "Check sections creator with markdown Custom end section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"custom_section_end\";\nconst input_path = paht_lib.join(__dirname, 'section_creator', 'helpers', 'input_path.vhd');\nconst section = creator.get_custom_section('custom_section_end', hdl_element, configuration, input_path);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "fd7661ed-4ac8-430d-b978-57b60d74187a",
              "parentUUID": "7cf25a01-7104-4403-869e-841418404140",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Description section",
              "fullTitle": "Check sections creator with markdown Description section",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "if (configuration.output_type === common_documenter.doc_output_type.MARKDOWN) {\n    this.skip();\n}\nconst section_name = \"description\";\nconst section = creator.get_description_section(hdl_element, configuration, C_OUTPUT_BASE_PATH);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "6fc1f890-a04f-442f-b849-65327f7cfd8d",
              "parentUUID": "7cf25a01-7104-4403-869e-841418404140",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Port section",
              "fullTitle": "Check sections creator with markdown Port section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"port\";\nconst section = creator.get_in_out_section(hdl_element, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "2b626585-33ae-43e7-8e0d-ba442b05e55e",
              "parentUUID": "7cf25a01-7104-4403-869e-841418404140",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Signal-constant section",
              "fullTitle": "Check sections creator with markdown Signal-constant section",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"signal_constant\";\nconst section = creator.get_signal_constant_section(hdl_element, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "dc08ba39-8e5c-4a47-9488-6da379ccf039",
              "parentUUID": "7cf25a01-7104-4403-869e-841418404140",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Process section",
              "fullTitle": "Check sections creator with markdown Process section",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"process\";\nconst section = creator.get_process_section(hdl_element, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "9716798f-e14c-4a6d-8346-99b08da0ea9c",
              "parentUUID": "7cf25a01-7104-4403-869e-841418404140",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Function section",
              "fullTitle": "Check sections creator with markdown Function section",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"function\";\nconst section = creator.get_function_section(hdl_element, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "0352aebe-acb6-41c9-b24c-107b5f4e4c47",
              "parentUUID": "7cf25a01-7104-4403-869e-841418404140",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Instantiation section",
              "fullTitle": "Check sections creator with markdown Instantiation section",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"instantiation\";\nconst section = creator.get_instantiation_section(hdl_element, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "0792940a-3542-4897-ab9f-d0a331c853b0",
              "parentUUID": "7cf25a01-7104-4403-869e-841418404140",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5f1d1e50-c40b-42de-b40b-2f55e55e79c9",
            "2e42d78e-6210-499d-89fd-3be2f4613c16",
            "feb1afee-9f2c-450b-aded-f3548fc84d34",
            "f4dd5c7e-49d8-4e72-996c-7f16368722e6",
            "fd7661ed-4ac8-430d-b978-57b60d74187a",
            "2b626585-33ae-43e7-8e0d-ba442b05e55e",
            "dc08ba39-8e5c-4a47-9488-6da379ccf039",
            "9716798f-e14c-4a6d-8346-99b08da0ea9c",
            "0352aebe-acb6-41c9-b24c-107b5f4e4c47",
            "0792940a-3542-4897-ab9f-d0a331c853b0"
          ],
          "failures": [],
          "pending": [
            "353238fa-0373-45fa-9e6d-32701aa81e50",
            "6fc1f890-a04f-442f-b849-65327f7cfd8d"
          ],
          "skipped": [],
          "duration": 14,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7781ef1c-5a9a-4873-be39-5669488249f7",
          "title": "Check standalone VHDL formatter",
          "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\formatter\\formatter.spec.ts",
          "file": "\\tests\\formatter\\formatter.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check align comments true, indentation and keyworks lowercase",
              "fullTitle": "Check standalone VHDL formatter Check align comments true, indentation and keyworks lowercase",
              "timedOut": false,
              "duration": 50,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 0;\nconst options = {\n    remove_comments: false,\n    remove_asserts: false,\n    remove_report: false,\n    check_alias: false,\n    align_comments: true,\n    sign_align_settings: {\n        is_regional: true,\n        is_all: true,\n        mode: common.ALIGN_MODE.LOCAL,\n        keyWords: [\"FUNCTION\", \"IMPURE FUNCTION\", \"GENERIC\", \"PORT\", \"PROCEDURE\"]\n    },\n    keyword_case: common.LETTER_CASE.LOWERCASE,\n    type_name_case: common.LETTER_CASE.LOWERCASE,\n    indentation: \"    \",\n    new_line_settings: {\n        new_line_after: [\";\", \"then\"],\n        no_new_line_after: []\n    },\n    end_of_line: \"\\n\"\n};\nawait format_and_check(formatter_name, language, test_index, options);",
              "err": {},
              "uuid": "a342716a-15fc-4880-9f99-010a0a56d528",
              "parentUUID": "7781ef1c-5a9a-4873-be39-5669488249f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check align comments false, indentation and keyworks uppercase",
              "fullTitle": "Check standalone VHDL formatter Check align comments false, indentation and keyworks uppercase",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 1;\nconst options = {\n    remove_comments: false,\n    remove_asserts: false,\n    remove_report: false,\n    check_alias: false,\n    align_comments: false,\n    sign_align_settings: {\n        is_regional: true,\n        is_all: true,\n        mode: common.ALIGN_MODE.LOCAL,\n        keyWords: [\"FUNCTION\", \"IMPURE FUNCTION\", \"GENERIC\", \"PORT\", \"PROCEDURE\"]\n    },\n    keyword_case: common.LETTER_CASE.UPPERCASE,\n    type_name_case: common.LETTER_CASE.UPPERCASE,\n    indentation: \"      \",\n    new_line_settings: {\n        new_line_after: [\";\", \"then\"],\n        no_new_line_after: []\n    },\n    end_of_line: \"\\n\"\n};\nawait format_and_check(formatter_name, language, test_index, options);",
              "err": {},
              "uuid": "1777e7fd-b578-4a8e-9ba0-cbcb84b0a383",
              "parentUUID": "7781ef1c-5a9a-4873-be39-5669488249f7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a342716a-15fc-4880-9f99-010a0a56d528",
            "1777e7fd-b578-4a8e-9ba0-cbcb84b0a383"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 55,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8b55173c-c2f9-4733-8626-4418f27d7620",
          "title": "Check istyle formatter",
          "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\formatter\\formatter.spec.ts",
          "file": "\\tests\\formatter\\formatter.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check ansi with indent = 2",
              "fullTitle": "Check istyle formatter Check ansi with indent = 2",
              "timedOut": false,
              "duration": 48,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index;\nconst options = { style: style_inst, indent_size: 2 };\nawait format_and_check(formatter_name, language, test_index, options);",
              "err": {},
              "uuid": "5d07101f-5e0e-41e0-b6a3-0392009405f1",
              "parentUUID": "8b55173c-c2f9-4733-8626-4418f27d7620",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check kr with indent = 2",
              "fullTitle": "Check istyle formatter Check kr with indent = 2",
              "timedOut": false,
              "duration": 26,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index;\nconst options = { style: style_inst, indent_size: 2 };\nawait format_and_check(formatter_name, language, test_index, options);",
              "err": {},
              "uuid": "4532182a-87bf-4b71-94a5-651620b801c5",
              "parentUUID": "8b55173c-c2f9-4733-8626-4418f27d7620",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check gnu with indent = 2",
              "fullTitle": "Check istyle formatter Check gnu with indent = 2",
              "timedOut": false,
              "duration": 21,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index;\nconst options = { style: style_inst, indent_size: 2 };\nawait format_and_check(formatter_name, language, test_index, options);",
              "err": {},
              "uuid": "ce871eb6-6ec1-4b12-ba96-3b43d16e84ee",
              "parentUUID": "8b55173c-c2f9-4733-8626-4418f27d7620",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check onlyindent with indent = 2",
              "fullTitle": "Check istyle formatter Check onlyindent with indent = 2",
              "timedOut": false,
              "duration": 26,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index;\nconst options = { style: style_inst, indent_size: 2 };\nawait format_and_check(formatter_name, language, test_index, options);",
              "err": {},
              "uuid": "4b51f698-e9b0-4457-8243-b832608286b4",
              "parentUUID": "8b55173c-c2f9-4733-8626-4418f27d7620",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check ansi with indent = 6",
              "fullTitle": "Check istyle formatter Check ansi with indent = 6",
              "timedOut": false,
              "duration": 22,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index + style_list.length;\nconst options = { style: style_inst, indent_size: 6 };\nawait format_and_check(formatter_name, language, test_index, options);",
              "err": {},
              "uuid": "af6ab096-07b1-4974-ae78-62db366c7e56",
              "parentUUID": "8b55173c-c2f9-4733-8626-4418f27d7620",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check kr with indent = 6",
              "fullTitle": "Check istyle formatter Check kr with indent = 6",
              "timedOut": false,
              "duration": 27,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index + style_list.length;\nconst options = { style: style_inst, indent_size: 6 };\nawait format_and_check(formatter_name, language, test_index, options);",
              "err": {},
              "uuid": "9c33487e-6c27-4e0c-ae97-d9f7eefebc0e",
              "parentUUID": "8b55173c-c2f9-4733-8626-4418f27d7620",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check gnu with indent = 6",
              "fullTitle": "Check istyle formatter Check gnu with indent = 6",
              "timedOut": false,
              "duration": 24,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index + style_list.length;\nconst options = { style: style_inst, indent_size: 6 };\nawait format_and_check(formatter_name, language, test_index, options);",
              "err": {},
              "uuid": "599a3f69-e9fe-4af4-985c-c6e787d7d22d",
              "parentUUID": "8b55173c-c2f9-4733-8626-4418f27d7620",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check onlyindent with indent = 6",
              "fullTitle": "Check istyle formatter Check onlyindent with indent = 6",
              "timedOut": false,
              "duration": 26,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index + style_list.length;\nconst options = { style: style_inst, indent_size: 6 };\nawait format_and_check(formatter_name, language, test_index, options);",
              "err": {},
              "uuid": "51825b70-a1e2-4b52-a530-8465c20aea13",
              "parentUUID": "8b55173c-c2f9-4733-8626-4418f27d7620",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5d07101f-5e0e-41e0-b6a3-0392009405f1",
            "4532182a-87bf-4b71-94a5-651620b801c5",
            "ce871eb6-6ec1-4b12-ba96-3b43d16e84ee",
            "4b51f698-e9b0-4457-8243-b832608286b4",
            "af6ab096-07b1-4974-ae78-62db366c7e56",
            "9c33487e-6c27-4e0c-ae97-d9f7eefebc0e",
            "599a3f69-e9fe-4af4-985c-c6e787d7d22d",
            "51825b70-a1e2-4b52-a530-8465c20aea13"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 220,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "edf5e00d-3c5c-4303-b780-1f8d550e3b11",
          "title": "Check s3sv formatter",
          "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\formatter\\formatter.spec.ts",
          "file": "\\tests\\formatter\\formatter.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check config 0",
              "fullTitle": "Check s3sv formatter Check config 0",
              "timedOut": false,
              "duration": 1112,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 0;\nconst options = {\n    python3_path: \"\",\n    use_tabs: false,\n    indent_size: 2,\n    one_bind_per_line: true,\n    one_decl_per_line: true\n};\nawait format_and_check(formatter_name, language, test_index, options);",
              "err": {},
              "uuid": "678ee217-9e66-41cd-9e99-4711abcf91dc",
              "parentUUID": "edf5e00d-3c5c-4303-b780-1f8d550e3b11",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check config 1",
              "fullTitle": "Check s3sv formatter Check config 1",
              "timedOut": false,
              "duration": 220,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 1;\nconst options = {\n    python3_path: \"\",\n    use_tabs: true,\n    indent_size: 4,\n    one_bind_per_line: true,\n    one_decl_per_line: true\n};\nawait format_and_check(formatter_name, language, test_index, options);",
              "err": {},
              "uuid": "6417fc13-646f-4ceb-b10e-deea1c44b438",
              "parentUUID": "edf5e00d-3c5c-4303-b780-1f8d550e3b11",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check config 2 and bad python3 path",
              "fullTitle": "Check s3sv formatter Check config 2 and bad python3 path",
              "timedOut": false,
              "duration": 255,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 2;\nconst options = {\n    python3_path: \"asdf\",\n    use_tabs: true,\n    indent_size: 2,\n    one_bind_per_line: false,\n    one_decl_per_line: true\n};\nawait format_and_check(formatter_name, language, test_index, options);",
              "err": {},
              "uuid": "e4f9668f-e8aa-4aea-9478-fa59225f3521",
              "parentUUID": "edf5e00d-3c5c-4303-b780-1f8d550e3b11",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "678ee217-9e66-41cd-9e99-4711abcf91dc",
            "6417fc13-646f-4ceb-b10e-deea1c44b438",
            "e4f9668f-e8aa-4aea-9478-fa59225f3521"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1587,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "3fdda1b7-573e-4c1e-8a49-30715963e7da",
          "title": "Check FSM for vhdl",
          "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\fsm.spec.ts",
          "file": "\\tests\\parser\\fsm.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Normal",
              "fullTitle": "Check FSM for vhdl Normal",
              "timedOut": false,
              "duration": 123,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 0;\nawait parse_fsm(lang_inst, test_index);\ncheck_test(test_index, lang_inst);",
              "err": {},
              "uuid": "0a22efe6-d4f2-4a07-8296-f99c1ee604b0",
              "parentUUID": "3fdda1b7-573e-4c1e-8a49-30715963e7da",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0a22efe6-d4f2-4a07-8296-f99c1ee604b0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 123,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "fba4df73-3c2b-49ff-876f-efc94e9a73b9",
          "title": "Check FSM for verilog",
          "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\fsm.spec.ts",
          "file": "\\tests\\parser\\fsm.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Normal",
              "fullTitle": "Check FSM for verilog Normal",
              "timedOut": false,
              "duration": 573,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 0;\nawait parse_fsm(lang_inst, test_index);\ncheck_test(test_index, lang_inst);",
              "err": {},
              "uuid": "c106f3a2-6c14-493e-9568-c5b295e72aa0",
              "parentUUID": "fba4df73-3c2b-49ff-876f-efc94e9a73b9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c106f3a2-6c14-493e-9568-c5b295e72aa0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 573,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f888109b-3fdd-4d2c-b4d6-e5475c672008",
          "title": "Check entity Verilog",
          "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_verilog_entity.spec.ts",
          "file": "\\tests\\parser\\parser_verilog_entity.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "514bdef6-c990-410b-9de3-c11810aadbd2",
              "title": "Check entity.",
              "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_verilog_entity.spec.ts",
              "file": "\\tests\\parser\\parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check entity.\"",
                  "fullTitle": "Check entity Verilog Check entity. \"before all\" hook in \"Check entity.\"",
                  "timedOut": false,
                  "duration": 220,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();",
                  "err": {},
                  "uuid": "53a5ae43-58ef-4797-9d77-3e05294f98da",
                  "parentUUID": "514bdef6-c990-410b-9de3-c11810aadbd2",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check name",
                  "fullTitle": "Check entity Verilog Check entity. Check name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.name, 'test_entity_name');",
                  "err": {},
                  "uuid": "981a2ca7-24f7-4943-9cd5-daa3ba3df588",
                  "parentUUID": "514bdef6-c990-410b-9de3-c11810aadbd2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check type is entity",
                  "fullTitle": "Check entity Verilog Check entity. Check type is entity",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.get_hdl_type(), common.TYPE_HDL_ELEMENT.ENTITY);",
                  "err": {},
                  "uuid": "7c9c2e97-bc99-49d4-8443-2d521d375e03",
                  "parentUUID": "514bdef6-c990-410b-9de3-c11810aadbd2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "981a2ca7-24f7-4943-9cd5-daa3ba3df588",
                "7c9c2e97-bc99-49d4-8443-2d521d375e03"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7140f553-72ac-4fc5-bbb4-f19814fa6d4b",
              "title": "Check generic.",
              "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_verilog_entity.spec.ts",
              "file": "\\tests\\parser\\parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check generic.\"",
                  "fullTitle": "Check entity Verilog Check generic. \"before all\" hook in \"Check generic.\"",
                  "timedOut": false,
                  "duration": 340,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_generic_array();",
                  "err": {},
                  "uuid": "31027b45-c1b4-4b00-8fc0-f296988c1c00",
                  "parentUUID": "7140f553-72ac-4fc5-bbb4-f19814fa6d4b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check entity Verilog Check generic. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"a\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: \"8\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "011116ad-d251-4fc0-a698-bf1c6ce9356f",
                  "parentUUID": "7140f553-72ac-4fc5-bbb4-f19814fa6d4b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check with default value",
                  "fullTitle": "Check entity Verilog Check generic. Check with default value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"b\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: \"9\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "f2bf3132-cdd0-48dd-b4c3-c40391725f22",
                  "parentUUID": "7140f553-72ac-4fc5-bbb4-f19814fa6d4b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multiple declarations and default value in one line 0",
                  "fullTitle": "Check entity Verilog Check generic. Check multiple declarations and default value in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"c\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: \"10\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "8a8e404e-fcd4-4bad-80fb-a05f7224233b",
                  "parentUUID": "7140f553-72ac-4fc5-bbb4-f19814fa6d4b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multiple declarations and default value in one line 1",
                  "fullTitle": "Check entity Verilog Check generic. Check multiple declarations and default value in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[3];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"d\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: \"11\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "5114d5e1-a273-496c-89b7-394297a17f66",
                  "parentUUID": "7140f553-72ac-4fc5-bbb4-f19814fa6d4b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "011116ad-d251-4fc0-a698-bf1c6ce9356f",
                "f2bf3132-cdd0-48dd-b4c3-c40391725f22",
                "8a8e404e-fcd4-4bad-80fb-a05f7224233b",
                "5114d5e1-a273-496c-89b7-394297a17f66"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "43ac0f9f-06a2-4ca4-8dbd-5a5305637707",
              "title": "Check port.",
              "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_verilog_entity.spec.ts",
              "file": "\\tests\\parser\\parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check port.\"",
                  "fullTitle": "Check entity Verilog Check port. \"before all\" hook in \"Check port.\"",
                  "timedOut": false,
                  "duration": 203,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_port_array();",
                  "err": {},
                  "uuid": "8e352c93-bbea-4770-a537-015533ea8e86",
                  "parentUUID": "43ac0f9f-06a2-4ca4-8dbd-5a5305637707",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check input port",
                  "fullTitle": "Check entity Verilog Check port. Check input port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"e\",\n        description: \"\"\n    },\n    direction: \"input\",\n    default_value: \"\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "b5ba2239-81c0-4671-8c82-d4d395bb833b",
                  "parentUUID": "43ac0f9f-06a2-4ca4-8dbd-5a5305637707",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check output port",
                  "fullTitle": "Check entity Verilog Check port. Check output port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"f\",\n        description: \"\"\n    },\n    direction: \"output\",\n    default_value: \"\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "68926757-3dd3-4105-a862-82e505474204",
                  "parentUUID": "43ac0f9f-06a2-4ca4-8dbd-5a5305637707",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check input reg port",
                  "fullTitle": "Check entity Verilog Check port. Check input reg port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"g\",\n        description: \"\"\n    },\n    direction: \"input\",\n    default_value: \"\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "0749fcb9-1bc6-4133-9717-61a977c2222d",
                  "parentUUID": "43ac0f9f-06a2-4ca4-8dbd-5a5305637707",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check input wire port",
                  "fullTitle": "Check entity Verilog Check port. Check input wire port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[3];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"h\",\n        description: \"\"\n    },\n    direction: \"input\",\n    default_value: \"\",\n    type: \"wire\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "2b5cbde0-9420-47bc-ba57-1d188bee4cf9",
                  "parentUUID": "43ac0f9f-06a2-4ca4-8dbd-5a5305637707",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check input multiple reg array 0",
                  "fullTitle": "Check entity Verilog Check port. Check input multiple reg array 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[4];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"i\",\n        description: \"\"\n    },\n    direction: \"input\",\n    default_value: \"\",\n    type: \"[7:0]\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "d8895c1a-0a07-4bc7-9fcc-b73607659212",
                  "parentUUID": "43ac0f9f-06a2-4ca4-8dbd-5a5305637707",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check input multiple reg array 1",
                  "fullTitle": "Check entity Verilog Check port. Check input multiple reg array 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "this.skip();\nconst actual = element_array[5];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"j\",\n        description: \"\"\n    },\n    direction: \"input\",\n    default_value: \"\",\n    type: \"[7:0]\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "6d2146b8-96b4-4a89-8d48-cf19235f1504",
                  "parentUUID": "43ac0f9f-06a2-4ca4-8dbd-5a5305637707",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check input wire array",
                  "fullTitle": "Check entity Verilog Check port. Check input wire array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[6];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"k\",\n        description: \"\"\n    },\n    direction: \"input\",\n    default_value: \"\",\n    type: \"wire [9:0]\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "d52b63f8-3837-4cf9-b952-48dc4a447895",
                  "parentUUID": "43ac0f9f-06a2-4ca4-8dbd-5a5305637707",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check output wire array",
                  "fullTitle": "Check entity Verilog Check port. Check output wire array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[7];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"l\",\n        description: \"\"\n    },\n    direction: \"output\",\n    default_value: \"\",\n    type: \"wire [9:0]\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "ea75a318-a4cb-4700-b84e-33643f7c40f5",
                  "parentUUID": "43ac0f9f-06a2-4ca4-8dbd-5a5305637707",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b5ba2239-81c0-4671-8c82-d4d395bb833b",
                "68926757-3dd3-4105-a862-82e505474204",
                "0749fcb9-1bc6-4133-9717-61a977c2222d",
                "2b5cbde0-9420-47bc-ba57-1d188bee4cf9",
                "d8895c1a-0a07-4bc7-9fcc-b73607659212",
                "d52b63f8-3837-4cf9-b952-48dc4a447895",
                "ea75a318-a4cb-4700-b84e-33643f7c40f5"
              ],
              "failures": [],
              "pending": [
                "6d2146b8-96b4-4a89-8d48-cf19235f1504"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "40c9dffe-a8ac-4561-8d15-f639b72b019d",
              "title": "Check signal.",
              "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_verilog_entity.spec.ts",
              "file": "\\tests\\parser\\parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check signal.\"",
                  "fullTitle": "Check entity Verilog Check signal. \"before all\" hook in \"Check signal.\"",
                  "timedOut": false,
                  "duration": 369,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_signal_array();",
                  "err": {},
                  "uuid": "e4a5bfae-dd76-40d1-bc6c-b9e0151d43d7",
                  "parentUUID": "40c9dffe-a8ac-4561-8d15-f639b72b019d",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check entity Verilog Check signal. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"m\",\n        description: \"\"\n    },\n    type: \"wire\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "6ec80ad4-f8d7-4ab3-9532-ee2874228eec",
                  "parentUUID": "40c9dffe-a8ac-4561-8d15-f639b72b019d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 0",
                  "fullTitle": "Check entity Verilog Check signal. Check multimple declaration in one line 0",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"n\",\n        description: \"\"\n    },\n    type: \"wire\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "605d19bf-b5f5-4ef9-9175-c9b4707393cc",
                  "parentUUID": "40c9dffe-a8ac-4561-8d15-f639b72b019d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 1",
                  "fullTitle": "Check entity Verilog Check signal. Check multimple declaration in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"p\",\n        description: \"\"\n    },\n    type: \"wire\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "da4a1376-34ce-46d6-b9ed-850b23fc1477",
                  "parentUUID": "40c9dffe-a8ac-4561-8d15-f639b72b019d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check array",
                  "fullTitle": "Check entity Verilog Check signal. Check array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[3];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"q\",\n        description: \"\"\n    },\n    type: \"reg [1:0]\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "9c32fcad-26cd-4e01-9644-a73ac925af3b",
                  "parentUUID": "40c9dffe-a8ac-4561-8d15-f639b72b019d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6ec80ad4-f8d7-4ab3-9532-ee2874228eec",
                "605d19bf-b5f5-4ef9-9175-c9b4707393cc",
                "da4a1376-34ce-46d6-b9ed-850b23fc1477",
                "9c32fcad-26cd-4e01-9644-a73ac925af3b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d1e318b7-9743-4667-a81b-1b7cc1a27985",
              "title": "Check constant.",
              "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_verilog_entity.spec.ts",
              "file": "\\tests\\parser\\parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check constant.\"",
                  "fullTitle": "Check entity Verilog Check constant. \"before all\" hook in \"Check constant.\"",
                  "timedOut": false,
                  "duration": 206,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_constant_array();",
                  "err": {},
                  "uuid": "85ead50d-95a2-4e72-b47f-65511a23a822",
                  "parentUUID": "d1e318b7-9743-4667-a81b-1b7cc1a27985",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check entity Verilog Check constant. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"r\",\n        description: \"\"\n    },\n    type: \"\",\n    default_value: \"2\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "7f3aff65-8337-484d-8012-f3d61382ba08",
                  "parentUUID": "d1e318b7-9743-4667-a81b-1b7cc1a27985",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7f3aff65-8337-484d-8012-f3d61382ba08"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "147318e5-5475-4a91-bd3b-b4d044c89579",
              "title": "Check function.",
              "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_verilog_entity.spec.ts",
              "file": "\\tests\\parser\\parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check function.\"",
                  "fullTitle": "Check entity Verilog Check function. \"before all\" hook in \"Check function.\"",
                  "timedOut": false,
                  "duration": 374,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_function_array();",
                  "err": {},
                  "uuid": "624ff1ea-ebf1-473a-b5e5-dda969436545",
                  "parentUUID": "147318e5-5475-4a91-bd3b-b4d044c89579",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check with arguments and return",
                  "fullTitle": "Check entity Verilog Check function. Check with arguments and return",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.FUNCTION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"sum\",\n        description: \"\"\n    },\n    type: \"\",\n    arguments: \"(input [7:0] a, b;)\",\n    return: \"return ([7:0])\"\n};\ncheck_function(actual, expected);",
                  "err": {},
                  "uuid": "e7f0773b-5593-49b0-94bf-1620c737e91c",
                  "parentUUID": "147318e5-5475-4a91-bd3b-b4d044c89579",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e7f0773b-5593-49b0-94bf-1620c737e91c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e7dff3e3-0c98-41cd-8e31-59db9cb5f5bc",
              "title": "Check always.",
              "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_verilog_entity.spec.ts",
              "file": "\\tests\\parser\\parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check always.\"",
                  "fullTitle": "Check entity Verilog Check always. \"before all\" hook in \"Check always.\"",
                  "timedOut": false,
                  "duration": 309,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_process_array();",
                  "err": {},
                  "uuid": "ed422199-61ed-4b4d-b445-1a30a8ff9ccd",
                  "parentUUID": "e7dff3e3-0c98-41cd-8e31-59db9cb5f5bc",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check always with sensitive list and label",
                  "fullTitle": "Check entity Verilog Check always. Check always with sensitive list and label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"label_0\",\n        description: \"\"\n    },\n    sens_list: \"@(posedge a)\",\n    type: \"always\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "29b759fe-4812-4446-bd17-5a8311024c89",
                  "parentUUID": "e7dff3e3-0c98-41cd-8e31-59db9cb5f5bc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check always_comb without sensitive list and label",
                  "fullTitle": "Check entity Verilog Check always. Check always_comb without sensitive list and label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"unnamed\",\n        description: \"\"\n    },\n    sens_list: \"\",\n    type: \"always_comb\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "c5e6abe2-29a7-47db-a52d-85f91074a6fa",
                  "parentUUID": "e7dff3e3-0c98-41cd-8e31-59db9cb5f5bc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check always_ff without sensitive list and with label",
                  "fullTitle": "Check entity Verilog Check always. Check always_ff without sensitive list and with label",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"label_1\",\n        description: \"\"\n    },\n    sens_list: \"\",\n    type: \"always_ff\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "6e334ab9-58a8-4d23-902b-f0f478dd8f82",
                  "parentUUID": "e7dff3e3-0c98-41cd-8e31-59db9cb5f5bc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check always_latch without sensitive list and label",
                  "fullTitle": "Check entity Verilog Check always. Check always_latch without sensitive list and label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[3];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"unnamed\",\n        description: \"\"\n    },\n    sens_list: \"\",\n    type: \"always_latch\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "0043b268-0002-41c5-8e2c-7513f56d8ff2",
                  "parentUUID": "e7dff3e3-0c98-41cd-8e31-59db9cb5f5bc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "29b759fe-4812-4446-bd17-5a8311024c89",
                "c5e6abe2-29a7-47db-a52d-85f91074a6fa",
                "6e334ab9-58a8-4d23-902b-f0f478dd8f82",
                "0043b268-0002-41c5-8e2c-7513f56d8ff2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "68531eea-a132-4ba4-aa8f-0d999a3a6831",
              "title": "Check instantiation.",
              "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_verilog_entity.spec.ts",
              "file": "\\tests\\parser\\parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check instantiation.\"",
                  "fullTitle": "Check entity Verilog Check instantiation. \"before all\" hook in \"Check instantiation.\"",
                  "timedOut": false,
                  "duration": 395,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_instantiation_array();",
                  "err": {},
                  "uuid": "622eb9e1-7495-460c-8f85-edb8a05ec504",
                  "parentUUID": "68531eea-a132-4ba4-aa8f-0d999a3a6831",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check with label",
                  "fullTitle": "Check entity Verilog Check instantiation. Check with label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.INSTANTIATION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"test_entity_name_dut\",\n        description: \"\"\n    },\n    type: \"test_entity_name\"\n};\ncheck_instantiation(actual, expected);",
                  "err": {},
                  "uuid": "ae3e9c26-e778-49ee-89f5-1414a4bcc32d",
                  "parentUUID": "68531eea-a132-4ba4-aa8f-0d999a3a6831",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ae3e9c26-e778-49ee-89f5-1414a4bcc32d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5490a844-0040-484d-abd6-c8bc13f79045",
          "title": "Check interface declaration Verilog",
          "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_verilog_interface.spec.ts",
          "file": "\\tests\\parser\\parser_verilog_interface.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "bcac6dc8-d5da-4429-b12f-976cba778d67",
              "title": "Check global.",
              "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_verilog_interface.spec.ts",
              "file": "\\tests\\parser\\parser_verilog_interface.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check global.\"",
                  "fullTitle": "Check interface declaration Verilog Check global. \"before all\" hook in \"Check global.\"",
                  "timedOut": false,
                  "duration": 259,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();",
                  "err": {},
                  "uuid": "842fee11-5bae-4b98-8be9-d79d3301fdf3",
                  "parentUUID": "bcac6dc8-d5da-4429-b12f-976cba778d67",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check name",
                  "fullTitle": "Check interface declaration Verilog Check global. Check name",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.name, '');",
                  "err": {},
                  "uuid": "99b2b696-1f83-4c53-a589-8b34578421e8",
                  "parentUUID": "bcac6dc8-d5da-4429-b12f-976cba778d67",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check type is interface declaration",
                  "fullTitle": "Check interface declaration Verilog Check global. Check type is interface declaration",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.get_hdl_type(), common.TYPE_HDL_ELEMENT.INTERFACE_DECLARATION);",
                  "err": {},
                  "uuid": "41ac19a0-d10f-4678-8b29-8f0992b846d4",
                  "parentUUID": "bcac6dc8-d5da-4429-b12f-976cba778d67",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "99b2b696-1f83-4c53-a589-8b34578421e8",
                "41ac19a0-d10f-4678-8b29-8f0992b846d4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4af1e47d-8c72-47b5-9da6-b702343e0343",
              "title": "Check interfaces.",
              "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_verilog_interface.spec.ts",
              "file": "\\tests\\parser\\parser_verilog_interface.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check interfaces.\"",
                  "fullTitle": "Check interface declaration Verilog Check interfaces. \"before all\" hook in \"Check interfaces.\"",
                  "timedOut": false,
                  "duration": 379,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_interface_array();",
                  "err": {},
                  "uuid": "e687d891-fd77-4378-88e7-063208d3751b",
                  "parentUUID": "4af1e47d-8c72-47b5-9da6-b702343e0343",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check interface 0",
                  "fullTitle": "Check interface declaration Verilog Check interfaces. Check interface 0",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "check_interface(element_array[0], \"interface_0\");",
                  "err": {},
                  "uuid": "ff919768-b2f6-4515-b8e8-616597c26bd3",
                  "parentUUID": "4af1e47d-8c72-47b5-9da6-b702343e0343",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check interface 1",
                  "fullTitle": "Check interface declaration Verilog Check interfaces. Check interface 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "check_interface(element_array[1], \"interface_1\");",
                  "err": {},
                  "uuid": "90ce01a6-04e6-4f2e-8372-5b256d9cea3b",
                  "parentUUID": "4af1e47d-8c72-47b5-9da6-b702343e0343",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ff919768-b2f6-4515-b8e8-616597c26bd3",
                "90ce01a6-04e6-4f2e-8372-5b256d9cea3b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4bdb8aa9-b396-445b-a96d-c4b6ae0068d0",
              "title": "Check type.",
              "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_verilog_interface.spec.ts",
              "file": "\\tests\\parser\\parser_verilog_interface.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check type.\"",
                  "fullTitle": "Check interface declaration Verilog Check type. \"before all\" hook in \"Check type.\"",
                  "timedOut": false,
                  "duration": 289,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_type_array();",
                  "err": {},
                  "uuid": "e1ad1315-ef82-4525-803c-da7c939f1c15",
                  "parentUUID": "4bdb8aa9-b396-445b-a96d-c4b6ae0068d0",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check interface declaration Verilog Check type. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst logic_item_0 = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.LOGIC,\n    info: {\n        position: {\n            line: 9,\n            column: 0\n        },\n        name: \"l_0\",\n        description: \"\"\n    },\n    type: \"logic\"\n};\nconst logic_item_1 = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.LOGIC,\n    info: {\n        position: {\n            line: 10,\n            column: 0\n        },\n        name: \"l_1\",\n        description: \"\"\n    },\n    type: \"logic\"\n};\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.TYPE,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"slot_t\",\n        description: \"\"\n    },\n    type: \"\",\n    logic: [logic_item_0, logic_item_1]\n};\ncheck_type(actual, expected);",
                  "err": {},
                  "uuid": "933ced58-22d8-43d3-a2cc-07482658e36b",
                  "parentUUID": "4bdb8aa9-b396-445b-a96d-c4b6ae0068d0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "933ced58-22d8-43d3-a2cc-07482658e36b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6128011b-3361-4544-8a90-7d68242955c2",
          "title": "Check package Verilog",
          "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_verilog_package.spec.ts",
          "file": "\\tests\\parser\\parser_verilog_package.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "5dd0d729-09cb-4323-b7a5-7aede4dc216b",
              "title": "Check package.",
              "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_verilog_package.spec.ts",
              "file": "\\tests\\parser\\parser_verilog_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check package.\"",
                  "fullTitle": "Check package Verilog Check package. \"before all\" hook in \"Check package.\"",
                  "timedOut": false,
                  "duration": 385,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();",
                  "err": {},
                  "uuid": "1b64e24e-1484-4158-976a-83675d889dd2",
                  "parentUUID": "5dd0d729-09cb-4323-b7a5-7aede4dc216b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check name",
                  "fullTitle": "Check package Verilog Check package. Check name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.name, 'test_pkg');",
                  "err": {},
                  "uuid": "b59aa134-8daf-48a5-b3db-981b00d4c196",
                  "parentUUID": "5dd0d729-09cb-4323-b7a5-7aede4dc216b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check type is package",
                  "fullTitle": "Check package Verilog Check package. Check type is package",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.get_hdl_type(), common.TYPE_HDL_ELEMENT.PACKAGE);",
                  "err": {},
                  "uuid": "6c1ea5d7-a2a2-4d7b-9cc4-041d637261d2",
                  "parentUUID": "5dd0d729-09cb-4323-b7a5-7aede4dc216b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b59aa134-8daf-48a5-b3db-981b00d4c196",
                "6c1ea5d7-a2a2-4d7b-9cc4-041d637261d2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dd0e6565-75f4-49e1-bb3d-411d278ea12c",
              "title": "Check constant.",
              "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_verilog_package.spec.ts",
              "file": "\\tests\\parser\\parser_verilog_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check constant.\"",
                  "fullTitle": "Check package Verilog Check constant. \"before all\" hook in \"Check constant.\"",
                  "timedOut": false,
                  "duration": 254,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_constant_array();",
                  "err": {},
                  "uuid": "5c005381-b558-40ec-a3d8-41c5806811f4",
                  "parentUUID": "dd0e6565-75f4-49e1-bb3d-411d278ea12c",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check package Verilog Check constant. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"a\",\n        description: \"\"\n    },\n    type: \"\",\n    default_value: \"8\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "2c1e3a43-2284-404f-b76e-2a819c8de1ea",
                  "parentUUID": "dd0e6565-75f4-49e1-bb3d-411d278ea12c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check simple",
                  "fullTitle": "Check package Verilog Check constant. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"b\",\n        description: \"\"\n    },\n    type: \"\",\n    default_value: \"9\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "e59b13b1-1f88-4bae-b2b6-1f374b79d72a",
                  "parentUUID": "dd0e6565-75f4-49e1-bb3d-411d278ea12c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check simple",
                  "fullTitle": "Check package Verilog Check constant. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"c\",\n        description: \"\"\n    },\n    type: \"\",\n    default_value: \"10\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "4c798ed5-2be8-4530-9e83-6cea6bb9ebf4",
                  "parentUUID": "dd0e6565-75f4-49e1-bb3d-411d278ea12c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2c1e3a43-2284-404f-b76e-2a819c8de1ea",
                "e59b13b1-1f88-4bae-b2b6-1f374b79d72a",
                "4c798ed5-2be8-4530-9e83-6cea6bb9ebf4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "188fd2d5-4054-4385-a6e8-59ce0d2106b6",
              "title": "Check function.",
              "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_verilog_package.spec.ts",
              "file": "\\tests\\parser\\parser_verilog_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check function.\"",
                  "fullTitle": "Check package Verilog Check function. \"before all\" hook in \"Check function.\"",
                  "timedOut": false,
                  "duration": 397,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_function_array();",
                  "err": {},
                  "uuid": "30f3665b-5c35-4998-80f6-0e7f001f5d0d",
                  "parentUUID": "188fd2d5-4054-4385-a6e8-59ce0d2106b6",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check with arguments and return",
                  "fullTitle": "Check package Verilog Check function. Check with arguments and return",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.FUNCTION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"sum\",\n        description: \"\"\n    },\n    type: \"\",\n    arguments: \"(input [7:0] a, b;)\",\n    return: \"return ([7:0])\"\n};\ncheck_function(actual, expected);",
                  "err": {},
                  "uuid": "865c213b-79d9-442c-868a-d1db4e778f8e",
                  "parentUUID": "188fd2d5-4054-4385-a6e8-59ce0d2106b6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "865c213b-79d9-442c-868a-d1db4e778f8e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4745f6dd-9698-406a-a25c-caaa271c0430",
              "title": "Check type.",
              "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_verilog_package.spec.ts",
              "file": "\\tests\\parser\\parser_verilog_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check type.\"",
                  "fullTitle": "Check package Verilog Check type. \"before all\" hook in \"Check type.\"",
                  "timedOut": false,
                  "duration": 245,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_type_array();",
                  "err": {},
                  "uuid": "71f63f60-544c-42a7-b249-f825ee93ba4f",
                  "parentUUID": "4745f6dd-9698-406a-a25c-caaa271c0430",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check package Verilog Check type. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.TYPE,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"op_list\",\n        description: \"\"\n    },\n    type: \"enum {ADD, SUB}\",\n    logic: []\n};\ncheck_type(actual, expected);",
                  "err": {},
                  "uuid": "43a4b2c5-4475-44b1-8e73-888ffafdcf41",
                  "parentUUID": "4745f6dd-9698-406a-a25c-caaa271c0430",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check simple",
                  "fullTitle": "Check package Verilog Check type. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.TYPE,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"port_t\",\n        description: \"\"\n    },\n    type: \"struct {logic [4:0] a, b; logic [9:0] m;}\",\n    logic: []\n};\ncheck_type(actual, expected);",
                  "err": {},
                  "uuid": "7091952a-ac73-49b9-b7c8-ebd9e31b34a8",
                  "parentUUID": "4745f6dd-9698-406a-a25c-caaa271c0430",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "43a4b2c5-4475-44b1-8e73-888ffafdcf41",
                "7091952a-ac73-49b9-b7c8-ebd9e31b34a8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "75637bf2-9b9e-4f33-a8e4-60f6479a4410",
          "title": "Check entity VHDL",
          "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_vhdl_entity.spec.ts",
          "file": "\\tests\\parser\\parser_vhdl_entity.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d9b98f30-601d-43ec-abc8-2b85cfe47672",
              "title": "Check entity.",
              "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_vhdl_entity.spec.ts",
              "file": "\\tests\\parser\\parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check entity.\"",
                  "fullTitle": "Check entity VHDL Check entity. \"before all\" hook in \"Check entity.\"",
                  "timedOut": false,
                  "duration": 48,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();",
                  "err": {},
                  "uuid": "8e28ea12-9249-4e33-b7de-43d0462dfb72",
                  "parentUUID": "d9b98f30-601d-43ec-abc8-2b85cfe47672",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check name",
                  "fullTitle": "Check entity VHDL Check entity. Check name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.name, 'test_entity_name');",
                  "err": {},
                  "uuid": "c858df82-f4a0-4802-9e90-674305dd685b",
                  "parentUUID": "d9b98f30-601d-43ec-abc8-2b85cfe47672",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check type is entity",
                  "fullTitle": "Check entity VHDL Check entity. Check type is entity",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.get_hdl_type(), common.TYPE_HDL_ELEMENT.ENTITY);",
                  "err": {},
                  "uuid": "0198fad4-907f-4940-8334-2cbd8d608b40",
                  "parentUUID": "d9b98f30-601d-43ec-abc8-2b85cfe47672",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c858df82-f4a0-4802-9e90-674305dd685b",
                "0198fad4-907f-4940-8334-2cbd8d608b40"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d08a726b-2d1e-4271-8b2d-8b94d3321335",
              "title": "Check generic.",
              "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_vhdl_entity.spec.ts",
              "file": "\\tests\\parser\\parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check generic.\"",
                  "fullTitle": "Check entity VHDL Check generic. \"before all\" hook in \"Check generic.\"",
                  "timedOut": false,
                  "duration": 24,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_generic_array();",
                  "err": {},
                  "uuid": "5b112c93-4455-4043-a9ef-7f14945409ae",
                  "parentUUID": "d08a726b-2d1e-4271-8b2d-8b94d3321335",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check entity VHDL Check generic. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"a\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: \"\",\n    type: \"integer\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "2ae2fcf2-292c-4fd6-a58b-cd1a88ad2d09",
                  "parentUUID": "d08a726b-2d1e-4271-8b2d-8b94d3321335",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check with default value",
                  "fullTitle": "Check entity VHDL Check generic. Check with default value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"b\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: \"'1'\",\n    type: \"std_logic\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "9d43268a-5389-44ce-8c52-a70d5f5b04ad",
                  "parentUUID": "d08a726b-2d1e-4271-8b2d-8b94d3321335",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multiple declarations and default value in one line 0",
                  "fullTitle": "Check entity VHDL Check generic. Check multiple declarations and default value in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"c\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: '\"1\"',\n    type: \"std_logic_vector(1 downto 0)\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "5435df3e-7c4d-4a20-8bdb-40efaf847a4f",
                  "parentUUID": "d08a726b-2d1e-4271-8b2d-8b94d3321335",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multiple declarations and default value in one line 1",
                  "fullTitle": "Check entity VHDL Check generic. Check multiple declarations and default value in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[3];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"d\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: '\"1\"',\n    type: \"std_logic_vector(1 downto 0)\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "fe54787e-b842-409e-bf76-3d4da2b85a42",
                  "parentUUID": "d08a726b-2d1e-4271-8b2d-8b94d3321335",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2ae2fcf2-292c-4fd6-a58b-cd1a88ad2d09",
                "9d43268a-5389-44ce-8c52-a70d5f5b04ad",
                "5435df3e-7c4d-4a20-8bdb-40efaf847a4f",
                "fe54787e-b842-409e-bf76-3d4da2b85a42"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fcfbffc2-ee8c-4b6a-9046-9b08690c7a30",
              "title": "Check port.",
              "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_vhdl_entity.spec.ts",
              "file": "\\tests\\parser\\parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check port.\"",
                  "fullTitle": "Check entity VHDL Check port. \"before all\" hook in \"Check port.\"",
                  "timedOut": false,
                  "duration": 23,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_port_array();",
                  "err": {},
                  "uuid": "d6c2278f-cb41-409f-b66f-fba8673d6280",
                  "parentUUID": "fcfbffc2-ee8c-4b6a-9046-9b08690c7a30",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check input port",
                  "fullTitle": "Check entity VHDL Check port. Check input port",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"x\",\n        description: \"\"\n    },\n    direction: \"in\",\n    default_value: \"\",\n    type: \"std_logic\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "2c36f660-5213-4415-a26d-ef5e7f63798a",
                  "parentUUID": "fcfbffc2-ee8c-4b6a-9046-9b08690c7a30",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check output port",
                  "fullTitle": "Check entity VHDL Check port. Check output port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"y\",\n        description: \"\"\n    },\n    direction: \"out\",\n    default_value: \"\",\n    type: \"std_logic\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "fae3524b-759f-4c25-a3e4-c52a6f8215ec",
                  "parentUUID": "fcfbffc2-ee8c-4b6a-9046-9b08690c7a30",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check inout port",
                  "fullTitle": "Check entity VHDL Check port. Check inout port",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"z\",\n        description: \"\"\n    },\n    direction: \"inout\",\n    default_value: \"\",\n    type: \"std_logic\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "095efa63-48eb-443f-a8ee-1b3894ec7b16",
                  "parentUUID": "fcfbffc2-ee8c-4b6a-9046-9b08690c7a30",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check std_logic_vector port",
                  "fullTitle": "Check entity VHDL Check port. Check std_logic_vector port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[3];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"m\",\n        description: \"\"\n    },\n    direction: \"in\",\n    default_value: \"\",\n    type: \"std_logic_vector(31 downto 0)\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "940718a6-cc41-41e4-a61e-5a0d77e48244",
                  "parentUUID": "fcfbffc2-ee8c-4b6a-9046-9b08690c7a30",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check port with default value",
                  "fullTitle": "Check entity VHDL Check port. Check port with default value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[4];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"b\",\n        description: \"\"\n    },\n    direction: \"in\",\n    default_value: '\"0010\"',\n    type: \"std_logic_vector(31 downto 0)\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "7b29aed0-c1cf-4cf1-bce7-a7a7a975d069",
                  "parentUUID": "fcfbffc2-ee8c-4b6a-9046-9b08690c7a30",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multi declaration in one line 0",
                  "fullTitle": "Check entity VHDL Check port. Check multi declaration in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[5];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"c\",\n        description: \"\"\n    },\n    direction: \"in\",\n    default_value: \"'1'\",\n    type: \"std_logic\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "054604f8-2b07-4af5-affa-13f9fbd3b874",
                  "parentUUID": "fcfbffc2-ee8c-4b6a-9046-9b08690c7a30",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multi declaration in one line 1",
                  "fullTitle": "Check entity VHDL Check port. Check multi declaration in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[6];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"d\",\n        description: \"\"\n    },\n    direction: \"in\",\n    default_value: \"'1'\",\n    type: \"std_logic\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "521e4e5d-4eec-4413-933d-40bb93ac2bd5",
                  "parentUUID": "fcfbffc2-ee8c-4b6a-9046-9b08690c7a30",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2c36f660-5213-4415-a26d-ef5e7f63798a",
                "fae3524b-759f-4c25-a3e4-c52a6f8215ec",
                "095efa63-48eb-443f-a8ee-1b3894ec7b16",
                "940718a6-cc41-41e4-a61e-5a0d77e48244",
                "7b29aed0-c1cf-4cf1-bce7-a7a7a975d069",
                "054604f8-2b07-4af5-affa-13f9fbd3b874",
                "521e4e5d-4eec-4413-933d-40bb93ac2bd5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "73939690-6a2b-48d9-b525-1a5572057d90",
              "title": "Check signal.",
              "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_vhdl_entity.spec.ts",
              "file": "\\tests\\parser\\parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check signal.\"",
                  "fullTitle": "Check entity VHDL Check signal. \"before all\" hook in \"Check signal.\"",
                  "timedOut": false,
                  "duration": 24,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_signal_array();",
                  "err": {},
                  "uuid": "dc4f728b-ead7-41df-aed5-664398e64956",
                  "parentUUID": "73939690-6a2b-48d9-b525-1a5572057d90",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check entity VHDL Check signal. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"a\",\n        description: \"\"\n    },\n    type: \"integer\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "84a3b54c-3d65-4b62-9e5f-a3c27dec4c7b",
                  "parentUUID": "73939690-6a2b-48d9-b525-1a5572057d90",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 0",
                  "fullTitle": "Check entity VHDL Check signal. Check multimple declaration in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"b\",\n        description: \"\"\n    },\n    type: \"std_logic_vector(1 downto 0)\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "4caa7772-7c40-445f-ae77-7f4a2b727998",
                  "parentUUID": "73939690-6a2b-48d9-b525-1a5572057d90",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 1",
                  "fullTitle": "Check entity VHDL Check signal. Check multimple declaration in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"c\",\n        description: \"\"\n    },\n    type: \"std_logic_vector(1 downto 0)\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "01c403d6-00dc-42cb-9904-d8410e0a72a4",
                  "parentUUID": "73939690-6a2b-48d9-b525-1a5572057d90",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "84a3b54c-3d65-4b62-9e5f-a3c27dec4c7b",
                "4caa7772-7c40-445f-ae77-7f4a2b727998",
                "01c403d6-00dc-42cb-9904-d8410e0a72a4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b37c3a02-b410-4906-8d06-194015f16607",
              "title": "Check constant.",
              "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_vhdl_entity.spec.ts",
              "file": "\\tests\\parser\\parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check constant.\"",
                  "fullTitle": "Check entity VHDL Check constant. \"before all\" hook in \"Check constant.\"",
                  "timedOut": false,
                  "duration": 23,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_constant_array();",
                  "err": {},
                  "uuid": "6206c99b-0910-4704-87c2-ac08ca7b7538",
                  "parentUUID": "b37c3a02-b410-4906-8d06-194015f16607",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check multimple declaration in one line 0",
                  "fullTitle": "Check entity VHDL Check constant. Check multimple declaration in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"e\",\n        description: \"\"\n    },\n    type: \"integer\",\n    default_value: \"0\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "a72d1392-eb39-457f-ad35-7319ef63966c",
                  "parentUUID": "b37c3a02-b410-4906-8d06-194015f16607",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 1",
                  "fullTitle": "Check entity VHDL Check constant. Check multimple declaration in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"f\",\n        description: \"\"\n    },\n    type: \"integer\",\n    default_value: \"0\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "cd8eb2fa-6be3-4272-a3bb-285b5ac86da5",
                  "parentUUID": "b37c3a02-b410-4906-8d06-194015f16607",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a72d1392-eb39-457f-ad35-7319ef63966c",
                "cd8eb2fa-6be3-4272-a3bb-285b5ac86da5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4d75c26a-06b4-4a1c-8d06-bb9602ead7a2",
              "title": "Check type.",
              "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_vhdl_entity.spec.ts",
              "file": "\\tests\\parser\\parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check type.\"",
                  "fullTitle": "Check entity VHDL Check type. \"before all\" hook in \"Check type.\"",
                  "timedOut": false,
                  "duration": 25,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_type_array();",
                  "err": {},
                  "uuid": "567418f0-9097-4f6d-a9c5-3b5c8ae461d4",
                  "parentUUID": "4d75c26a-06b4-4a1c-8d06-bb9602ead7a2",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check entity VHDL Check type. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.TYPE,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"state_0\",\n        description: \"\"\n    },\n    type: \"(INIT, END)\",\n    logic: []\n};\ncheck_type(actual, expected);",
                  "err": {},
                  "uuid": "32d82642-fc30-46c8-ac85-0d1afa887e79",
                  "parentUUID": "4d75c26a-06b4-4a1c-8d06-bb9602ead7a2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "32d82642-fc30-46c8-ac85-0d1afa887e79"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "963ff9ea-0dcd-44c6-9f09-69ffcf81fdeb",
              "title": "Check function.",
              "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_vhdl_entity.spec.ts",
              "file": "\\tests\\parser\\parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check function.\"",
                  "fullTitle": "Check entity VHDL Check function. \"before all\" hook in \"Check function.\"",
                  "timedOut": false,
                  "duration": 26,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_function_array();",
                  "err": {},
                  "uuid": "a7fd0da3-44c0-428a-ad6c-3625aba15a8d",
                  "parentUUID": "963ff9ea-0dcd-44c6-9f09-69ffcf81fdeb",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check with arguments and return",
                  "fullTitle": "Check entity VHDL Check function. Check with arguments and return",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.FUNCTION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"counter\",\n        description: \"\"\n    },\n    type: \"\",\n    arguments: \"(minutes : integer := 0; seconds : integer := 0)\",\n    return: \"return integer\"\n};\ncheck_function(actual, expected);",
                  "err": {},
                  "uuid": "95313939-7323-476e-8aa8-c3a273f3fca9",
                  "parentUUID": "963ff9ea-0dcd-44c6-9f09-69ffcf81fdeb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "95313939-7323-476e-8aa8-c3a273f3fca9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "51fdc086-395b-47a3-8776-b17fdb1ed6c9",
              "title": "Check process.",
              "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_vhdl_entity.spec.ts",
              "file": "\\tests\\parser\\parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check process.\"",
                  "fullTitle": "Check entity VHDL Check process. \"before all\" hook in \"Check process.\"",
                  "timedOut": false,
                  "duration": 192,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_process_array();",
                  "err": {},
                  "uuid": "7f91cd05-27c2-42f6-a88f-a7995c6bc539",
                  "parentUUID": "51fdc086-395b-47a3-8776-b17fdb1ed6c9",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check without sensitive list",
                  "fullTitle": "Check entity VHDL Check process. Check without sensitive list",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"label_0\",\n        description: \"\"\n    },\n    sens_list: \"\",\n    type: \"\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "27f7fddb-33cb-4fc6-ab65-3b0bc5500d4a",
                  "parentUUID": "51fdc086-395b-47a3-8776-b17fdb1ed6c9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check with sensitive list",
                  "fullTitle": "Check entity VHDL Check process. Check with sensitive list",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"label_1\",\n        description: \"\"\n    },\n    sens_list: \"clk0, reset\",\n    type: \"\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "ce246f5c-e5bf-45cc-88c4-1876cf83b5e7",
                  "parentUUID": "51fdc086-395b-47a3-8776-b17fdb1ed6c9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check without label",
                  "fullTitle": "Check entity VHDL Check process. Check without label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"unnamed\",\n        description: \"\"\n    },\n    sens_list: \"\",\n    type: \"\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "d9f10ac7-100f-45fe-a8e4-691163be2011",
                  "parentUUID": "51fdc086-395b-47a3-8776-b17fdb1ed6c9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "27f7fddb-33cb-4fc6-ab65-3b0bc5500d4a",
                "ce246f5c-e5bf-45cc-88c4-1876cf83b5e7",
                "d9f10ac7-100f-45fe-a8e4-691163be2011"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "05651edf-24b3-4971-8575-b2af8a36d0a6",
              "title": "Check instantiation.",
              "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_vhdl_entity.spec.ts",
              "file": "\\tests\\parser\\parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check instantiation.\"",
                  "fullTitle": "Check entity VHDL Check instantiation. \"before all\" hook in \"Check instantiation.\"",
                  "timedOut": false,
                  "duration": 23,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_instantiation_array();",
                  "err": {},
                  "uuid": "3403b30a-dc75-408c-8aef-c2f08d341544",
                  "parentUUID": "05651edf-24b3-4971-8575-b2af8a36d0a6",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check with label",
                  "fullTitle": "Check entity VHDL Check instantiation. Check with label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.INSTANTIATION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"uut_0\",\n        description: \"\"\n    },\n    type: \"half_adder\"\n};\ncheck_instantiation(actual, expected);",
                  "err": {},
                  "uuid": "70cd1dae-de0f-45a5-8bb9-990a86d9753e",
                  "parentUUID": "05651edf-24b3-4971-8575-b2af8a36d0a6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check without label",
                  "fullTitle": "Check entity VHDL Check instantiation. Check without label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.INSTANTIATION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"unnamed\",\n        description: \"\"\n    },\n    type: \"half_adder\"\n};\ncheck_instantiation(actual, expected);",
                  "err": {},
                  "uuid": "8d126bdd-fa7a-4f36-8f88-7c0e9aeb82bb",
                  "parentUUID": "05651edf-24b3-4971-8575-b2af8a36d0a6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "70cd1dae-de0f-45a5-8bb9-990a86d9753e",
                "8d126bdd-fa7a-4f36-8f88-7c0e9aeb82bb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "27f56864-8def-4fb3-b67e-46fa73dd1fbd",
          "title": "Check package VHDL",
          "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_vhdl_package.spec.ts",
          "file": "\\tests\\parser\\parser_vhdl_package.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8b3e19c1-0e33-4cae-b356-12db508931ba",
              "title": "Check pacakge.",
              "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_vhdl_package.spec.ts",
              "file": "\\tests\\parser\\parser_vhdl_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check pacakge.\"",
                  "fullTitle": "Check package VHDL Check pacakge. \"before all\" hook in \"Check pacakge.\"",
                  "timedOut": false,
                  "duration": 23,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();",
                  "err": {},
                  "uuid": "39e341cb-3f8d-4ae7-aa10-d05836f36062",
                  "parentUUID": "8b3e19c1-0e33-4cae-b356-12db508931ba",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check name",
                  "fullTitle": "Check package VHDL Check pacakge. Check name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.name, 'test_package_name');",
                  "err": {},
                  "uuid": "52f970e4-f6ca-4574-b2ab-8f9002507bc6",
                  "parentUUID": "8b3e19c1-0e33-4cae-b356-12db508931ba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check type is entity",
                  "fullTitle": "Check package VHDL Check pacakge. Check type is entity",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.get_hdl_type(), common_1.TYPE_HDL_ELEMENT.PACKAGE);",
                  "err": {},
                  "uuid": "868d3dfe-a63b-433f-82df-ba0dcaafe210",
                  "parentUUID": "8b3e19c1-0e33-4cae-b356-12db508931ba",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "52f970e4-f6ca-4574-b2ab-8f9002507bc6",
                "868d3dfe-a63b-433f-82df-ba0dcaafe210"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "38be81be-71b2-45af-94e8-7d4dd0a64756",
              "title": "Check signal.",
              "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_vhdl_package.spec.ts",
              "file": "\\tests\\parser\\parser_vhdl_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check signal.\"",
                  "fullTitle": "Check package VHDL Check signal. \"before all\" hook in \"Check signal.\"",
                  "timedOut": false,
                  "duration": 24,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_signal_array();",
                  "err": {},
                  "uuid": "62c12567-b8d9-41b5-b965-ebb0c2617d29",
                  "parentUUID": "38be81be-71b2-45af-94e8-7d4dd0a64756",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check package VHDL Check signal. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"a\",\n        description: \"\"\n    },\n    type: \"integer\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "49c20cc3-0d26-45d9-801e-d6d5ea07c7a4",
                  "parentUUID": "38be81be-71b2-45af-94e8-7d4dd0a64756",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 0",
                  "fullTitle": "Check package VHDL Check signal. Check multimple declaration in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"b\",\n        description: \"\"\n    },\n    type: \"std_logic_vector(1 downto 0)\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "16478c12-10d5-482e-8df7-42dfc1d9e06f",
                  "parentUUID": "38be81be-71b2-45af-94e8-7d4dd0a64756",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 1",
                  "fullTitle": "Check package VHDL Check signal. Check multimple declaration in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"c\",\n        description: \"\"\n    },\n    type: \"std_logic_vector(1 downto 0)\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "05049a44-b086-494c-8668-7b997a15778e",
                  "parentUUID": "38be81be-71b2-45af-94e8-7d4dd0a64756",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "49c20cc3-0d26-45d9-801e-d6d5ea07c7a4",
                "16478c12-10d5-482e-8df7-42dfc1d9e06f",
                "05049a44-b086-494c-8668-7b997a15778e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5fa5bbae-9f38-4d3d-82d5-b02152edbc8c",
              "title": "Check constant.",
              "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_vhdl_package.spec.ts",
              "file": "\\tests\\parser\\parser_vhdl_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check constant.\"",
                  "fullTitle": "Check package VHDL Check constant. \"before all\" hook in \"Check constant.\"",
                  "timedOut": false,
                  "duration": 25,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_constant_array();",
                  "err": {},
                  "uuid": "a8af2d78-c64b-43ef-8aaf-411a799306d9",
                  "parentUUID": "5fa5bbae-9f38-4d3d-82d5-b02152edbc8c",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check package VHDL Check constant. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"d\",\n        description: \"\"\n    },\n    type: \"integer\",\n    default_value: \"8\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "7e04c91d-98f4-45e0-b113-6890517affcd",
                  "parentUUID": "5fa5bbae-9f38-4d3d-82d5-b02152edbc8c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 0",
                  "fullTitle": "Check package VHDL Check constant. Check multimple declaration in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"e\",\n        description: \"\"\n    },\n    type: \"integer\",\n    default_value: \"0\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "e47ed5b4-5a0d-4e4e-b0b7-0e6c241b76b9",
                  "parentUUID": "5fa5bbae-9f38-4d3d-82d5-b02152edbc8c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 1",
                  "fullTitle": "Check package VHDL Check constant. Check multimple declaration in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"f\",\n        description: \"\"\n    },\n    type: \"integer\",\n    default_value: \"0\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "cae0e4af-7a23-4f75-97c2-1d3ed29a5865",
                  "parentUUID": "5fa5bbae-9f38-4d3d-82d5-b02152edbc8c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7e04c91d-98f4-45e0-b113-6890517affcd",
                "e47ed5b4-5a0d-4e4e-b0b7-0e6c241b76b9",
                "cae0e4af-7a23-4f75-97c2-1d3ed29a5865"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b36ed973-edf7-402d-ac72-39e18b9fc26a",
              "title": "Check type.",
              "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_vhdl_package.spec.ts",
              "file": "\\tests\\parser\\parser_vhdl_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check type.\"",
                  "fullTitle": "Check package VHDL Check type. \"before all\" hook in \"Check type.\"",
                  "timedOut": false,
                  "duration": 24,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_type_array();",
                  "err": {},
                  "uuid": "fc8e88b9-ab88-47d2-a54a-57c03c21ab6b",
                  "parentUUID": "b36ed973-edf7-402d-ac72-39e18b9fc26a",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check package VHDL Check type. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.TYPE,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"state_0\",\n        description: \"\"\n    },\n    type: \"(INIT, ENDS)\",\n    logic: []\n};\ncheck_type(actual, expected);",
                  "err": {},
                  "uuid": "caeeacf4-4cc4-4e14-b2fb-2db06f474590",
                  "parentUUID": "b36ed973-edf7-402d-ac72-39e18b9fc26a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "caeeacf4-4cc4-4e14-b2fb-2db06f474590"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a77514ad-9ecc-43ff-b0ef-8af8a6fdd109",
              "title": "Check function.",
              "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\parser\\parser_vhdl_package.spec.ts",
              "file": "\\tests\\parser\\parser_vhdl_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check function.\"",
                  "fullTitle": "Check package VHDL Check function. \"before all\" hook in \"Check function.\"",
                  "timedOut": false,
                  "duration": 22,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_function_array();",
                  "err": {},
                  "uuid": "64e098cb-b9ee-4d20-8674-02d92776a5f0",
                  "parentUUID": "a77514ad-9ecc-43ff-b0ef-8af8a6fdd109",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check with arguments and return",
                  "fullTitle": "Check package VHDL Check function. Check with arguments and return",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.FUNCTION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"counter\",\n        description: \"\"\n    },\n    type: \"\",\n    arguments: \"(signal minutes: in integer; signal seconds: out integer;)\",\n    return: \"\"\n};\ncheck_function(actual, expected);",
                  "err": {},
                  "uuid": "d56d4399-e7bd-40bc-a6a9-efd6cf5a1d59",
                  "parentUUID": "a77514ad-9ecc-43ff-b0ef-8af8a6fdd109",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d56d4399-e7bd-40bc-a6a9-efd6cf5a1d59"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1a01db2e-f63c-4a02-b7be-6ac24895ee08",
          "title": "Test local process",
          "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\process\\process.spec.ts",
          "file": "\\tests\\process\\process.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check exec successful",
              "fullTitle": "Test local process Check exec successful",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const process_i = new process_1.Process();\nconst command = 'echo \"hello world!\"';\nconst result = await process_i.exec_wait(command);\nconst expected_result = {\n    command: command,\n    stdout: 'hello world!',\n    stderr: '',\n    return_value: 0,\n    successful: true\n};\nconst os = process.platform;\nif (os === 'win32') {\n    expected_result.stdout = \"\\\"hello world!\\\"\";\n}\n(0, assert_1.deepEqual)(result, expected_result);",
              "err": {},
              "uuid": "90fed58c-543a-4f02-923b-5efa55817e4d",
              "parentUUID": "1a01db2e-f63c-4a02-b7be-6ac24895ee08",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check exec not successful",
              "fullTitle": "Test local process Check exec not successful",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const process_i = new process_1.Process();\nconst command = 'asdf';\nconst result = await process_i.exec_wait(command);\nconst expected_result = {\n    command: command,\n    stdout: '',\n    stderr: '/bin/sh: 1: asdf: not found',\n    return_value: -1,\n    successful: false\n};\nconst os = process.platform;\nif (os === 'darwin' || os === 'win32') {\n    expected_result.stderr = '';\n    result.stderr = '';\n}\n(0, assert_1.deepEqual)(result, expected_result);",
              "err": {},
              "uuid": "6bbb8bdd-34b9-4bfe-8892-874325ced7fb",
              "parentUUID": "1a01db2e-f63c-4a02-b7be-6ac24895ee08",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "90fed58c-543a-4f02-923b-5efa55817e4d",
            "6bbb8bdd-34b9-4bfe-8892-874325ced7fb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 29,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "cd76b237-1837-4d45-b530-2a68b256ebf5",
          "title": "Test utils",
          "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\process\\process.spec.ts",
          "file": "\\tests\\process\\process.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check create temporal file",
              "fullTitle": "Test utils Check create temporal file",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const expected_text = \"sample of text\";\nconst tmp_file_path = await (0, utils_1.create_temp_file)(expected_text);\nconst fs = require('fs');\nconst current_text = fs.readFileSync(tmp_file_path);\n(0, assert_1.equal)(current_text, expected_text);",
              "err": {},
              "uuid": "030b4e40-650e-4526-934d-03945837158e",
              "parentUUID": "cd76b237-1837-4d45-b530-2a68b256ebf5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "030b4e40-650e-4526-934d-03945837158e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "28949e2d-9b6a-4afa-98cf-48f0a8a05fc1",
          "title": "Test Python utils",
          "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\process\\python.spec.ts",
          "file": "\\tests\\process\\python.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check get_python3_path in system path",
              "fullTitle": "Test Python utils Check get_python3_path in system path",
              "timedOut": false,
              "duration": 123,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const opt = {\n    path: \"\"\n};\nconst result = await python.get_python_path(opt);\ncheck_python_system_path(result.python_path);\n(0, assert_1.equal)(result.successful, true);",
              "err": {},
              "uuid": "18c54c99-daad-4cb5-a888-664b785b18d0",
              "parentUUID": "28949e2d-9b6a-4afa-98cf-48f0a8a05fc1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check get_python3_path in custom path",
              "fullTitle": "Test Python utils Check get_python3_path in custom path",
              "timedOut": false,
              "duration": 103,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(5000);\nconst opt = {\n    path: \"/usr/bin/python3\"\n};\nconst system_os = (0, utils_1.get_os)();\nif (system_os === common.OS.MAC) {\n    opt.path = \"/usr/local/opt/python@3.9/bin/python3.9\";\n}\nelse if (system_os === common.OS.WINDOWS) {\n    opt.path = \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\\3.9.13\\\\x64\\\\python3.exe\";\n}\nconst result = await python.get_python_path(opt);\ncheck_python_system_path(result.python_path);\n(0, assert_1.equal)(result.successful, true);",
              "err": {},
              "uuid": "c9f378f8-168c-4676-b7c8-2f1a12e408bc",
              "parentUUID": "28949e2d-9b6a-4afa-98cf-48f0a8a05fc1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check get_python3_path in a bad custom path ",
              "fullTitle": "Test Python utils Check get_python3_path in a bad custom path ",
              "timedOut": false,
              "duration": 146,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const opt = {\n    path: \"/usr/bin/python999\"\n};\nconst result = await python.get_python_path(opt);\ncheck_python_system_path(result.python_path);\n(0, assert_1.equal)(result.successful, true);",
              "err": {},
              "uuid": "3752f5c5-c031-4f54-9ea2-a8cd6d46dcb8",
              "parentUUID": "28949e2d-9b6a-4afa-98cf-48f0a8a05fc1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check python3 package and true",
              "fullTitle": "Test Python utils Check python3 package and true",
              "timedOut": false,
              "duration": 190,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const package_name = 'time';\nconst opt = {\n    path: \"/usr/bin/python\"\n};\nconst result_path = await python.get_python_path(opt);\nconst result = await python.check_python_package(result_path.python_path, package_name);\n(0, assert_1.equal)(result, true);",
              "err": {},
              "uuid": "cab2b12b-af1f-4b6e-87d8-0dbb1df0e012",
              "parentUUID": "28949e2d-9b6a-4afa-98cf-48f0a8a05fc1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check python3 package and false",
              "fullTitle": "Test Python utils Check python3 package and false",
              "timedOut": false,
              "duration": 250,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const package_name = 'time1234';\nconst opt = {\n    path: \"/usr/bin/python\"\n};\nconst result_path = await python.get_python_path(opt);\nconst result = await python.check_python_package(result_path.python_path, package_name);\n(0, assert_1.equal)(result, false);",
              "err": {},
              "uuid": "6ce1b174-ff1e-40d5-a21a-1a9602fe7e24",
              "parentUUID": "28949e2d-9b6a-4afa-98cf-48f0a8a05fc1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check python3 package list and true",
              "fullTitle": "Test Python utils Check python3 package list and true",
              "timedOut": false,
              "duration": 265,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const package_name = ['time', 'os'];\nconst opt = {\n    path: \"/usr/bin/python\"\n};\nconst result_path = await python.get_python_path(opt);\nconst result = await python.check_python_package_list(result_path.python_path, package_name);\n(0, assert_1.equal)(result, true);",
              "err": {},
              "uuid": "bf517a06-c294-404c-8f42-0d2df69d26e5",
              "parentUUID": "28949e2d-9b6a-4afa-98cf-48f0a8a05fc1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check python3 package list and false",
              "fullTitle": "Test Python utils Check python3 package list and false",
              "timedOut": false,
              "duration": 243,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const package_name = ['time', 'os123'];\nconst opt = {\n    path: \"/usr/bin/python\"\n};\nconst result_path = await python.get_python_path(opt);\nconst result = await python.check_python_package_list(result_path.python_path, package_name);\n(0, assert_1.equal)(result, false);",
              "err": {},
              "uuid": "db63e485-8e82-466b-bc40-56fd969185df",
              "parentUUID": "28949e2d-9b6a-4afa-98cf-48f0a8a05fc1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "18c54c99-daad-4cb5-a888-664b785b18d0",
            "c9f378f8-168c-4676-b7c8-2f1a12e408bc",
            "3752f5c5-c031-4f54-9ea2-a8cd6d46dcb8",
            "cab2b12b-af1f-4b6e-87d8-0dbb1df0e012",
            "6ce1b174-ff1e-40d5-a21a-1a9602fe7e24",
            "bf517a06-c294-404c-8f42-0d2df69d26e5",
            "db63e485-8e82-466b-bc40-56fd969185df"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1320,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "35805f17-f5a6-4b9e-bbd3-8295d933381a",
          "title": "Check template vhdl element",
          "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\template\\template.spec.ts",
          "file": "\\tests\\template\\template.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check cocotb",
              "fullTitle": "Check template vhdl element Check cocotb",
              "timedOut": false,
              "duration": 31,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: common.TYPE_INSTANCE_DECLARATION.INLINE,\n    clock_generation_style: common.TYPE_CLOCK_GENERATION_STYLE.IFELSE\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = fs.readFileSync(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "040de6cd-f163-4bf2-b550-e78cc14f81a6",
              "parentUUID": "35805f17-f5a6-4b9e-bbd3-8295d933381a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check testbench_normal",
              "fullTitle": "Check template vhdl element Check testbench_normal",
              "timedOut": false,
              "duration": 25,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: common.TYPE_INSTANCE_DECLARATION.INLINE,\n    clock_generation_style: common.TYPE_CLOCK_GENERATION_STYLE.IFELSE\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = fs.readFileSync(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "83e10ff6-db03-48cc-92bc-567b57f8dbd7",
              "parentUUID": "35805f17-f5a6-4b9e-bbd3-8295d933381a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check testbench_vunit",
              "fullTitle": "Check template vhdl element Check testbench_vunit",
              "timedOut": false,
              "duration": 32,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: common.TYPE_INSTANCE_DECLARATION.INLINE,\n    clock_generation_style: common.TYPE_CLOCK_GENERATION_STYLE.IFELSE\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = fs.readFileSync(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "326b5c2b-2e47-4b8a-a48e-ff116fd5bc7f",
              "parentUUID": "35805f17-f5a6-4b9e-bbd3-8295d933381a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_component",
              "fullTitle": "Check template vhdl element Check hdl_element_component",
              "timedOut": false,
              "duration": 26,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: common.TYPE_INSTANCE_DECLARATION.INLINE,\n    clock_generation_style: common.TYPE_CLOCK_GENERATION_STYLE.IFELSE\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = fs.readFileSync(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "cb30af88-7d89-47c9-bd69-fcefb5970f49",
              "parentUUID": "35805f17-f5a6-4b9e-bbd3-8295d933381a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_instance",
              "fullTitle": "Check template vhdl element Check hdl_element_instance",
              "timedOut": false,
              "duration": 24,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: common.TYPE_INSTANCE_DECLARATION.INLINE,\n    clock_generation_style: common.TYPE_CLOCK_GENERATION_STYLE.IFELSE\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = fs.readFileSync(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "f21c1c75-3afe-473c-914b-7722a183ee12",
              "parentUUID": "35805f17-f5a6-4b9e-bbd3-8295d933381a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_signal",
              "fullTitle": "Check template vhdl element Check hdl_element_signal",
              "timedOut": false,
              "duration": 27,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: common.TYPE_INSTANCE_DECLARATION.INLINE,\n    clock_generation_style: common.TYPE_CLOCK_GENERATION_STYLE.IFELSE\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = fs.readFileSync(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "78001e60-1c48-4bbf-b011-9c410e983130",
              "parentUUID": "35805f17-f5a6-4b9e-bbd3-8295d933381a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_mix_instance",
              "fullTitle": "Check template vhdl element Check hdl_element_mix_instance",
              "timedOut": false,
              "duration": 140,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: common.TYPE_INSTANCE_DECLARATION.INLINE,\n    clock_generation_style: common.TYPE_CLOCK_GENERATION_STYLE.IFELSE\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = fs.readFileSync(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "70eaa93f-e50b-49c5-bda8-6c9e62644048",
              "parentUUID": "35805f17-f5a6-4b9e-bbd3-8295d933381a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_mix_testbench_normal",
              "fullTitle": "Check template vhdl element Check hdl_element_mix_testbench_normal",
              "timedOut": false,
              "duration": 55,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: common.TYPE_INSTANCE_DECLARATION.INLINE,\n    clock_generation_style: common.TYPE_CLOCK_GENERATION_STYLE.IFELSE\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = fs.readFileSync(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "205b9d62-1861-4faa-9bd1-12a0fb0b8fb9",
              "parentUUID": "35805f17-f5a6-4b9e-bbd3-8295d933381a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_mix_testbench_vunit",
              "fullTitle": "Check template vhdl element Check hdl_element_mix_testbench_vunit",
              "timedOut": false,
              "duration": 207,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: common.TYPE_INSTANCE_DECLARATION.INLINE,\n    clock_generation_style: common.TYPE_CLOCK_GENERATION_STYLE.IFELSE\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = fs.readFileSync(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "00afef8e-e200-45df-84c1-7a8da76ecd2e",
              "parentUUID": "35805f17-f5a6-4b9e-bbd3-8295d933381a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "040de6cd-f163-4bf2-b550-e78cc14f81a6",
            "83e10ff6-db03-48cc-92bc-567b57f8dbd7",
            "326b5c2b-2e47-4b8a-a48e-ff116fd5bc7f",
            "cb30af88-7d89-47c9-bd69-fcefb5970f49",
            "f21c1c75-3afe-473c-914b-7722a183ee12",
            "78001e60-1c48-4bbf-b011-9c410e983130",
            "70eaa93f-e50b-49c5-bda8-6c9e62644048",
            "205b9d62-1861-4faa-9bd1-12a0fb0b8fb9",
            "00afef8e-e200-45df-84c1-7a8da76ecd2e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 567,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c3a9a0cf-5e24-4c8b-a519-0688e3a6a531",
          "title": "Check template verilog element",
          "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\template\\template.spec.ts",
          "file": "\\tests\\template\\template.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check cocotb",
              "fullTitle": "Check template verilog element Check cocotb",
              "timedOut": false,
              "duration": 284,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: common.TYPE_INSTANCE_DECLARATION.INLINE,\n    clock_generation_style: common.TYPE_CLOCK_GENERATION_STYLE.IFELSE\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = fs.readFileSync(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "6babdcac-3445-467b-97c4-8914da8186a9",
              "parentUUID": "c3a9a0cf-5e24-4c8b-a519-0688e3a6a531",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check testbench_normal",
              "fullTitle": "Check template verilog element Check testbench_normal",
              "timedOut": false,
              "duration": 382,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: common.TYPE_INSTANCE_DECLARATION.INLINE,\n    clock_generation_style: common.TYPE_CLOCK_GENERATION_STYLE.IFELSE\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = fs.readFileSync(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "40af9b3b-50b5-4ec2-b1d5-2c2b668d6fd4",
              "parentUUID": "c3a9a0cf-5e24-4c8b-a519-0688e3a6a531",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check testbench_vunit",
              "fullTitle": "Check template verilog element Check testbench_vunit",
              "timedOut": false,
              "duration": 290,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: common.TYPE_INSTANCE_DECLARATION.INLINE,\n    clock_generation_style: common.TYPE_CLOCK_GENERATION_STYLE.IFELSE\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = fs.readFileSync(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "0d9e2213-1599-4ae2-afbf-e05cea1b9316",
              "parentUUID": "c3a9a0cf-5e24-4c8b-a519-0688e3a6a531",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check testbench_vunit",
              "fullTitle": "Check template verilog element Check testbench_vunit",
              "timedOut": false,
              "duration": 389,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: common.TYPE_INSTANCE_DECLARATION.INLINE,\n    clock_generation_style: common.TYPE_CLOCK_GENERATION_STYLE.IFELSE\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = fs.readFileSync(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "401d6cf4-047c-4b4f-a672-6ba16dbb3b7b",
              "parentUUID": "c3a9a0cf-5e24-4c8b-a519-0688e3a6a531",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_signal",
              "fullTitle": "Check template verilog element Check hdl_element_signal",
              "timedOut": false,
              "duration": 249,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: common.TYPE_INSTANCE_DECLARATION.INLINE,\n    clock_generation_style: common.TYPE_CLOCK_GENERATION_STYLE.IFELSE\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = fs.readFileSync(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "583fda1f-b4bd-4a66-99bd-b60f3db79ff4",
              "parentUUID": "c3a9a0cf-5e24-4c8b-a519-0688e3a6a531",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_mix_instance",
              "fullTitle": "Check template verilog element Check hdl_element_mix_instance",
              "timedOut": false,
              "duration": 400,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: common.TYPE_INSTANCE_DECLARATION.INLINE,\n    clock_generation_style: common.TYPE_CLOCK_GENERATION_STYLE.IFELSE\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = fs.readFileSync(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "142d586d-0bc5-4820-bb32-d7039dad9546",
              "parentUUID": "c3a9a0cf-5e24-4c8b-a519-0688e3a6a531",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_mix_testbench_normal",
              "fullTitle": "Check template verilog element Check hdl_element_mix_testbench_normal",
              "timedOut": false,
              "duration": 258,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: common.TYPE_INSTANCE_DECLARATION.INLINE,\n    clock_generation_style: common.TYPE_CLOCK_GENERATION_STYLE.IFELSE\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = fs.readFileSync(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "76306b41-492d-46be-bf61-fdd2c45cc2b9",
              "parentUUID": "c3a9a0cf-5e24-4c8b-a519-0688e3a6a531",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_mix_testbench_vunit",
              "fullTitle": "Check template verilog element Check hdl_element_mix_testbench_vunit",
              "timedOut": false,
              "duration": 394,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: common.TYPE_INSTANCE_DECLARATION.INLINE,\n    clock_generation_style: common.TYPE_CLOCK_GENERATION_STYLE.IFELSE\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = fs.readFileSync(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "f098c391-034b-4928-bc8a-c36bec995428",
              "parentUUID": "c3a9a0cf-5e24-4c8b-a519-0688e3a6a531",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6babdcac-3445-467b-97c4-8914da8186a9",
            "40af9b3b-50b5-4ec2-b1d5-2c2b668d6fd4",
            "0d9e2213-1599-4ae2-afbf-e05cea1b9316",
            "401d6cf4-047c-4b4f-a672-6ba16dbb3b7b",
            "583fda1f-b4bd-4a66-99bd-b60f3db79ff4",
            "142d586d-0bc5-4820-bb32-d7039dad9546",
            "76306b41-492d-46be-bf61-fdd2c45cc2b9",
            "f098c391-034b-4928-bc8a-c36bec995428"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2646,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3656cd23-6329-440e-976c-ba7f75bf8bbf",
          "title": "Check get language",
          "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\utils\\hdl_utils.spec.ts",
          "file": "\\tests\\utils\\hdl_utils.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "From path Verilog",
              "fullTitle": "Check get language From path Verilog",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const path_dummy = '/home/user/file.v';\nconst lang_expected = general_1.HDL_LANG.VERILOG;\nconst lang_current = hdl_utils.get_lang_from_path(path_dummy);\n(0, assert_1.equal)(lang_current, lang_expected);",
              "err": {},
              "uuid": "3a8268e7-9621-4ddf-9df9-b1ff0b854c86",
              "parentUUID": "3656cd23-6329-440e-976c-ba7f75bf8bbf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "From path SystemVerilog",
              "fullTitle": "Check get language From path SystemVerilog",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const path_dummy = '/home/user/file.sv';\nconst lang_expected = general_1.HDL_LANG.SYSTEMVERILOG;\nconst lang_current = hdl_utils.get_lang_from_path(path_dummy);\n(0, assert_1.equal)(lang_current, lang_expected);",
              "err": {},
              "uuid": "f686e096-98da-4797-8810-bf4f9daae136",
              "parentUUID": "3656cd23-6329-440e-976c-ba7f75bf8bbf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "From path VHDL",
              "fullTitle": "Check get language From path VHDL",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const path_dummy = '/home/user/file.vhd';\nconst lang_expected = general_1.HDL_LANG.VHDL;\nconst lang_current = hdl_utils.get_lang_from_path(path_dummy);\n(0, assert_1.equal)(lang_current, lang_expected);",
              "err": {},
              "uuid": "12699a18-1623-4920-a8d9-24d4e5dbb704",
              "parentUUID": "3656cd23-6329-440e-976c-ba7f75bf8bbf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "From path NONE",
              "fullTitle": "Check get language From path NONE",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const path_dummy = '/home/user/file.txt';\nconst lang_expected = general_1.HDL_LANG.NONE;\nconst lang_current = hdl_utils.get_lang_from_path(path_dummy);\n(0, assert_1.equal)(lang_current, lang_expected);",
              "err": {},
              "uuid": "ec5e3590-b87f-4610-9c8e-4d59732f32c6",
              "parentUUID": "3656cd23-6329-440e-976c-ba7f75bf8bbf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3a8268e7-9621-4ddf-9df9-b1ff0b854c86",
            "f686e096-98da-4797-8810-bf4f9daae136",
            "12699a18-1623-4920-a8d9-24d4e5dbb704",
            "ec5e3590-b87f-4610-9c8e-4d59732f32c6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0d79cf84-283b-4940-9950-4fdd60ca528d",
          "title": "Check remove comments",
          "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\utils\\hdl_utils.spec.ts",
          "file": "\\tests\\utils\\hdl_utils.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Remove comments VHDL",
              "fullTitle": "Check remove comments Remove comments VHDL",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = `\n-- One line comment\n-- One line comment 2\nTest no comment\n/* multiline\ncomment\nexample*/\nTest no comment 2`;\n// eslint-disable-next-line max-len\nconst code_expected = \"\\n                   \\n                     \\nTest no comment\\n/           \\n       \\n         \\nTest no comment 2\";\nconst code_current = hdl_utils.remove_comments_vhdl(code_dummy);\n(0, assert_1.equal)(code_current, code_expected);",
              "err": {},
              "uuid": "f5e04ea4-b815-4bbd-b68e-0c98717785a2",
              "parentUUID": "0d79cf84-283b-4940-9950-4fdd60ca528d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Remove comments Verilog",
              "fullTitle": "Check remove comments Remove comments Verilog",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = `\n// One line comment\n// One line comment 2\nTest no comment\n/* multiline\ncomment\nexample*/\nTest no comment 2`;\n// eslint-disable-next-line max-len\nconst code_expected = \"\\n                   \\n                     \\nTest no comment\\n            \\n       \\n         \\nTest no comment 2\";\nconst code_current = hdl_utils.remove_comments_verilog(code_dummy);\n(0, assert_1.equal)(code_current, code_expected);",
              "err": {},
              "uuid": "a2f2a45f-ac6f-4e8a-b6fa-c33ce06dfdd5",
              "parentUUID": "0d79cf84-283b-4940-9950-4fdd60ca528d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f5e04ea4-b815-4bbd-b68e-0c98717785a2",
            "a2f2a45f-ac6f-4e8a-b6fa-c33ce06dfdd5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ddd9e562-9d73-4773-b659-7a4deea64134",
          "title": "Check get top level with regex",
          "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\utils\\hdl_utils.spec.ts",
          "file": "\\tests\\utils\\hdl_utils.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "From VHDL code",
              "fullTitle": "Check get top level with regex From VHDL code",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "it(`Get top level VHDL`, async function () {\n    const code_dummy = `\n    library ieee;\n    use ieee.std_logic_1164.all;\n    use ieee.numeric_std.all;\n    entity test_entity_name is\n    generic (\n        a : integer;\n        b : unsigned;\n        c : signed;\n        d : std_logic;\n        e : std_logic_vector;\n        f : std_logic_vector(5 downto 0)\n      );\n    port(\n      g : in std_logic;\n      h : out std_logic;\n      i : inout std_logic\n    );\n    end test_entity_name;  \n    architecture e_arch of test_entity_name is\n    begin \n    end e_arch;\n    `;\n    const expected = 'test_entity_name';\n    const current = await hdl_utils.get_toplevel(code_dummy, general_1.HDL_LANG.VHDL);\n    (0, assert_1.equal)(current, expected);\n});\nit(`Get top level Verilog`, async function () {\n    const code_dummy = `\n    module test_entity_name2 \n        #(\n            parameter a=8,\n            parameter b=9,\n            parameter c=10, d=11\n        )\n        (\n            input e,\n            output f,\n            input reg g,\n            input wire h,\n            input reg [7:0] i, j,\n            input wire [9:0] k,\n            output wire [9:0] l\n        );  \n    \n        function [7:0] sum;  \n            input [7:0] a, b;  \n            begin  \n                sum = a + b;  \n            end  \n        endfunction\n    \n        wire m;\n        wire n, p;\n        reg [1:0] q;\n    \n        localparam r = 2;\n    \n        always @(posedge a) begin : label_0\n        end\n    \n        always_comb begin\n        end\n    \n        always_ff begin : label_1\n        end\n    \n        always_latch begin\n        end\n    \n        test_entity_name \n        #(\n          .a(a ),\n          .b(b ),\n          .c(c ),\n          .d (d )\n        )\n        test_entity_name_dut (\n          .e (e ),\n          .f (f ),\n          .g (g ),\n          .h (h ),\n          .i (i ),\n          .j (j ),\n          .k (k ),\n          .l  ( l)\n        );\n      \n    endmodule\n    `;\n    const expected = 'test_entity_name2';\n    const current = await hdl_utils.get_toplevel(code_dummy, general_1.HDL_LANG.VERILOG);\n    (0, assert_1.equal)(current, expected);\n});",
              "err": {},
              "uuid": "903bf6a3-436e-4d9c-94e8-5e7bdcb847f3",
              "parentUUID": "ddd9e562-9d73-4773-b659-7a4deea64134",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "903bf6a3-436e-4d9c-94e8-5e7bdcb847f3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7fb69569-d2a1-4f30-a747-4bc0eebb09c8",
          "title": "Check hover VHDL",
          "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\utils\\number.spec.ts",
          "file": "\\tests\\utils\\number.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Binary unsigned",
              "fullTitle": "Check hover VHDL Binary unsigned",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = '\"0011\"';\nconst expected_number = {\n    signed_n: 0,\n    unsigned_n: 3,\n    is_multi: false,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "0898f65e-3695-49da-b8d9-212a13302d8a",
              "parentUUID": "7fb69569-d2a1-4f30-a747-4bc0eebb09c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Binary unsigned or signed",
              "fullTitle": "Check hover VHDL Binary unsigned or signed",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = '\"1101\"';\nconst expected_number = {\n    signed_n: -3,\n    unsigned_n: 13,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "81c45b9e-1322-4512-9c22-6a928bf42b14",
              "parentUUID": "7fb69569-d2a1-4f30-a747-4bc0eebb09c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Binary unsigned or signed with separator",
              "fullTitle": "Check hover VHDL Binary unsigned or signed with separator",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = '\"1_10_0\"';\nconst expected_number = {\n    signed_n: -4,\n    unsigned_n: 12,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "ce1d1385-8b15-4b9b-88a7-54c41318d272",
              "parentUUID": "7fb69569-d2a1-4f30-a747-4bc0eebb09c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hexadeximal unsigned",
              "fullTitle": "Check hover VHDL Hexadeximal unsigned",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = 'x\"0aB0\"';\nconst expected_number = {\n    signed_n: 0,\n    unsigned_n: 2736,\n    is_multi: false,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "fba99109-59e6-457c-84d7-bb504166e9a7",
              "parentUUID": "7fb69569-d2a1-4f30-a747-4bc0eebb09c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hexadeximal unsigned or signed",
              "fullTitle": "Check hover VHDL Hexadeximal unsigned or signed",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = 'x\"aaB0\"';\nconst expected_number = {\n    signed_n: -21840,\n    unsigned_n: 43696,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "f88481b4-3de0-41fd-bf26-951d47bb6e87",
              "parentUUID": "7fb69569-d2a1-4f30-a747-4bc0eebb09c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hexadeximal unsigned or signed with separator",
              "fullTitle": "Check hover VHDL Hexadeximal unsigned or signed with separator",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = 'x\"a_a_b0\"';\nconst expected_number = {\n    signed_n: -21840,\n    unsigned_n: 43696,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "9bcc16b7-35a2-49bf-a41c-95068747a0ab",
              "parentUUID": "7fb69569-d2a1-4f30-a747-4bc0eebb09c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Octal unsigned",
              "fullTitle": "Check hover VHDL Octal unsigned",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = 'o\"0175\"';\nconst expected_number = {\n    signed_n: 0,\n    unsigned_n: 125,\n    is_multi: false,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "31b1eb16-d932-49c5-925f-cfd2e887bc47",
              "parentUUID": "7fb69569-d2a1-4f30-a747-4bc0eebb09c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Octal unsigned or signed",
              "fullTitle": "Check hover VHDL Octal unsigned or signed",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = 'O\"232\"';\nconst expected_number = {\n    signed_n: -102,\n    unsigned_n: 154,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "d8d09e26-fb46-4788-9322-2f69de409bd3",
              "parentUUID": "7fb69569-d2a1-4f30-a747-4bc0eebb09c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Octal unsigned or signed with separator",
              "fullTitle": "Check hover VHDL Octal unsigned or signed with separator",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = 'o\"2_3_2\"';\nconst expected_number = {\n    signed_n: -102,\n    unsigned_n: 154,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "528b010f-ada9-47bf-9b92-1b6d96366d75",
              "parentUUID": "7fb69569-d2a1-4f30-a747-4bc0eebb09c8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0898f65e-3695-49da-b8d9-212a13302d8a",
            "81c45b9e-1322-4512-9c22-6a928bf42b14",
            "ce1d1385-8b15-4b9b-88a7-54c41318d272",
            "fba99109-59e6-457c-84d7-bb504166e9a7",
            "f88481b4-3de0-41fd-bf26-951d47bb6e87",
            "9bcc16b7-35a2-49bf-a41c-95068747a0ab",
            "31b1eb16-d932-49c5-925f-cfd2e887bc47",
            "d8d09e26-fb46-4788-9322-2f69de409bd3",
            "528b010f-ada9-47bf-9b92-1b6d96366d75"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ac81b8bb-5192-4a6c-a492-8301e1780b74",
          "title": "Check hover Verilog",
          "fullFile": "D:\\a\\colibri2\\colibri2\\tests\\utils\\number.spec.ts",
          "file": "\\tests\\utils\\number.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Binary unsigned",
              "fullTitle": "Check hover Verilog Binary unsigned",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'b0011'\";\nconst expected_number = {\n    signed_n: 0,\n    unsigned_n: 3,\n    is_multi: false,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "a086f558-fdef-4cb6-b700-261a88b2aa29",
              "parentUUID": "ac81b8bb-5192-4a6c-a492-8301e1780b74",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Binary unsigned or signed",
              "fullTitle": "Check hover Verilog Binary unsigned or signed",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'b1101'\";\nconst expected_number = {\n    signed_n: -3,\n    unsigned_n: 13,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "c4e08240-d05d-413e-b6b7-dcde253248da",
              "parentUUID": "ac81b8bb-5192-4a6c-a492-8301e1780b74",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Binary unsigned or signed with separator",
              "fullTitle": "Check hover Verilog Binary unsigned or signed with separator",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'b1_10_0'\";\nconst expected_number = {\n    signed_n: -4,\n    unsigned_n: 12,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "a82ae2e1-7c80-4903-87dc-e499dffa8edc",
              "parentUUID": "ac81b8bb-5192-4a6c-a492-8301e1780b74",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hexadeximal unsigned",
              "fullTitle": "Check hover Verilog Hexadeximal unsigned",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'h0aB0'\";\nconst expected_number = {\n    signed_n: 0,\n    unsigned_n: 2736,\n    is_multi: false,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "aa9167af-9d81-476e-877f-31ecb26490b2",
              "parentUUID": "ac81b8bb-5192-4a6c-a492-8301e1780b74",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hexadeximal unsigned or signed",
              "fullTitle": "Check hover Verilog Hexadeximal unsigned or signed",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'haaB0'\";\nconst expected_number = {\n    signed_n: -21840,\n    unsigned_n: 43696,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "0b12f347-93aa-4194-9117-12819b84e877",
              "parentUUID": "ac81b8bb-5192-4a6c-a492-8301e1780b74",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hexadeximal unsigned or signed with separator",
              "fullTitle": "Check hover Verilog Hexadeximal unsigned or signed with separator",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'ha_a_b0'\";\nconst expected_number = {\n    signed_n: -21840,\n    unsigned_n: 43696,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "084932ea-e25d-4da1-b9f1-c671d76f9f1e",
              "parentUUID": "ac81b8bb-5192-4a6c-a492-8301e1780b74",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Octal unsigned",
              "fullTitle": "Check hover Verilog Octal unsigned",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'o0175'\";\nconst expected_number = {\n    signed_n: 0,\n    unsigned_n: 125,\n    is_multi: false,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "2ced1bc0-c1b1-4617-8c78-db26a0d3f6f2",
              "parentUUID": "ac81b8bb-5192-4a6c-a492-8301e1780b74",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Octal unsigned or signed",
              "fullTitle": "Check hover Verilog Octal unsigned or signed",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'o232'\";\nconst expected_number = {\n    signed_n: -102,\n    unsigned_n: 154,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "5f0b92df-40f4-434a-b19e-b795d4cb818f",
              "parentUUID": "ac81b8bb-5192-4a6c-a492-8301e1780b74",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Octal unsigned or signed with separator",
              "fullTitle": "Check hover Verilog Octal unsigned or signed with separator",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'o2_3_2'\";\nconst expected_number = {\n    signed_n: -102,\n    unsigned_n: 154,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "231d8a25-29e4-418c-96d2-034451892310",
              "parentUUID": "ac81b8bb-5192-4a6c-a492-8301e1780b74",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a086f558-fdef-4cb6-b700-261a88b2aa29",
            "c4e08240-d05d-413e-b6b7-dcde253248da",
            "a82ae2e1-7c80-4903-87dc-e499dffa8edc",
            "aa9167af-9d81-476e-877f-31ecb26490b2",
            "0b12f347-93aa-4194-9117-12819b84e877",
            "084932ea-e25d-4da1-b9f1-c671d76f9f1e",
            "2ced1bc0-c1b1-4617-8c78-db26a0d3f6f2",
            "5f0b92df-40f4-434a-b19e-b795d4cb818f",
            "231d8a25-29e4-418c-96d2-034451892310"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [
        "0bd9a439-be40-4e37-9099-a650ec9cba22",
        "2d700a0a-ea7c-414e-b0e4-1013a689fca9"
      ],
      "duration": 0,
      "root": true,
      "rootEmpty": false,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default"
      },
      "version": "6.2.0"
    }
  }
}