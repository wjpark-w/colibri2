{
  "stats": {
    "suites": 58,
    "tests": 197,
    "passes": 192,
    "pending": 5,
    "failures": 0,
    "start": "2022-09-05T16:44:58.413Z",
    "end": "2022-09-05T16:45:14.446Z",
    "duration": 16033,
    "testsRegistered": 199,
    "passPercent": 98.96907216494846,
    "pendingPercent": 2.512562814070352,
    "other": 0,
    "hasOther": false,
    "skipped": 2,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "baa29925-c1cc-4f13-857d-74979ad2b317",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [
        {
          "title": "Get top level VHDL",
          "fullTitle": "Get top level VHDL",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const code_dummy = `\nlibrary ieee;\nuse ieee.std_logic_1164.all;\nuse ieee.numeric_std.all;\nentity test_entity_name is\ngeneric (\n    a : integer;\n    b : unsigned;\n    c : signed;\n    d : std_logic;\n    e : std_logic_vector;\n    f : std_logic_vector(5 downto 0)\n  );\nport(\n  g : in std_logic;\n  h : out std_logic;\n  i : inout std_logic\n);\nend test_entity_name;  \narchitecture e_arch of test_entity_name is\nbegin \nend e_arch;\n`;\nconst expected = 'test_entity_name';\nconst current = await hdl_utils.get_toplevel(code_dummy, general_1.HDL_LANG.VHDL);\n(0, assert_1.equal)(current, expected);",
          "err": {},
          "uuid": "ad7d2172-da18-4aeb-8436-cf63537c2393",
          "parentUUID": "baa29925-c1cc-4f13-857d-74979ad2b317",
          "isHook": false,
          "skipped": true
        },
        {
          "title": "Get top level Verilog",
          "fullTitle": "Get top level Verilog",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const code_dummy = `\nmodule test_entity_name2 \n    #(\n        parameter a=8,\n        parameter b=9,\n        parameter c=10, d=11\n    )\n    (\n        input e,\n        output f,\n        input reg g,\n        input wire h,\n        input reg [7:0] i, j,\n        input wire [9:0] k,\n        output wire [9:0] l\n    );  \n\n    function [7:0] sum;  \n        input [7:0] a, b;  \n        begin  \n            sum = a + b;  \n        end  \n    endfunction\n\n    wire m;\n    wire n, p;\n    reg [1:0] q;\n\n    localparam r = 2;\n\n    always @(posedge a) begin : label_0\n    end\n\n    always_comb begin\n    end\n\n    always_ff begin : label_1\n    end\n\n    always_latch begin\n    end\n\n    test_entity_name \n    #(\n      .a(a ),\n      .b(b ),\n      .c(c ),\n      .d (d )\n    )\n    test_entity_name_dut (\n      .e (e ),\n      .f (f ),\n      .g (g ),\n      .h (h ),\n      .i (i ),\n      .j (j ),\n      .k (k ),\n      .l  ( l)\n    );\n  \nendmodule\n`;\nconst expected = 'test_entity_name2';\nconst current = await hdl_utils.get_toplevel(code_dummy, general_1.HDL_LANG.VERILOG);\n(0, assert_1.equal)(current, expected);",
          "err": {},
          "uuid": "5fe9b700-3956-47cb-8f10-bd3d7d4b0d2f",
          "parentUUID": "baa29925-c1cc-4f13-857d-74979ad2b317",
          "isHook": false,
          "skipped": true
        }
      ],
      "suites": [
        {
          "uuid": "b796d531-44bc-4a03-bfd5-f9e9fe172475",
          "title": "teroshdl:linter",
          "fullFile": "/home/runner/work/colibri2/colibri2/tests/command/linter/linter.spec.ts",
          "file": "/tests/command/linter/linter.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check linter",
              "fullTitle": "teroshdl:linter Check linter",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "ac70bf11-ef12-482d-9721-a3aa781122e7",
              "parentUUID": "b796d531-44bc-4a03-bfd5-f9e9fe172475",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "ac70bf11-ef12-482d-9721-a3aa781122e7"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9fbcea87-5c49-44e4-b3ec-68cad7005566",
          "title": "teroshdl:template",
          "fullFile": "/home/runner/work/colibri2/colibri2/tests/command/template/template.spec.ts",
          "file": "/tests/command/template/template.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check template",
              "fullTitle": "teroshdl:template Check template",
              "timedOut": false,
              "duration": 1466,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (context.timeout)\n    this.timeout(context.timeout);\nreturn run.call(this);",
              "err": {},
              "uuid": "aa8c5aac-d785-4cae-b9dc-22f92347922c",
              "parentUUID": "9fbcea87-5c49-44e4-b3ec-68cad7005566",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "aa8c5aac-d785-4cae-b9dc-22f92347922c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1466,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "05eefa3b-e460-4bbc-a686-3feb9441774f",
          "title": "Check diagram generator",
          "fullFile": "/home/runner/work/colibri2/colibri2/tests/documenter/diagram.spec.ts",
          "file": "/tests/documenter/diagram.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "With ports and generics and color",
              "fullTitle": "Check diagram generator With ports and generics and color",
              "timedOut": false,
              "duration": 277,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 0;\nconst OPT = {\n    blackandwhite: false\n};\nconst hdl_element = new common_hdl.Hdl_element(general_1.HDL_LANG.VHDL, common_hdl.TYPE_HDL_ELEMENT.ENTITY);\n// Ports\nhdl_element.add_port(port_input);\nhdl_element.add_port(port_output);\n// Generics\nhdl_element.add_generic(generic_0);\nhdl_element.add_generic(generic_1);\nconst svg_diagram = diagram.diagram_generator(hdl_element, OPT);\nconst file_o = paht_lib.join(C_OUTPUT_BASE_PATH, `output_${test_index}.svg`);\nfs.writeFileSync(file_o, svg_diagram);\ncheck_test(test_index);",
              "err": {},
              "uuid": "ec0b7b0b-86ec-4dd8-adc3-41091036cc26",
              "parentUUID": "05eefa3b-e460-4bbc-a686-3feb9441774f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Only ports and color",
              "fullTitle": "Check diagram generator Only ports and color",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 1;\nconst OPT = {\n    blackandwhite: false\n};\nconst hdl_element = new common_hdl.Hdl_element(general_1.HDL_LANG.VHDL, common_hdl.TYPE_HDL_ELEMENT.ENTITY);\n// Ports\nhdl_element.add_port(port_input);\nhdl_element.add_port(port_output);\nconst svg_diagram = diagram.diagram_generator(hdl_element, OPT);\nconst file_o = paht_lib.join(C_OUTPUT_BASE_PATH, `output_${test_index}.svg`);\nfs.writeFileSync(file_o, svg_diagram);\ncheck_test(test_index);",
              "err": {},
              "uuid": "924aff50-2343-4e37-868e-c88e51a55c28",
              "parentUUID": "05eefa3b-e460-4bbc-a686-3feb9441774f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Only generics and color",
              "fullTitle": "Check diagram generator Only generics and color",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 2;\nconst OPT = {\n    blackandwhite: false\n};\nconst hdl_element = new common_hdl.Hdl_element(general_1.HDL_LANG.VHDL, common_hdl.TYPE_HDL_ELEMENT.ENTITY);\n// Generics\nhdl_element.add_generic(generic_0);\nhdl_element.add_generic(generic_1);\nconst svg_diagram = diagram.diagram_generator(hdl_element, OPT);\nconst file_o = paht_lib.join(C_OUTPUT_BASE_PATH, `output_${test_index}.svg`);\nfs.writeFileSync(file_o, svg_diagram);\ncheck_test(test_index);",
              "err": {},
              "uuid": "6f39e916-7104-42ae-b37c-6bb9bf784b1b",
              "parentUUID": "05eefa3b-e460-4bbc-a686-3feb9441774f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Empty and color",
              "fullTitle": "Check diagram generator Empty and color",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 3;\nconst OPT = {\n    blackandwhite: false\n};\nconst hdl_element = new common_hdl.Hdl_element(general_1.HDL_LANG.VHDL, common_hdl.TYPE_HDL_ELEMENT.ENTITY);\nconst svg_diagram = diagram.diagram_generator(hdl_element, OPT);\nconst file_o = paht_lib.join(C_OUTPUT_BASE_PATH, `output_${test_index}.svg`);\nfs.writeFileSync(file_o, svg_diagram);\ncheck_test(test_index);",
              "err": {},
              "uuid": "727eaec7-d11d-48a8-9ce7-1569e51e6b47",
              "parentUUID": "05eefa3b-e460-4bbc-a686-3feb9441774f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "With ports and generics and black and white",
              "fullTitle": "Check diagram generator With ports and generics and black and white",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 4;\nconst OPT = {\n    blackandwhite: true\n};\nconst hdl_element = new common_hdl.Hdl_element(general_1.HDL_LANG.VHDL, common_hdl.TYPE_HDL_ELEMENT.ENTITY);\n// Ports\nhdl_element.add_port(port_input);\nhdl_element.add_port(port_output);\n// Generics\nhdl_element.add_generic(generic_0);\nhdl_element.add_generic(generic_1);\nconst svg_diagram = diagram.diagram_generator(hdl_element, OPT);\nconst file_o = paht_lib.join(C_OUTPUT_BASE_PATH, `output_${test_index}.svg`);\nfs.writeFileSync(file_o, svg_diagram);\ncheck_test(test_index);",
              "err": {},
              "uuid": "0a1cca20-2b49-42ee-b86f-b29f010eb674",
              "parentUUID": "05eefa3b-e460-4bbc-a686-3feb9441774f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ec0b7b0b-86ec-4dd8-adc3-41091036cc26",
            "924aff50-2343-4e37-868e-c88e51a55c28",
            "6f39e916-7104-42ae-b37c-6bb9bf784b1b",
            "727eaec7-d11d-48a8-9ce7-1569e51e6b47",
            "0a1cca20-2b49-42ee-b86f-b29f010eb674"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 329,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7a26b0d9-b38f-4b98-ae3b-630f936022aa",
          "title": "Check documenter creator with html",
          "fullFile": "/home/runner/work/colibri2/colibri2/tests/documenter/documenter.spec.ts",
          "file": "/tests/documenter/documenter.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Entity VHDL",
              "fullTitle": "Check documenter creator with html Entity VHDL",
              "timedOut": false,
              "duration": 594,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.VHDL;\nconst hdl_type = 'entity';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "1f3835a5-b56e-4042-839c-e76b512ac7b1",
              "parentUUID": "7a26b0d9-b38f-4b98-ae3b-630f936022aa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Package VHDL",
              "fullTitle": "Check documenter creator with html Package VHDL",
              "timedOut": false,
              "duration": 419,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.VHDL;\nconst hdl_type = 'package';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "eb431905-d07f-491d-9912-214fd3942776",
              "parentUUID": "7a26b0d9-b38f-4b98-ae3b-630f936022aa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Module Verilog",
              "fullTitle": "Check documenter creator with html Module Verilog",
              "timedOut": false,
              "duration": 1141,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.VERILOG;\nconst hdl_type = 'entity';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "2a31dcbf-d202-43cc-833c-a439d8b7b863",
              "parentUUID": "7a26b0d9-b38f-4b98-ae3b-630f936022aa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Package SystemVerilog",
              "fullTitle": "Check documenter creator with html Package SystemVerilog",
              "timedOut": false,
              "duration": 242,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.SYSTEMVERILOG;\nconst hdl_type = 'package';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "23584804-0efe-4001-9418-7fff5c6b26d2",
              "parentUUID": "7a26b0d9-b38f-4b98-ae3b-630f936022aa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Interface SystemVerilog",
              "fullTitle": "Check documenter creator with html Interface SystemVerilog",
              "timedOut": false,
              "duration": 287,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.SYSTEMVERILOG;\nconst hdl_type = 'interface';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "11c2f382-0400-42ab-8d5d-9c09f3a3aa53",
              "parentUUID": "7a26b0d9-b38f-4b98-ae3b-630f936022aa",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1f3835a5-b56e-4042-839c-e76b512ac7b1",
            "eb431905-d07f-491d-9912-214fd3942776",
            "2a31dcbf-d202-43cc-833c-a439d8b7b863",
            "23584804-0efe-4001-9418-7fff5c6b26d2",
            "11c2f382-0400-42ab-8d5d-9c09f3a3aa53"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2683,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a0279973-1aef-49dc-b2a9-ff5495525305",
          "title": "Check documenter creator with markdown",
          "fullFile": "/home/runner/work/colibri2/colibri2/tests/documenter/documenter.spec.ts",
          "file": "/tests/documenter/documenter.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Entity VHDL",
              "fullTitle": "Check documenter creator with markdown Entity VHDL",
              "timedOut": false,
              "duration": 331,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.VHDL;\nconst hdl_type = 'entity';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "c7abe2d6-17ec-4cae-9e67-80654ec038d6",
              "parentUUID": "a0279973-1aef-49dc-b2a9-ff5495525305",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Package VHDL",
              "fullTitle": "Check documenter creator with markdown Package VHDL",
              "timedOut": false,
              "duration": 299,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.VHDL;\nconst hdl_type = 'package';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "ffb3e94f-e96f-4c59-84f0-e8810165450c",
              "parentUUID": "a0279973-1aef-49dc-b2a9-ff5495525305",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Module Verilog",
              "fullTitle": "Check documenter creator with markdown Module Verilog",
              "timedOut": false,
              "duration": 563,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.VERILOG;\nconst hdl_type = 'entity';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "bedca2d9-0322-40a4-805b-ff0a74edbacd",
              "parentUUID": "a0279973-1aef-49dc-b2a9-ff5495525305",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Package SystemVerilog",
              "fullTitle": "Check documenter creator with markdown Package SystemVerilog",
              "timedOut": false,
              "duration": 345,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.SYSTEMVERILOG;\nconst hdl_type = 'package';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "8566ab3c-473c-41a2-946e-da3756e9dd70",
              "parentUUID": "a0279973-1aef-49dc-b2a9-ff5495525305",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Interface SystemVerilog",
              "fullTitle": "Check documenter creator with markdown Interface SystemVerilog",
              "timedOut": false,
              "duration": 311,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const hdl_lang = general_1.HDL_LANG.SYSTEMVERILOG;\nconst hdl_type = 'interface';\nawait run(hdl_type, hdl_lang, output_type_inst);",
              "err": {},
              "uuid": "2116a632-da26-4b5b-adf7-6cfce0ec62f3",
              "parentUUID": "a0279973-1aef-49dc-b2a9-ff5495525305",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c7abe2d6-17ec-4cae-9e67-80654ec038d6",
            "ffb3e94f-e96f-4c59-84f0-e8810165450c",
            "bedca2d9-0322-40a4-805b-ff0a74edbacd",
            "8566ab3c-473c-41a2-946e-da3756e9dd70",
            "2116a632-da26-4b5b-adf7-6cfce0ec62f3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1849,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "cda6df92-ffe1-4177-bfd3-93f7153fd4e3",
          "title": "Test Doxygen elements single line and only 1 element in the description.",
          "fullFile": "/home/runner/work/colibri2/colibri2/tests/documenter/doxygen.spec.ts",
          "file": "/tests/documenter/doxygen.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Testing author",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing author",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "ffd5bfe5-e603-4a4d-b749-db0d4fd8e69c",
              "parentUUID": "cda6df92-ffe1-4177-bfd3-93f7153fd4e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing version",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing version",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "74b83ed5-7810-425a-a55f-7a9db1f6a21a",
              "parentUUID": "cda6df92-ffe1-4177-bfd3-93f7153fd4e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing project",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing project",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "818c162e-c154-423b-9875-a057c25adee9",
              "parentUUID": "cda6df92-ffe1-4177-bfd3-93f7153fd4e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing copyright",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing copyright",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "a8e5c217-764d-4a32-9443-836c287c9929",
              "parentUUID": "cda6df92-ffe1-4177-bfd3-93f7153fd4e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing brief",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing brief",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "3520fd9a-e645-48ad-853c-1af27aa8b6c0",
              "parentUUID": "cda6df92-ffe1-4177-bfd3-93f7153fd4e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing details",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing details",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "48f4246b-d625-4247-bb69-099264a638ee",
              "parentUUID": "cda6df92-ffe1-4177-bfd3-93f7153fd4e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing custom_section_begin",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing custom_section_begin",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "e4deac48-5f20-45a8-aa33-c9fed6b40a46",
              "parentUUID": "cda6df92-ffe1-4177-bfd3-93f7153fd4e3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing custom_section_end",
              "fullTitle": "Test Doxygen elements single line and only 1 element in the description. Testing custom_section_end",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "b2afa278-598d-49d3-a404-296582de9f9f",
              "parentUUID": "cda6df92-ffe1-4177-bfd3-93f7153fd4e3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ffd5bfe5-e603-4a4d-b749-db0d4fd8e69c",
            "74b83ed5-7810-425a-a55f-7a9db1f6a21a",
            "818c162e-c154-423b-9875-a057c25adee9",
            "a8e5c217-764d-4a32-9443-836c287c9929",
            "3520fd9a-e645-48ad-853c-1af27aa8b6c0",
            "48f4246b-d625-4247-bb69-099264a638ee",
            "e4deac48-5f20-45a8-aa33-c9fed6b40a46",
            "b2afa278-598d-49d3-a404-296582de9f9f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4b4a9f93-34ee-42a8-9f82-7c8d513faf19",
          "title": "Test Doxygen elements multi line and only 1 element in the description.",
          "fullFile": "/home/runner/work/colibri2/colibri2/tests/documenter/doxygen.spec.ts",
          "file": "/tests/documenter/doxygen.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Testing author",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing author",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "f332fdba-dba3-4654-af12-16d9aba01d9f",
              "parentUUID": "4b4a9f93-34ee-42a8-9f82-7c8d513faf19",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing version",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing version",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "01fdaedd-b56e-451d-88d8-b7fb9b7c99d5",
              "parentUUID": "4b4a9f93-34ee-42a8-9f82-7c8d513faf19",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing project",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing project",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "d726fd92-5600-4f4c-9ce2-5ae4d835dce5",
              "parentUUID": "4b4a9f93-34ee-42a8-9f82-7c8d513faf19",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing copyright",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing copyright",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "ea28330a-a4c7-4b09-b88f-e3be6b3c88d4",
              "parentUUID": "4b4a9f93-34ee-42a8-9f82-7c8d513faf19",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing brief",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing brief",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "94a5652d-a468-4d35-ba25-6e58162076e0",
              "parentUUID": "4b4a9f93-34ee-42a8-9f82-7c8d513faf19",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing details",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing details",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "ee077592-b4a8-4d64-a21d-14884cf5f82d",
              "parentUUID": "4b4a9f93-34ee-42a8-9f82-7c8d513faf19",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing custom_section_begin",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing custom_section_begin",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "b32fc603-455a-48bb-877a-ad00fc3e3ff9",
              "parentUUID": "4b4a9f93-34ee-42a8-9f82-7c8d513faf19",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing custom_section_end",
              "fullTitle": "Test Doxygen elements multi line and only 1 element in the description. Testing custom_section_end",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = (0, doxygen_parser_1.parse_doxygen)(element.input);\n(0, assert_1.equal)(result.element_list[0].description, element.output);",
              "err": {},
              "uuid": "ae16c310-f8c0-481f-ae5e-d131d06bef6f",
              "parentUUID": "4b4a9f93-34ee-42a8-9f82-7c8d513faf19",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f332fdba-dba3-4654-af12-16d9aba01d9f",
            "01fdaedd-b56e-451d-88d8-b7fb9b7c99d5",
            "d726fd92-5600-4f4c-9ce2-5ae4d835dce5",
            "ea28330a-a4c7-4b09-b88f-e3be6b3c88d4",
            "94a5652d-a468-4d35-ba25-6e58162076e0",
            "ee077592-b4a8-4d64-a21d-14884cf5f82d",
            "b32fc603-455a-48bb-877a-ad00fc3e3ff9",
            "ae16c310-f8c0-481f-ae5e-d131d06bef6f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c3a77f94-31eb-4223-b5b9-36f7cb8b1eb3",
          "title": "Check sections creator with html",
          "fullFile": "/home/runner/work/colibri2/colibri2/tests/documenter/section_creator.spec.ts",
          "file": "/tests/documenter/section_creator.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Title section",
              "fullTitle": "Check sections creator with html Title section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"title\";\nconst section = creator.get_title_section(hdl_element, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "cb331ac8-960f-4a65-8d73-268596f05ceb",
              "parentUUID": "c3a77f94-31eb-4223-b5b9-36f7cb8b1eb3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Input section",
              "fullTitle": "Check sections creator with html Input section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"input\";\nconst file_path = \"/example/of/sample.vhd\";\nconst section = creator.get_input_section(file_path, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "584fe41e-4883-4543-ab7d-6f05d7160f92",
              "parentUUID": "c3a77f94-31eb-4223-b5b9-36f7cb8b1eb3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Info section",
              "fullTitle": "Check sections creator with html Info section",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"info\";\nconst section = creator.get_info_section(hdl_element, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "fc774111-2962-4f28-9b0e-e0524f0b9d0b",
              "parentUUID": "c3a77f94-31eb-4223-b5b9-36f7cb8b1eb3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Diagram section",
              "fullTitle": "Check sections creator with html Diagram section",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "this.skip();\nconst section_name = \"diagram\";\nconst svg_path = paht_lib.join(C_OUTPUT_BASE_PATH, 'input_path.svg');\nconst section = creator.get_diagram_section(hdl_element, configuration, svg_path);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, true);",
              "err": {},
              "uuid": "3ae81485-fa0a-47da-9214-a9c2572764c9",
              "parentUUID": "c3a77f94-31eb-4223-b5b9-36f7cb8b1eb3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Custom begin section",
              "fullTitle": "Check sections creator with html Custom begin section",
              "timedOut": false,
              "duration": 106,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"custom_section_begin\";\nconst input_path = paht_lib.join(__dirname, 'section_creator', 'helpers', 'input_path.vhd');\nconst section = creator.get_custom_section('custom_section_begin', hdl_element, configuration, input_path);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "a6b27b0d-cb1e-4018-8ef1-b7e739d012f4",
              "parentUUID": "c3a77f94-31eb-4223-b5b9-36f7cb8b1eb3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Custom end section",
              "fullTitle": "Check sections creator with html Custom end section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"custom_section_end\";\nconst input_path = paht_lib.join(__dirname, 'section_creator', 'helpers', 'input_path.vhd');\nconst section = creator.get_custom_section('custom_section_end', hdl_element, configuration, input_path);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "f20192e9-4d8d-4f51-bf6c-859d651ec688",
              "parentUUID": "c3a77f94-31eb-4223-b5b9-36f7cb8b1eb3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Description section",
              "fullTitle": "Check sections creator with html Description section",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (configuration.output_type === common_documenter.doc_output_type.MARKDOWN) {\n    this.skip();\n}\nconst section_name = \"description\";\nconst section = creator.get_description_section(hdl_element, configuration, C_OUTPUT_BASE_PATH);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "d2301819-0198-4c60-8d7d-605d22dd6d15",
              "parentUUID": "c3a77f94-31eb-4223-b5b9-36f7cb8b1eb3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Port section",
              "fullTitle": "Check sections creator with html Port section",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"port\";\nconst section = creator.get_in_out_section(hdl_element, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "f67a6930-e1d3-420c-8f86-1258c21d84cc",
              "parentUUID": "c3a77f94-31eb-4223-b5b9-36f7cb8b1eb3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Signal-constant section",
              "fullTitle": "Check sections creator with html Signal-constant section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"signal_constant\";\nconst section = creator.get_signal_constant_section(hdl_element, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "10103352-f8e6-442f-84eb-e34dd771bb3c",
              "parentUUID": "c3a77f94-31eb-4223-b5b9-36f7cb8b1eb3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Process section",
              "fullTitle": "Check sections creator with html Process section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"process\";\nconst section = creator.get_process_section(hdl_element, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "013091b2-6388-4f56-826f-8fcb67ab275e",
              "parentUUID": "c3a77f94-31eb-4223-b5b9-36f7cb8b1eb3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Function section",
              "fullTitle": "Check sections creator with html Function section",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"function\";\nconst section = creator.get_function_section(hdl_element, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "31c4484c-fba2-4381-b86c-ee89a3659993",
              "parentUUID": "c3a77f94-31eb-4223-b5b9-36f7cb8b1eb3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Instantiation section",
              "fullTitle": "Check sections creator with html Instantiation section",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"instantiation\";\nconst section = creator.get_instantiation_section(hdl_element, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "e0e44029-71ee-4805-9246-d8c76efc567a",
              "parentUUID": "c3a77f94-31eb-4223-b5b9-36f7cb8b1eb3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cb331ac8-960f-4a65-8d73-268596f05ceb",
            "584fe41e-4883-4543-ab7d-6f05d7160f92",
            "fc774111-2962-4f28-9b0e-e0524f0b9d0b",
            "a6b27b0d-cb1e-4018-8ef1-b7e739d012f4",
            "f20192e9-4d8d-4f51-bf6c-859d651ec688",
            "d2301819-0198-4c60-8d7d-605d22dd6d15",
            "f67a6930-e1d3-420c-8f86-1258c21d84cc",
            "10103352-f8e6-442f-84eb-e34dd771bb3c",
            "013091b2-6388-4f56-826f-8fcb67ab275e",
            "31c4484c-fba2-4381-b86c-ee89a3659993",
            "e0e44029-71ee-4805-9246-d8c76efc567a"
          ],
          "failures": [],
          "pending": [
            "3ae81485-fa0a-47da-9214-a9c2572764c9"
          ],
          "skipped": [],
          "duration": 122,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "cb53ca61-441d-4e50-8611-333137ebddb3",
          "title": "Check sections creator with markdown",
          "fullFile": "/home/runner/work/colibri2/colibri2/tests/documenter/section_creator.spec.ts",
          "file": "/tests/documenter/section_creator.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Title section",
              "fullTitle": "Check sections creator with markdown Title section",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"title\";\nconst section = creator.get_title_section(hdl_element, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "4999c371-36d5-441d-88f0-a097a7ed8e40",
              "parentUUID": "cb53ca61-441d-4e50-8611-333137ebddb3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Input section",
              "fullTitle": "Check sections creator with markdown Input section",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"input\";\nconst file_path = \"/example/of/sample.vhd\";\nconst section = creator.get_input_section(file_path, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "e1675edf-3069-47eb-9cd3-eb75f7261507",
              "parentUUID": "cb53ca61-441d-4e50-8611-333137ebddb3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Info section",
              "fullTitle": "Check sections creator with markdown Info section",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"info\";\nconst section = creator.get_info_section(hdl_element, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "cde10d9f-45ea-487e-94ec-85768b54661d",
              "parentUUID": "cb53ca61-441d-4e50-8611-333137ebddb3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Diagram section",
              "fullTitle": "Check sections creator with markdown Diagram section",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "this.skip();\nconst section_name = \"diagram\";\nconst svg_path = paht_lib.join(C_OUTPUT_BASE_PATH, 'input_path.svg');\nconst section = creator.get_diagram_section(hdl_element, configuration, svg_path);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, true);",
              "err": {},
              "uuid": "6d73116c-d0b0-4c89-a8b0-35614b1da71c",
              "parentUUID": "cb53ca61-441d-4e50-8611-333137ebddb3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Custom begin section",
              "fullTitle": "Check sections creator with markdown Custom begin section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"custom_section_begin\";\nconst input_path = paht_lib.join(__dirname, 'section_creator', 'helpers', 'input_path.vhd');\nconst section = creator.get_custom_section('custom_section_begin', hdl_element, configuration, input_path);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "48d27293-b6c1-41a4-ab1c-e860d887f63e",
              "parentUUID": "cb53ca61-441d-4e50-8611-333137ebddb3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Custom end section",
              "fullTitle": "Check sections creator with markdown Custom end section",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"custom_section_end\";\nconst input_path = paht_lib.join(__dirname, 'section_creator', 'helpers', 'input_path.vhd');\nconst section = creator.get_custom_section('custom_section_end', hdl_element, configuration, input_path);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "42701e95-4a47-4acf-925c-e47eaa6b3cd9",
              "parentUUID": "cb53ca61-441d-4e50-8611-333137ebddb3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Description section",
              "fullTitle": "Check sections creator with markdown Description section",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "if (configuration.output_type === common_documenter.doc_output_type.MARKDOWN) {\n    this.skip();\n}\nconst section_name = \"description\";\nconst section = creator.get_description_section(hdl_element, configuration, C_OUTPUT_BASE_PATH);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "1db39fe9-42bc-47d2-b7ad-31aeb1595dc4",
              "parentUUID": "cb53ca61-441d-4e50-8611-333137ebddb3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Port section",
              "fullTitle": "Check sections creator with markdown Port section",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"port\";\nconst section = creator.get_in_out_section(hdl_element, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "9d44c56d-9c20-4db0-ab18-2fffefa7b5c5",
              "parentUUID": "cb53ca61-441d-4e50-8611-333137ebddb3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Signal-constant section",
              "fullTitle": "Check sections creator with markdown Signal-constant section",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"signal_constant\";\nconst section = creator.get_signal_constant_section(hdl_element, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "363c6183-1cd3-4514-97b8-3a0c4df759cd",
              "parentUUID": "cb53ca61-441d-4e50-8611-333137ebddb3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Process section",
              "fullTitle": "Check sections creator with markdown Process section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"process\";\nconst section = creator.get_process_section(hdl_element, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "5a9cf880-32b3-4f3e-87ff-3cfd46e938c7",
              "parentUUID": "cb53ca61-441d-4e50-8611-333137ebddb3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Function section",
              "fullTitle": "Check sections creator with markdown Function section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"function\";\nconst section = creator.get_function_section(hdl_element, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "0de8e8f7-84d7-4a17-a9c8-9f8f5029ad3e",
              "parentUUID": "cb53ca61-441d-4e50-8611-333137ebddb3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Instantiation section",
              "fullTitle": "Check sections creator with markdown Instantiation section",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const section_name = \"instantiation\";\nconst section = creator.get_instantiation_section(hdl_element, configuration);\nsave_output(section, section_name, configuration.output_type);\ncheck(section_name, configuration.output_type, false);",
              "err": {},
              "uuid": "eae96060-8862-4ffa-a5b7-475465d04388",
              "parentUUID": "cb53ca61-441d-4e50-8611-333137ebddb3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4999c371-36d5-441d-88f0-a097a7ed8e40",
            "e1675edf-3069-47eb-9cd3-eb75f7261507",
            "cde10d9f-45ea-487e-94ec-85768b54661d",
            "48d27293-b6c1-41a4-ab1c-e860d887f63e",
            "42701e95-4a47-4acf-925c-e47eaa6b3cd9",
            "9d44c56d-9c20-4db0-ab18-2fffefa7b5c5",
            "363c6183-1cd3-4514-97b8-3a0c4df759cd",
            "5a9cf880-32b3-4f3e-87ff-3cfd46e938c7",
            "0de8e8f7-84d7-4a17-a9c8-9f8f5029ad3e",
            "eae96060-8862-4ffa-a5b7-475465d04388"
          ],
          "failures": [],
          "pending": [
            "6d73116c-d0b0-4c89-a8b0-35614b1da71c",
            "1db39fe9-42bc-47d2-b7ad-31aeb1595dc4"
          ],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "af39bc24-3708-43a7-a7b3-07b935f8f284",
          "title": "Check standalone VHDL formatter",
          "fullFile": "/home/runner/work/colibri2/colibri2/tests/formatter/formatter.spec.ts",
          "file": "/tests/formatter/formatter.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check align comments true, indentation and keyworks lowercase",
              "fullTitle": "Check standalone VHDL formatter Check align comments true, indentation and keyworks lowercase",
              "timedOut": false,
              "duration": 26,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 0;\nconst options = {\n    remove_comments: false,\n    remove_asserts: false,\n    remove_report: false,\n    check_alias: false,\n    align_comments: true,\n    sign_align_settings: {\n        is_regional: true,\n        is_all: true,\n        mode: common.ALIGN_MODE.LOCAL,\n        keyWords: [\"FUNCTION\", \"IMPURE FUNCTION\", \"GENERIC\", \"PORT\", \"PROCEDURE\"]\n    },\n    keyword_case: common.LETTER_CASE.LOWERCASE,\n    type_name_case: common.LETTER_CASE.LOWERCASE,\n    indentation: \"    \",\n    new_line_settings: {\n        new_line_after: [\";\", \"then\"],\n        no_new_line_after: []\n    },\n    end_of_line: \"\\n\"\n};\nawait format_and_check(formatter_name, language, test_index, options);",
              "err": {},
              "uuid": "7316a23f-8518-482e-9dd4-ade3869aa0d5",
              "parentUUID": "af39bc24-3708-43a7-a7b3-07b935f8f284",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check align comments false, indentation and keyworks uppercase",
              "fullTitle": "Check standalone VHDL formatter Check align comments false, indentation and keyworks uppercase",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 1;\nconst options = {\n    remove_comments: false,\n    remove_asserts: false,\n    remove_report: false,\n    check_alias: false,\n    align_comments: false,\n    sign_align_settings: {\n        is_regional: true,\n        is_all: true,\n        mode: common.ALIGN_MODE.LOCAL,\n        keyWords: [\"FUNCTION\", \"IMPURE FUNCTION\", \"GENERIC\", \"PORT\", \"PROCEDURE\"]\n    },\n    keyword_case: common.LETTER_CASE.UPPERCASE,\n    type_name_case: common.LETTER_CASE.UPPERCASE,\n    indentation: \"      \",\n    new_line_settings: {\n        new_line_after: [\";\", \"then\"],\n        no_new_line_after: []\n    },\n    end_of_line: \"\\n\"\n};\nawait format_and_check(formatter_name, language, test_index, options);",
              "err": {},
              "uuid": "88db1c4d-fb89-4ca4-9f64-27e424a14dde",
              "parentUUID": "af39bc24-3708-43a7-a7b3-07b935f8f284",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7316a23f-8518-482e-9dd4-ade3869aa0d5",
            "88db1c4d-fb89-4ca4-9f64-27e424a14dde"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 30,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1053c502-6934-4216-9401-28b51b712e72",
          "title": "Check istyle formatter",
          "fullFile": "/home/runner/work/colibri2/colibri2/tests/formatter/formatter.spec.ts",
          "file": "/tests/formatter/formatter.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check ansi with indent = 2",
              "fullTitle": "Check istyle formatter Check ansi with indent = 2",
              "timedOut": false,
              "duration": 26,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index;\nconst options = { style: style_inst, indent_size: 2 };\nawait format_and_check(formatter_name, language, test_index, options);",
              "err": {},
              "uuid": "71203037-82c3-4417-bbe3-21f108ab292b",
              "parentUUID": "1053c502-6934-4216-9401-28b51b712e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check kr with indent = 2",
              "fullTitle": "Check istyle formatter Check kr with indent = 2",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index;\nconst options = { style: style_inst, indent_size: 2 };\nawait format_and_check(formatter_name, language, test_index, options);",
              "err": {},
              "uuid": "4577c6cb-91a4-4905-8507-ee30ab44ad1f",
              "parentUUID": "1053c502-6934-4216-9401-28b51b712e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check gnu with indent = 2",
              "fullTitle": "Check istyle formatter Check gnu with indent = 2",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index;\nconst options = { style: style_inst, indent_size: 2 };\nawait format_and_check(formatter_name, language, test_index, options);",
              "err": {},
              "uuid": "2d748fea-e5de-48dc-b654-c48a28db708e",
              "parentUUID": "1053c502-6934-4216-9401-28b51b712e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check onlyindent with indent = 2",
              "fullTitle": "Check istyle formatter Check onlyindent with indent = 2",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index;\nconst options = { style: style_inst, indent_size: 2 };\nawait format_and_check(formatter_name, language, test_index, options);",
              "err": {},
              "uuid": "fcd46a7d-8493-4920-97de-2c7c0905d8b7",
              "parentUUID": "1053c502-6934-4216-9401-28b51b712e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check ansi with indent = 6",
              "fullTitle": "Check istyle formatter Check ansi with indent = 6",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index + style_list.length;\nconst options = { style: style_inst, indent_size: 6 };\nawait format_and_check(formatter_name, language, test_index, options);",
              "err": {},
              "uuid": "8c570acb-081e-4486-9317-6a15fd39071b",
              "parentUUID": "1053c502-6934-4216-9401-28b51b712e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check kr with indent = 6",
              "fullTitle": "Check istyle formatter Check kr with indent = 6",
              "timedOut": false,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index + style_list.length;\nconst options = { style: style_inst, indent_size: 6 };\nawait format_and_check(formatter_name, language, test_index, options);",
              "err": {},
              "uuid": "b7d355f3-9dc1-4cd1-aeb1-6d2844252788",
              "parentUUID": "1053c502-6934-4216-9401-28b51b712e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check gnu with indent = 6",
              "fullTitle": "Check istyle formatter Check gnu with indent = 6",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index + style_list.length;\nconst options = { style: style_inst, indent_size: 6 };\nawait format_and_check(formatter_name, language, test_index, options);",
              "err": {},
              "uuid": "3db5f68e-e6ae-4ac6-828f-6cca3525f3dd",
              "parentUUID": "1053c502-6934-4216-9401-28b51b712e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check onlyindent with indent = 6",
              "fullTitle": "Check istyle formatter Check onlyindent with indent = 6",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = index + style_list.length;\nconst options = { style: style_inst, indent_size: 6 };\nawait format_and_check(formatter_name, language, test_index, options);",
              "err": {},
              "uuid": "2fe14622-b5de-41d2-a053-81952f07e279",
              "parentUUID": "1053c502-6934-4216-9401-28b51b712e72",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "71203037-82c3-4417-bbe3-21f108ab292b",
            "4577c6cb-91a4-4905-8507-ee30ab44ad1f",
            "2d748fea-e5de-48dc-b654-c48a28db708e",
            "fcd46a7d-8493-4920-97de-2c7c0905d8b7",
            "8c570acb-081e-4486-9317-6a15fd39071b",
            "b7d355f3-9dc1-4cd1-aeb1-6d2844252788",
            "3db5f68e-e6ae-4ac6-828f-6cca3525f3dd",
            "2fe14622-b5de-41d2-a053-81952f07e279"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 140,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5a5bc1cd-ed6a-4114-9b0a-5cf6476a84b9",
          "title": "Check s3sv formatter",
          "fullFile": "/home/runner/work/colibri2/colibri2/tests/formatter/formatter.spec.ts",
          "file": "/tests/formatter/formatter.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check config 0",
              "fullTitle": "Check s3sv formatter Check config 0",
              "timedOut": false,
              "duration": 156,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 0;\nconst options = {\n    python3_path: \"\",\n    use_tabs: false,\n    indent_size: 2,\n    one_bind_per_line: true,\n    one_decl_per_line: true\n};\nawait format_and_check(formatter_name, language, test_index, options);",
              "err": {},
              "uuid": "da0364c7-3e52-4610-a72e-1b01644b55f1",
              "parentUUID": "5a5bc1cd-ed6a-4114-9b0a-5cf6476a84b9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check config 1",
              "fullTitle": "Check s3sv formatter Check config 1",
              "timedOut": false,
              "duration": 151,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 1;\nconst options = {\n    python3_path: \"\",\n    use_tabs: true,\n    indent_size: 4,\n    one_bind_per_line: true,\n    one_decl_per_line: true\n};\nawait format_and_check(formatter_name, language, test_index, options);",
              "err": {},
              "uuid": "ee5c2585-803f-4ea8-8052-515ab452a939",
              "parentUUID": "5a5bc1cd-ed6a-4114-9b0a-5cf6476a84b9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check config 2 and bad python3 path",
              "fullTitle": "Check s3sv formatter Check config 2 and bad python3 path",
              "timedOut": false,
              "duration": 182,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 2;\nconst options = {\n    python3_path: \"asdf\",\n    use_tabs: true,\n    indent_size: 2,\n    one_bind_per_line: false,\n    one_decl_per_line: true\n};\nawait format_and_check(formatter_name, language, test_index, options);",
              "err": {},
              "uuid": "dae3d684-72ba-4fe1-956b-1db795d6a359",
              "parentUUID": "5a5bc1cd-ed6a-4114-9b0a-5cf6476a84b9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "da0364c7-3e52-4610-a72e-1b01644b55f1",
            "ee5c2585-803f-4ea8-8052-515ab452a939",
            "dae3d684-72ba-4fe1-956b-1db795d6a359"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 489,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "59f58f52-851b-46a0-87ff-4414c095774c",
          "title": "Check FSM for vhdl",
          "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/fsm.spec.ts",
          "file": "/tests/parser/fsm.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Normal",
              "fullTitle": "Check FSM for vhdl Normal",
              "timedOut": false,
              "duration": 146,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 0;\nawait parse_fsm(lang_inst, test_index);\ncheck_test(test_index, lang_inst);",
              "err": {},
              "uuid": "9f319ce0-ebb9-4d96-b0a4-51ffe39256a9",
              "parentUUID": "59f58f52-851b-46a0-87ff-4414c095774c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9f319ce0-ebb9-4d96-b0a4-51ffe39256a9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 146,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "23114f92-cbe8-4526-a549-29ecbafb23c2",
          "title": "Check FSM for verilog",
          "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/fsm.spec.ts",
          "file": "/tests/parser/fsm.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Normal",
              "fullTitle": "Check FSM for verilog Normal",
              "timedOut": false,
              "duration": 398,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const test_index = 0;\nawait parse_fsm(lang_inst, test_index);\ncheck_test(test_index, lang_inst);",
              "err": {},
              "uuid": "34c9818e-29fb-4f21-a239-5378d7361e9f",
              "parentUUID": "23114f92-cbe8-4526-a549-29ecbafb23c2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "34c9818e-29fb-4f21-a239-5378d7361e9f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 398,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ffcdce73-7db8-4141-ae3d-da3dc69e7c00",
          "title": "Check entity Verilog",
          "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_verilog_entity.spec.ts",
          "file": "/tests/parser/parser_verilog_entity.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e131e868-a36c-4bd8-b224-197d79d2e3e6",
              "title": "Check entity.",
              "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_verilog_entity.spec.ts",
              "file": "/tests/parser/parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check entity.\"",
                  "fullTitle": "Check entity Verilog Check entity. \"before all\" hook in \"Check entity.\"",
                  "timedOut": false,
                  "duration": 206,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();",
                  "err": {},
                  "uuid": "65864acb-f507-4c8e-a1a9-5cc81f243184",
                  "parentUUID": "e131e868-a36c-4bd8-b224-197d79d2e3e6",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check name",
                  "fullTitle": "Check entity Verilog Check entity. Check name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.name, 'test_entity_name');",
                  "err": {},
                  "uuid": "b6c522fb-2620-4d85-8bc9-bca6c7865258",
                  "parentUUID": "e131e868-a36c-4bd8-b224-197d79d2e3e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check type is entity",
                  "fullTitle": "Check entity Verilog Check entity. Check type is entity",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.get_hdl_type(), common.TYPE_HDL_ELEMENT.ENTITY);",
                  "err": {},
                  "uuid": "dabd98b2-9bb6-4a7d-938e-fecdf6a088a5",
                  "parentUUID": "e131e868-a36c-4bd8-b224-197d79d2e3e6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b6c522fb-2620-4d85-8bc9-bca6c7865258",
                "dabd98b2-9bb6-4a7d-938e-fecdf6a088a5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "940f19b4-e71b-4c44-83b4-a8836e3aa70e",
              "title": "Check generic.",
              "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_verilog_entity.spec.ts",
              "file": "/tests/parser/parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check generic.\"",
                  "fullTitle": "Check entity Verilog Check generic. \"before all\" hook in \"Check generic.\"",
                  "timedOut": false,
                  "duration": 267,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_generic_array();",
                  "err": {},
                  "uuid": "fa9e56b3-ff1b-477e-973d-f0ba06d4210a",
                  "parentUUID": "940f19b4-e71b-4c44-83b4-a8836e3aa70e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check entity Verilog Check generic. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"a\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: \"8\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "1e49a5eb-9460-4e47-bb13-b848b23c86f9",
                  "parentUUID": "940f19b4-e71b-4c44-83b4-a8836e3aa70e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check with default value",
                  "fullTitle": "Check entity Verilog Check generic. Check with default value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"b\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: \"9\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "c3fa6406-298a-43a7-8c98-4d9bc280b365",
                  "parentUUID": "940f19b4-e71b-4c44-83b4-a8836e3aa70e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multiple declarations and default value in one line 0",
                  "fullTitle": "Check entity Verilog Check generic. Check multiple declarations and default value in one line 0",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"c\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: \"10\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "da23ef27-ad24-4627-a5a5-35a2d1a0a7e8",
                  "parentUUID": "940f19b4-e71b-4c44-83b4-a8836e3aa70e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multiple declarations and default value in one line 1",
                  "fullTitle": "Check entity Verilog Check generic. Check multiple declarations and default value in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[3];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"d\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: \"11\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "eb89c64f-6afd-40ae-96f5-0322783718f9",
                  "parentUUID": "940f19b4-e71b-4c44-83b4-a8836e3aa70e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1e49a5eb-9460-4e47-bb13-b848b23c86f9",
                "c3fa6406-298a-43a7-8c98-4d9bc280b365",
                "da23ef27-ad24-4627-a5a5-35a2d1a0a7e8",
                "eb89c64f-6afd-40ae-96f5-0322783718f9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d3ff9de2-552e-48e6-bcb9-d0358f8f7fd5",
              "title": "Check port.",
              "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_verilog_entity.spec.ts",
              "file": "/tests/parser/parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check port.\"",
                  "fullTitle": "Check entity Verilog Check port. \"before all\" hook in \"Check port.\"",
                  "timedOut": false,
                  "duration": 199,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_port_array();",
                  "err": {},
                  "uuid": "f5901cc4-58b3-4f18-9693-be9cf3f98633",
                  "parentUUID": "d3ff9de2-552e-48e6-bcb9-d0358f8f7fd5",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check input port",
                  "fullTitle": "Check entity Verilog Check port. Check input port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"e\",\n        description: \"\"\n    },\n    direction: \"input\",\n    default_value: \"\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "08d3f4e2-3baa-4765-a0ec-d8f4c11f39bd",
                  "parentUUID": "d3ff9de2-552e-48e6-bcb9-d0358f8f7fd5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check output port",
                  "fullTitle": "Check entity Verilog Check port. Check output port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"f\",\n        description: \"\"\n    },\n    direction: \"output\",\n    default_value: \"\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "ca6e4fb5-3c32-41cb-b158-8b70f092df10",
                  "parentUUID": "d3ff9de2-552e-48e6-bcb9-d0358f8f7fd5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check input reg port",
                  "fullTitle": "Check entity Verilog Check port. Check input reg port",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"g\",\n        description: \"\"\n    },\n    direction: \"input\",\n    default_value: \"\",\n    type: \"\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "a629c9f3-3654-4c9b-9c14-3c1a72147773",
                  "parentUUID": "d3ff9de2-552e-48e6-bcb9-d0358f8f7fd5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check input wire port",
                  "fullTitle": "Check entity Verilog Check port. Check input wire port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[3];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"h\",\n        description: \"\"\n    },\n    direction: \"input\",\n    default_value: \"\",\n    type: \"wire\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "cbf62e5a-0cf5-45a7-9d55-040cf5e582d6",
                  "parentUUID": "d3ff9de2-552e-48e6-bcb9-d0358f8f7fd5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check input multiple reg array 0",
                  "fullTitle": "Check entity Verilog Check port. Check input multiple reg array 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[4];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"i\",\n        description: \"\"\n    },\n    direction: \"input\",\n    default_value: \"\",\n    type: \"[7:0]\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "4ab35f92-3134-4e8f-a0b6-9f88c40fa861",
                  "parentUUID": "d3ff9de2-552e-48e6-bcb9-d0358f8f7fd5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check input multiple reg array 1",
                  "fullTitle": "Check entity Verilog Check port. Check input multiple reg array 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "this.skip();\nconst actual = element_array[5];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"j\",\n        description: \"\"\n    },\n    direction: \"input\",\n    default_value: \"\",\n    type: \"[7:0]\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "15f530c4-06a1-4d54-b45c-8416b9897379",
                  "parentUUID": "d3ff9de2-552e-48e6-bcb9-d0358f8f7fd5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check input wire array",
                  "fullTitle": "Check entity Verilog Check port. Check input wire array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[6];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"k\",\n        description: \"\"\n    },\n    direction: \"input\",\n    default_value: \"\",\n    type: \"wire [9:0]\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "4902ce2c-2ebc-43a7-be47-df853249b4e7",
                  "parentUUID": "d3ff9de2-552e-48e6-bcb9-d0358f8f7fd5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check output wire array",
                  "fullTitle": "Check entity Verilog Check port. Check output wire array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[7];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"l\",\n        description: \"\"\n    },\n    direction: \"output\",\n    default_value: \"\",\n    type: \"wire [9:0]\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "9b8b229c-d02f-485c-b19e-06465b66d7b0",
                  "parentUUID": "d3ff9de2-552e-48e6-bcb9-d0358f8f7fd5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "08d3f4e2-3baa-4765-a0ec-d8f4c11f39bd",
                "ca6e4fb5-3c32-41cb-b158-8b70f092df10",
                "a629c9f3-3654-4c9b-9c14-3c1a72147773",
                "cbf62e5a-0cf5-45a7-9d55-040cf5e582d6",
                "4ab35f92-3134-4e8f-a0b6-9f88c40fa861",
                "4902ce2c-2ebc-43a7-be47-df853249b4e7",
                "9b8b229c-d02f-485c-b19e-06465b66d7b0"
              ],
              "failures": [],
              "pending": [
                "15f530c4-06a1-4d54-b45c-8416b9897379"
              ],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9ba7b0cf-a192-471e-bf62-c4773877f9ba",
              "title": "Check signal.",
              "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_verilog_entity.spec.ts",
              "file": "/tests/parser/parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check signal.\"",
                  "fullTitle": "Check entity Verilog Check signal. \"before all\" hook in \"Check signal.\"",
                  "timedOut": false,
                  "duration": 254,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_signal_array();",
                  "err": {},
                  "uuid": "fcc6a133-451e-4a1a-9a13-a98f84b714bf",
                  "parentUUID": "9ba7b0cf-a192-471e-bf62-c4773877f9ba",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check entity Verilog Check signal. Check simple",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"m\",\n        description: \"\"\n    },\n    type: \"wire\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "08cbcdd2-73f3-4d46-994f-861977a4a2f4",
                  "parentUUID": "9ba7b0cf-a192-471e-bf62-c4773877f9ba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 0",
                  "fullTitle": "Check entity Verilog Check signal. Check multimple declaration in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"n\",\n        description: \"\"\n    },\n    type: \"wire\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "53ead601-fd53-44e3-ad3f-5881d87027e4",
                  "parentUUID": "9ba7b0cf-a192-471e-bf62-c4773877f9ba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 1",
                  "fullTitle": "Check entity Verilog Check signal. Check multimple declaration in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"p\",\n        description: \"\"\n    },\n    type: \"wire\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "ed69cc5b-c1a9-48ed-8484-537bf7e3e918",
                  "parentUUID": "9ba7b0cf-a192-471e-bf62-c4773877f9ba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check array",
                  "fullTitle": "Check entity Verilog Check signal. Check array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[3];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"q\",\n        description: \"\"\n    },\n    type: \"reg [1:0]\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "b49f6fc9-8325-416d-aca7-04804ab2d53e",
                  "parentUUID": "9ba7b0cf-a192-471e-bf62-c4773877f9ba",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "08cbcdd2-73f3-4d46-994f-861977a4a2f4",
                "53ead601-fd53-44e3-ad3f-5881d87027e4",
                "ed69cc5b-c1a9-48ed-8484-537bf7e3e918",
                "b49f6fc9-8325-416d-aca7-04804ab2d53e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a52b8a18-0927-49ec-8d18-e171c7680cb0",
              "title": "Check constant.",
              "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_verilog_entity.spec.ts",
              "file": "/tests/parser/parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check constant.\"",
                  "fullTitle": "Check entity Verilog Check constant. \"before all\" hook in \"Check constant.\"",
                  "timedOut": false,
                  "duration": 200,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_constant_array();",
                  "err": {},
                  "uuid": "2303b46e-e9fb-4499-a10c-d1e778297c0e",
                  "parentUUID": "a52b8a18-0927-49ec-8d18-e171c7680cb0",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check entity Verilog Check constant. Check simple",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"r\",\n        description: \"\"\n    },\n    type: \"\",\n    default_value: \"2\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "44be7665-2d94-460f-a7f5-6edf5063e847",
                  "parentUUID": "a52b8a18-0927-49ec-8d18-e171c7680cb0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "44be7665-2d94-460f-a7f5-6edf5063e847"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "87a51f67-9000-423f-ac5b-3bf23dbcc862",
              "title": "Check function.",
              "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_verilog_entity.spec.ts",
              "file": "/tests/parser/parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check function.\"",
                  "fullTitle": "Check entity Verilog Check function. \"before all\" hook in \"Check function.\"",
                  "timedOut": false,
                  "duration": 246,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_function_array();",
                  "err": {},
                  "uuid": "f2c03373-a50f-41f0-953f-7d745f0026cf",
                  "parentUUID": "87a51f67-9000-423f-ac5b-3bf23dbcc862",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check with arguments and return",
                  "fullTitle": "Check entity Verilog Check function. Check with arguments and return",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.FUNCTION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"sum\",\n        description: \"\"\n    },\n    type: \"\",\n    arguments: \"(input [7:0] a, b;)\",\n    return: \"return ([7:0])\"\n};\ncheck_function(actual, expected);",
                  "err": {},
                  "uuid": "fe6299da-ed8f-4c26-8f0c-486bde9964b1",
                  "parentUUID": "87a51f67-9000-423f-ac5b-3bf23dbcc862",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fe6299da-ed8f-4c26-8f0c-486bde9964b1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "30bc6e15-410c-4d33-8f1f-91fb76bedf75",
              "title": "Check always.",
              "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_verilog_entity.spec.ts",
              "file": "/tests/parser/parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check always.\"",
                  "fullTitle": "Check entity Verilog Check always. \"before all\" hook in \"Check always.\"",
                  "timedOut": false,
                  "duration": 299,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_process_array();",
                  "err": {},
                  "uuid": "5c94d781-8d37-488e-9af1-3d75e1c33278",
                  "parentUUID": "30bc6e15-410c-4d33-8f1f-91fb76bedf75",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check always with sensitive list and label",
                  "fullTitle": "Check entity Verilog Check always. Check always with sensitive list and label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"label_0\",\n        description: \"\"\n    },\n    sens_list: \"@(posedge a)\",\n    type: \"always\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "e5d8a0cc-74a1-41cb-ae15-6ccffa2b06f3",
                  "parentUUID": "30bc6e15-410c-4d33-8f1f-91fb76bedf75",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check always_comb without sensitive list and label",
                  "fullTitle": "Check entity Verilog Check always. Check always_comb without sensitive list and label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"unnamed\",\n        description: \"\"\n    },\n    sens_list: \"\",\n    type: \"always_comb\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "3ac33c22-9877-4d2b-a268-b67472f60c52",
                  "parentUUID": "30bc6e15-410c-4d33-8f1f-91fb76bedf75",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check always_ff without sensitive list and with label",
                  "fullTitle": "Check entity Verilog Check always. Check always_ff without sensitive list and with label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"label_1\",\n        description: \"\"\n    },\n    sens_list: \"\",\n    type: \"always_ff\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "56df6cff-bccf-4e05-ac66-d85c04ee2b56",
                  "parentUUID": "30bc6e15-410c-4d33-8f1f-91fb76bedf75",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check always_latch without sensitive list and label",
                  "fullTitle": "Check entity Verilog Check always. Check always_latch without sensitive list and label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[3];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"unnamed\",\n        description: \"\"\n    },\n    sens_list: \"\",\n    type: \"always_latch\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "80a649cf-3839-4d4b-a394-d6e147d4515e",
                  "parentUUID": "30bc6e15-410c-4d33-8f1f-91fb76bedf75",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e5d8a0cc-74a1-41cb-ae15-6ccffa2b06f3",
                "3ac33c22-9877-4d2b-a268-b67472f60c52",
                "56df6cff-bccf-4e05-ac66-d85c04ee2b56",
                "80a649cf-3839-4d4b-a394-d6e147d4515e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7bd45f39-168e-4b1c-82aa-7b00276c9599",
              "title": "Check instantiation.",
              "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_verilog_entity.spec.ts",
              "file": "/tests/parser/parser_verilog_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check instantiation.\"",
                  "fullTitle": "Check entity Verilog Check instantiation. \"before all\" hook in \"Check instantiation.\"",
                  "timedOut": false,
                  "duration": 347,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_instantiation_array();",
                  "err": {},
                  "uuid": "a8fd288e-0b3b-44c0-be76-ac6c7f5dc979",
                  "parentUUID": "7bd45f39-168e-4b1c-82aa-7b00276c9599",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check with label",
                  "fullTitle": "Check entity Verilog Check instantiation. Check with label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.INSTANTIATION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"test_entity_name_dut\",\n        description: \"\"\n    },\n    type: \"test_entity_name\"\n};\ncheck_instantiation(actual, expected);",
                  "err": {},
                  "uuid": "fe3a9213-089f-4092-a5cd-1b24a0a4705c",
                  "parentUUID": "7bd45f39-168e-4b1c-82aa-7b00276c9599",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fe3a9213-089f-4092-a5cd-1b24a0a4705c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8883c748-9ab3-4cbc-bbe7-2e7aa71c5950",
          "title": "Check interface declaration Verilog",
          "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_verilog_interface.spec.ts",
          "file": "/tests/parser/parser_verilog_interface.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b82ceea2-c07b-4795-880e-a75322577822",
              "title": "Check global.",
              "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_verilog_interface.spec.ts",
              "file": "/tests/parser/parser_verilog_interface.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check global.\"",
                  "fullTitle": "Check interface declaration Verilog Check global. \"before all\" hook in \"Check global.\"",
                  "timedOut": false,
                  "duration": 251,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();",
                  "err": {},
                  "uuid": "97b14a39-7b25-4de5-8408-a1ad8279fc9d",
                  "parentUUID": "b82ceea2-c07b-4795-880e-a75322577822",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check name",
                  "fullTitle": "Check interface declaration Verilog Check global. Check name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.name, '');",
                  "err": {},
                  "uuid": "2d7a7acf-df1d-4400-b1c2-513f53c8918e",
                  "parentUUID": "b82ceea2-c07b-4795-880e-a75322577822",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check type is interface declaration",
                  "fullTitle": "Check interface declaration Verilog Check global. Check type is interface declaration",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.get_hdl_type(), common.TYPE_HDL_ELEMENT.INTERFACE_DECLARATION);",
                  "err": {},
                  "uuid": "10b1059e-7d80-4e2d-9c4d-a01e7d133bfd",
                  "parentUUID": "b82ceea2-c07b-4795-880e-a75322577822",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2d7a7acf-df1d-4400-b1c2-513f53c8918e",
                "10b1059e-7d80-4e2d-9c4d-a01e7d133bfd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b2c82ffa-b2f3-4b17-bec4-3d63550cd3ac",
              "title": "Check interfaces.",
              "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_verilog_interface.spec.ts",
              "file": "/tests/parser/parser_verilog_interface.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check interfaces.\"",
                  "fullTitle": "Check interface declaration Verilog Check interfaces. \"before all\" hook in \"Check interfaces.\"",
                  "timedOut": false,
                  "duration": 345,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_interface_array();",
                  "err": {},
                  "uuid": "c0c035c3-8285-4025-bd35-d5ec792da67d",
                  "parentUUID": "b2c82ffa-b2f3-4b17-bec4-3d63550cd3ac",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check interface 0",
                  "fullTitle": "Check interface declaration Verilog Check interfaces. Check interface 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "check_interface(element_array[0], \"interface_0\");",
                  "err": {},
                  "uuid": "dddfd532-7fec-4d76-a95c-c95099276d04",
                  "parentUUID": "b2c82ffa-b2f3-4b17-bec4-3d63550cd3ac",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check interface 1",
                  "fullTitle": "Check interface declaration Verilog Check interfaces. Check interface 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "check_interface(element_array[1], \"interface_1\");",
                  "err": {},
                  "uuid": "72e649ce-2e2b-4574-9b6f-a81bdd497f4a",
                  "parentUUID": "b2c82ffa-b2f3-4b17-bec4-3d63550cd3ac",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dddfd532-7fec-4d76-a95c-c95099276d04",
                "72e649ce-2e2b-4574-9b6f-a81bdd497f4a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "16d97302-02d5-4200-ad11-d77e41078b77",
              "title": "Check type.",
              "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_verilog_interface.spec.ts",
              "file": "/tests/parser/parser_verilog_interface.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check type.\"",
                  "fullTitle": "Check interface declaration Verilog Check type. \"before all\" hook in \"Check type.\"",
                  "timedOut": false,
                  "duration": 241,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_type_array();",
                  "err": {},
                  "uuid": "da654ee5-ed09-43db-9eca-6ebbc23530c2",
                  "parentUUID": "16d97302-02d5-4200-ad11-d77e41078b77",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check interface declaration Verilog Check type. Check simple",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst logic_item_0 = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.LOGIC,\n    info: {\n        position: {\n            line: 9,\n            column: 0\n        },\n        name: \"l_0\",\n        description: \"\"\n    },\n    type: \"logic\"\n};\nconst logic_item_1 = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.LOGIC,\n    info: {\n        position: {\n            line: 10,\n            column: 0\n        },\n        name: \"l_1\",\n        description: \"\"\n    },\n    type: \"logic\"\n};\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.TYPE,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"slot_t\",\n        description: \"\"\n    },\n    type: \"\",\n    logic: [logic_item_0, logic_item_1]\n};\ncheck_type(actual, expected);",
                  "err": {},
                  "uuid": "a72630f8-52cf-434a-8c16-9cda50d88327",
                  "parentUUID": "16d97302-02d5-4200-ad11-d77e41078b77",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a72630f8-52cf-434a-8c16-9cda50d88327"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "aadf1e42-b13c-4406-8b58-0d1e721c2399",
          "title": "Check package Verilog",
          "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_verilog_package.spec.ts",
          "file": "/tests/parser/parser_verilog_package.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "dd5b2ceb-aa29-4731-8e44-368aec50d86b",
              "title": "Check package.",
              "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_verilog_package.spec.ts",
              "file": "/tests/parser/parser_verilog_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check package.\"",
                  "fullTitle": "Check package Verilog Check package. \"before all\" hook in \"Check package.\"",
                  "timedOut": false,
                  "duration": 328,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();",
                  "err": {},
                  "uuid": "397d5807-4921-403a-b904-c287af3673ba",
                  "parentUUID": "dd5b2ceb-aa29-4731-8e44-368aec50d86b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check name",
                  "fullTitle": "Check package Verilog Check package. Check name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.name, 'test_pkg');",
                  "err": {},
                  "uuid": "08603ad7-0a60-476d-9326-950758b39e6d",
                  "parentUUID": "dd5b2ceb-aa29-4731-8e44-368aec50d86b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check type is package",
                  "fullTitle": "Check package Verilog Check package. Check type is package",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.get_hdl_type(), common.TYPE_HDL_ELEMENT.PACKAGE);",
                  "err": {},
                  "uuid": "232b333b-4533-4f4f-9957-babc1bff4317",
                  "parentUUID": "dd5b2ceb-aa29-4731-8e44-368aec50d86b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "08603ad7-0a60-476d-9326-950758b39e6d",
                "232b333b-4533-4f4f-9957-babc1bff4317"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e8f1f178-a955-4949-bfd3-2d70ef77fd72",
              "title": "Check constant.",
              "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_verilog_package.spec.ts",
              "file": "/tests/parser/parser_verilog_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check constant.\"",
                  "fullTitle": "Check package Verilog Check constant. \"before all\" hook in \"Check constant.\"",
                  "timedOut": false,
                  "duration": 249,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_constant_array();",
                  "err": {},
                  "uuid": "8a2035e1-0941-4792-b83c-454ccf1c05c1",
                  "parentUUID": "e8f1f178-a955-4949-bfd3-2d70ef77fd72",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check package Verilog Check constant. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"a\",\n        description: \"\"\n    },\n    type: \"\",\n    default_value: \"8\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "52fa63d2-6107-4ec1-9e2c-711ec25277e0",
                  "parentUUID": "e8f1f178-a955-4949-bfd3-2d70ef77fd72",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check simple",
                  "fullTitle": "Check package Verilog Check constant. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"b\",\n        description: \"\"\n    },\n    type: \"\",\n    default_value: \"9\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "41b32cbc-dc87-43e3-b725-7623b50aa07d",
                  "parentUUID": "e8f1f178-a955-4949-bfd3-2d70ef77fd72",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check simple",
                  "fullTitle": "Check package Verilog Check constant. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"c\",\n        description: \"\"\n    },\n    type: \"\",\n    default_value: \"10\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "e719c862-362b-4d25-94d2-067b173cc7c3",
                  "parentUUID": "e8f1f178-a955-4949-bfd3-2d70ef77fd72",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "52fa63d2-6107-4ec1-9e2c-711ec25277e0",
                "41b32cbc-dc87-43e3-b725-7623b50aa07d",
                "e719c862-362b-4d25-94d2-067b173cc7c3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "896a7d31-08b3-4186-b3cf-ac72c0c7d1e0",
              "title": "Check function.",
              "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_verilog_package.spec.ts",
              "file": "/tests/parser/parser_verilog_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check function.\"",
                  "fullTitle": "Check package Verilog Check function. \"before all\" hook in \"Check function.\"",
                  "timedOut": false,
                  "duration": 333,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_function_array();",
                  "err": {},
                  "uuid": "071778c1-6823-45e5-a9c3-4127d9f58516",
                  "parentUUID": "896a7d31-08b3-4186-b3cf-ac72c0c7d1e0",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check with arguments and return",
                  "fullTitle": "Check package Verilog Check function. Check with arguments and return",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.FUNCTION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"sum\",\n        description: \"\"\n    },\n    type: \"\",\n    arguments: \"(input [7:0] a, b;)\",\n    return: \"return ([7:0])\"\n};\ncheck_function(actual, expected);",
                  "err": {},
                  "uuid": "72f81283-b3a2-48f4-b28b-1dbdc43559ad",
                  "parentUUID": "896a7d31-08b3-4186-b3cf-ac72c0c7d1e0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "72f81283-b3a2-48f4-b28b-1dbdc43559ad"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2199248a-4528-4afa-9e03-49d9b45f4053",
              "title": "Check type.",
              "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_verilog_package.spec.ts",
              "file": "/tests/parser/parser_verilog_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check type.\"",
                  "fullTitle": "Check package Verilog Check type. \"before all\" hook in \"Check type.\"",
                  "timedOut": false,
                  "duration": 251,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_type_array();",
                  "err": {},
                  "uuid": "adb484db-3920-4374-99ea-6a8b65009372",
                  "parentUUID": "2199248a-4528-4afa-9e03-49d9b45f4053",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check package Verilog Check type. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.TYPE,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"op_list\",\n        description: \"\"\n    },\n    type: \"enum {ADD, SUB}\",\n    logic: []\n};\ncheck_type(actual, expected);",
                  "err": {},
                  "uuid": "00d4e827-94bb-4923-8ad8-7ff29b9dc511",
                  "parentUUID": "2199248a-4528-4afa-9e03-49d9b45f4053",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check simple",
                  "fullTitle": "Check package Verilog Check type. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.TYPE,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"port_t\",\n        description: \"\"\n    },\n    type: \"struct {logic [4:0] a, b; logic [9:0] m;}\",\n    logic: []\n};\ncheck_type(actual, expected);",
                  "err": {},
                  "uuid": "be418ad5-3be1-4abd-85bc-907217a8bb3b",
                  "parentUUID": "2199248a-4528-4afa-9e03-49d9b45f4053",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "00d4e827-94bb-4923-8ad8-7ff29b9dc511",
                "be418ad5-3be1-4abd-85bc-907217a8bb3b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f5aab493-1bae-4224-bf18-b464878e97de",
          "title": "Check entity VHDL",
          "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_vhdl_entity.spec.ts",
          "file": "/tests/parser/parser_vhdl_entity.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9793a4f0-9215-47eb-a9a7-ce21c8f2d37a",
              "title": "Check entity.",
              "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check entity.\"",
                  "fullTitle": "Check entity VHDL Check entity. \"before all\" hook in \"Check entity.\"",
                  "timedOut": false,
                  "duration": 29,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();",
                  "err": {},
                  "uuid": "26a5550b-dd67-4ec6-ba4c-280bd4d45c3a",
                  "parentUUID": "9793a4f0-9215-47eb-a9a7-ce21c8f2d37a",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check name",
                  "fullTitle": "Check entity VHDL Check entity. Check name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.name, 'test_entity_name');",
                  "err": {},
                  "uuid": "0fe9a5de-11f5-4dd1-a023-488f3fa97490",
                  "parentUUID": "9793a4f0-9215-47eb-a9a7-ce21c8f2d37a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check type is entity",
                  "fullTitle": "Check entity VHDL Check entity. Check type is entity",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.get_hdl_type(), common.TYPE_HDL_ELEMENT.ENTITY);",
                  "err": {},
                  "uuid": "2fd9a010-a95c-4e9d-8505-8004c9dee50d",
                  "parentUUID": "9793a4f0-9215-47eb-a9a7-ce21c8f2d37a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0fe9a5de-11f5-4dd1-a023-488f3fa97490",
                "2fd9a010-a95c-4e9d-8505-8004c9dee50d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d50d62a2-6a23-48a9-957f-f62c0515316c",
              "title": "Check generic.",
              "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check generic.\"",
                  "fullTitle": "Check entity VHDL Check generic. \"before all\" hook in \"Check generic.\"",
                  "timedOut": false,
                  "duration": 20,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_generic_array();",
                  "err": {},
                  "uuid": "dba3e8f6-9cd9-436b-90b1-3f465001f1d7",
                  "parentUUID": "d50d62a2-6a23-48a9-957f-f62c0515316c",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check entity VHDL Check generic. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"a\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: \"\",\n    type: \"integer\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "9b68ccc6-9fb3-4a19-a345-a0dae8026418",
                  "parentUUID": "d50d62a2-6a23-48a9-957f-f62c0515316c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check with default value",
                  "fullTitle": "Check entity VHDL Check generic. Check with default value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"b\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: \"'1'\",\n    type: \"std_logic\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "7e7c88bc-ae5f-4b76-9ae6-1f4dca18497b",
                  "parentUUID": "d50d62a2-6a23-48a9-957f-f62c0515316c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multiple declarations and default value in one line 0",
                  "fullTitle": "Check entity VHDL Check generic. Check multiple declarations and default value in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"c\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: '\"1\"',\n    type: \"std_logic_vector(1 downto 0)\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "bd101b09-b3d0-4da2-833f-b0f22328238c",
                  "parentUUID": "d50d62a2-6a23-48a9-957f-f62c0515316c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multiple declarations and default value in one line 1",
                  "fullTitle": "Check entity VHDL Check generic. Check multiple declarations and default value in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[3];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"d\",\n        description: \"\"\n    },\n    direction: \"\",\n    default_value: '\"1\"',\n    type: \"std_logic_vector(1 downto 0)\",\n    subtype: \"\"\n};\ncheck_generic(actual, expected);",
                  "err": {},
                  "uuid": "4b667d0a-2dce-4879-b4b9-d8083c025b43",
                  "parentUUID": "d50d62a2-6a23-48a9-957f-f62c0515316c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9b68ccc6-9fb3-4a19-a345-a0dae8026418",
                "7e7c88bc-ae5f-4b76-9ae6-1f4dca18497b",
                "bd101b09-b3d0-4da2-833f-b0f22328238c",
                "4b667d0a-2dce-4879-b4b9-d8083c025b43"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3b1792fb-35f2-46e7-a83b-6ad339ddfd00",
              "title": "Check port.",
              "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check port.\"",
                  "fullTitle": "Check entity VHDL Check port. \"before all\" hook in \"Check port.\"",
                  "timedOut": false,
                  "duration": 21,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_port_array();",
                  "err": {},
                  "uuid": "71806978-cf07-4066-8aee-3ccd1e013af4",
                  "parentUUID": "3b1792fb-35f2-46e7-a83b-6ad339ddfd00",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check input port",
                  "fullTitle": "Check entity VHDL Check port. Check input port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"x\",\n        description: \"\"\n    },\n    direction: \"in\",\n    default_value: \"\",\n    type: \"std_logic\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "35173900-7ffc-4075-81f9-56b6bfcf0fff",
                  "parentUUID": "3b1792fb-35f2-46e7-a83b-6ad339ddfd00",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check output port",
                  "fullTitle": "Check entity VHDL Check port. Check output port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"y\",\n        description: \"\"\n    },\n    direction: \"out\",\n    default_value: \"\",\n    type: \"std_logic\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "c42aa448-2495-43a4-a9c0-dda9b99f7ac5",
                  "parentUUID": "3b1792fb-35f2-46e7-a83b-6ad339ddfd00",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check inout port",
                  "fullTitle": "Check entity VHDL Check port. Check inout port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"z\",\n        description: \"\"\n    },\n    direction: \"inout\",\n    default_value: \"\",\n    type: \"std_logic\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "6f26f03c-2c53-4535-bb5c-3b7b1ab4dc0b",
                  "parentUUID": "3b1792fb-35f2-46e7-a83b-6ad339ddfd00",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check std_logic_vector port",
                  "fullTitle": "Check entity VHDL Check port. Check std_logic_vector port",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[3];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"m\",\n        description: \"\"\n    },\n    direction: \"in\",\n    default_value: \"\",\n    type: \"std_logic_vector(31 downto 0)\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "525c7761-a9b9-4a51-942d-62ce0dd1fa6b",
                  "parentUUID": "3b1792fb-35f2-46e7-a83b-6ad339ddfd00",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check port with default value",
                  "fullTitle": "Check entity VHDL Check port. Check port with default value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[4];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"b\",\n        description: \"\"\n    },\n    direction: \"in\",\n    default_value: '\"0010\"',\n    type: \"std_logic_vector(31 downto 0)\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "059ba0d4-fd8e-4900-acfc-f104789d1854",
                  "parentUUID": "3b1792fb-35f2-46e7-a83b-6ad339ddfd00",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multi declaration in one line 0",
                  "fullTitle": "Check entity VHDL Check port. Check multi declaration in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[5];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"c\",\n        description: \"\"\n    },\n    direction: \"in\",\n    default_value: \"'1'\",\n    type: \"std_logic\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "35ba1bde-2612-4fc5-9193-fcc5a4477285",
                  "parentUUID": "3b1792fb-35f2-46e7-a83b-6ad339ddfd00",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multi declaration in one line 1",
                  "fullTitle": "Check entity VHDL Check port. Check multi declaration in one line 1",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[6];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PORT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"d\",\n        description: \"\"\n    },\n    direction: \"in\",\n    default_value: \"'1'\",\n    type: \"std_logic\",\n    subtype: \"\"\n};\ncheck_port(actual, expected);",
                  "err": {},
                  "uuid": "2b97302e-472d-44bd-b2c2-546566f7ef33",
                  "parentUUID": "3b1792fb-35f2-46e7-a83b-6ad339ddfd00",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "35173900-7ffc-4075-81f9-56b6bfcf0fff",
                "c42aa448-2495-43a4-a9c0-dda9b99f7ac5",
                "6f26f03c-2c53-4535-bb5c-3b7b1ab4dc0b",
                "525c7761-a9b9-4a51-942d-62ce0dd1fa6b",
                "059ba0d4-fd8e-4900-acfc-f104789d1854",
                "35ba1bde-2612-4fc5-9193-fcc5a4477285",
                "2b97302e-472d-44bd-b2c2-546566f7ef33"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dd7a514d-2f69-4b2b-a007-1f183e7cd145",
              "title": "Check signal.",
              "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check signal.\"",
                  "fullTitle": "Check entity VHDL Check signal. \"before all\" hook in \"Check signal.\"",
                  "timedOut": false,
                  "duration": 23,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_signal_array();",
                  "err": {},
                  "uuid": "99832197-5f00-45f2-a9fe-221b1cd26922",
                  "parentUUID": "dd7a514d-2f69-4b2b-a007-1f183e7cd145",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check entity VHDL Check signal. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"a\",\n        description: \"\"\n    },\n    type: \"integer\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "f9c6bfe0-eef4-4758-ae9e-715cb0c0b206",
                  "parentUUID": "dd7a514d-2f69-4b2b-a007-1f183e7cd145",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 0",
                  "fullTitle": "Check entity VHDL Check signal. Check multimple declaration in one line 0",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"b\",\n        description: \"\"\n    },\n    type: \"std_logic_vector(1 downto 0)\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "d960ad6a-ba85-4355-8138-513b229968ee",
                  "parentUUID": "dd7a514d-2f69-4b2b-a007-1f183e7cd145",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 1",
                  "fullTitle": "Check entity VHDL Check signal. Check multimple declaration in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"c\",\n        description: \"\"\n    },\n    type: \"std_logic_vector(1 downto 0)\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "6216f863-4890-49ed-b708-958f0ef21f03",
                  "parentUUID": "dd7a514d-2f69-4b2b-a007-1f183e7cd145",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f9c6bfe0-eef4-4758-ae9e-715cb0c0b206",
                "d960ad6a-ba85-4355-8138-513b229968ee",
                "6216f863-4890-49ed-b708-958f0ef21f03"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3213ea0c-74a2-42ec-b79b-c91f8d58b2e1",
              "title": "Check constant.",
              "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check constant.\"",
                  "fullTitle": "Check entity VHDL Check constant. \"before all\" hook in \"Check constant.\"",
                  "timedOut": false,
                  "duration": 22,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_constant_array();",
                  "err": {},
                  "uuid": "876a6f34-888c-420f-8fab-309b4dbb6c99",
                  "parentUUID": "3213ea0c-74a2-42ec-b79b-c91f8d58b2e1",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check multimple declaration in one line 0",
                  "fullTitle": "Check entity VHDL Check constant. Check multimple declaration in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"e\",\n        description: \"\"\n    },\n    type: \"integer\",\n    default_value: \"0\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "fda8aa53-8c14-4f4f-a602-d557bdb7cdcf",
                  "parentUUID": "3213ea0c-74a2-42ec-b79b-c91f8d58b2e1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 1",
                  "fullTitle": "Check entity VHDL Check constant. Check multimple declaration in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"f\",\n        description: \"\"\n    },\n    type: \"integer\",\n    default_value: \"0\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "6dbb7cd2-beff-4fe4-8e84-cbf05a4c3a65",
                  "parentUUID": "3213ea0c-74a2-42ec-b79b-c91f8d58b2e1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fda8aa53-8c14-4f4f-a602-d557bdb7cdcf",
                "6dbb7cd2-beff-4fe4-8e84-cbf05a4c3a65"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ac83073e-2cfd-4763-b29a-859a70193c9b",
              "title": "Check type.",
              "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check type.\"",
                  "fullTitle": "Check entity VHDL Check type. \"before all\" hook in \"Check type.\"",
                  "timedOut": false,
                  "duration": 20,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_type_array();",
                  "err": {},
                  "uuid": "402e1b00-02f5-4536-8e7f-12b830ec9b5a",
                  "parentUUID": "ac83073e-2cfd-4763-b29a-859a70193c9b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check entity VHDL Check type. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.TYPE,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"state_0\",\n        description: \"\"\n    },\n    type: \"(INIT, END)\",\n    logic: []\n};\ncheck_type(actual, expected);",
                  "err": {},
                  "uuid": "63f86d3f-1198-4738-bfc2-2c9f44296ffe",
                  "parentUUID": "ac83073e-2cfd-4763-b29a-859a70193c9b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "63f86d3f-1198-4738-bfc2-2c9f44296ffe"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "87e708aa-450d-44ce-b564-f94f153624e2",
              "title": "Check function.",
              "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check function.\"",
                  "fullTitle": "Check entity VHDL Check function. \"before all\" hook in \"Check function.\"",
                  "timedOut": false,
                  "duration": 19,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_function_array();",
                  "err": {},
                  "uuid": "42bf889d-428c-43fe-ab4f-cc2c676ebbec",
                  "parentUUID": "87e708aa-450d-44ce-b564-f94f153624e2",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check with arguments and return",
                  "fullTitle": "Check entity VHDL Check function. Check with arguments and return",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.FUNCTION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"counter\",\n        description: \"\"\n    },\n    type: \"\",\n    arguments: \"(minutes : integer := 0; seconds : integer := 0)\",\n    return: \"return integer\"\n};\ncheck_function(actual, expected);",
                  "err": {},
                  "uuid": "c530184b-c2f2-497c-948b-96b303f7f428",
                  "parentUUID": "87e708aa-450d-44ce-b564-f94f153624e2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c530184b-c2f2-497c-948b-96b303f7f428"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0278c6ff-8ec1-4177-aef2-bb163214be95",
              "title": "Check process.",
              "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check process.\"",
                  "fullTitle": "Check entity VHDL Check process. \"before all\" hook in \"Check process.\"",
                  "timedOut": false,
                  "duration": 143,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_process_array();",
                  "err": {},
                  "uuid": "9491323e-bbe0-4448-9295-4211d7f723ea",
                  "parentUUID": "0278c6ff-8ec1-4177-aef2-bb163214be95",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check without sensitive list",
                  "fullTitle": "Check entity VHDL Check process. Check without sensitive list",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"label_0\",\n        description: \"\"\n    },\n    sens_list: \"\",\n    type: \"\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "c9c7e585-ee76-4fba-b5c0-79678df8ef80",
                  "parentUUID": "0278c6ff-8ec1-4177-aef2-bb163214be95",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check with sensitive list",
                  "fullTitle": "Check entity VHDL Check process. Check with sensitive list",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"label_1\",\n        description: \"\"\n    },\n    sens_list: \"clk0, reset\",\n    type: \"\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "e9530503-87e5-40a8-a63b-d985cb8de9ed",
                  "parentUUID": "0278c6ff-8ec1-4177-aef2-bb163214be95",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check without label",
                  "fullTitle": "Check entity VHDL Check process. Check without label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.PROCESS,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"unnamed\",\n        description: \"\"\n    },\n    sens_list: \"\",\n    type: \"\"\n};\ncheck_process(actual, expected);",
                  "err": {},
                  "uuid": "b9f6c65d-cf33-4870-b008-dd0d582251ab",
                  "parentUUID": "0278c6ff-8ec1-4177-aef2-bb163214be95",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c9c7e585-ee76-4fba-b5c0-79678df8ef80",
                "e9530503-87e5-40a8-a63b-d985cb8de9ed",
                "b9f6c65d-cf33-4870-b008-dd0d582251ab"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "28faa8a3-433f-4cc5-bd93-6c294cca1688",
              "title": "Check instantiation.",
              "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_vhdl_entity.spec.ts",
              "file": "/tests/parser/parser_vhdl_entity.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check instantiation.\"",
                  "fullTitle": "Check entity VHDL Check instantiation. \"before all\" hook in \"Check instantiation.\"",
                  "timedOut": false,
                  "duration": 25,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_instantiation_array();",
                  "err": {},
                  "uuid": "a7dd2dd9-951f-4e61-8ebd-c5008bd7b9e4",
                  "parentUUID": "28faa8a3-433f-4cc5-bd93-6c294cca1688",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check with label",
                  "fullTitle": "Check entity VHDL Check instantiation. Check with label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.INSTANTIATION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"uut_0\",\n        description: \"\"\n    },\n    type: \"half_adder\"\n};\ncheck_instantiation(actual, expected);",
                  "err": {},
                  "uuid": "d0eb45b8-bea6-468f-b989-155c99c90d4f",
                  "parentUUID": "28faa8a3-433f-4cc5-bd93-6c294cca1688",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check without label",
                  "fullTitle": "Check entity VHDL Check instantiation. Check without label",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common.TYPE_HDL_ELEMENT.INSTANTIATION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"unnamed\",\n        description: \"\"\n    },\n    type: \"half_adder\"\n};\ncheck_instantiation(actual, expected);",
                  "err": {},
                  "uuid": "c7524906-2073-4932-a0f1-819825b8d837",
                  "parentUUID": "28faa8a3-433f-4cc5-bd93-6c294cca1688",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d0eb45b8-bea6-468f-b989-155c99c90d4f",
                "c7524906-2073-4932-a0f1-819825b8d837"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9a65bdfd-2fb5-4f52-a9db-17ab2ea6af8a",
          "title": "Check package VHDL",
          "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_vhdl_package.spec.ts",
          "file": "/tests/parser/parser_vhdl_package.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "37242550-a81a-4459-b69a-ceb4549200a4",
              "title": "Check pacakge.",
              "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_vhdl_package.spec.ts",
              "file": "/tests/parser/parser_vhdl_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check pacakge.\"",
                  "fullTitle": "Check package VHDL Check pacakge. \"before all\" hook in \"Check pacakge.\"",
                  "timedOut": false,
                  "duration": 19,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();",
                  "err": {},
                  "uuid": "52c1d0ef-f87f-4a4b-ad1d-1a0ba12424c5",
                  "parentUUID": "37242550-a81a-4459-b69a-ceb4549200a4",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check name",
                  "fullTitle": "Check package VHDL Check pacakge. Check name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.name, 'test_package_name');",
                  "err": {},
                  "uuid": "d5cc8efe-a5a3-40e5-a269-44829dc15c64",
                  "parentUUID": "37242550-a81a-4459-b69a-ceb4549200a4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check type is entity",
                  "fullTitle": "Check package VHDL Check pacakge. Check type is entity",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, assert_1.equal)(result.get_hdl_type(), common_1.TYPE_HDL_ELEMENT.PACKAGE);",
                  "err": {},
                  "uuid": "bd985726-aea8-4d72-91f9-b84a75fe292b",
                  "parentUUID": "37242550-a81a-4459-b69a-ceb4549200a4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d5cc8efe-a5a3-40e5-a269-44829dc15c64",
                "bd985726-aea8-4d72-91f9-b84a75fe292b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "df04f727-f49e-4dcd-8111-35d062fa71e9",
              "title": "Check signal.",
              "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_vhdl_package.spec.ts",
              "file": "/tests/parser/parser_vhdl_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check signal.\"",
                  "fullTitle": "Check package VHDL Check signal. \"before all\" hook in \"Check signal.\"",
                  "timedOut": false,
                  "duration": 20,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_signal_array();",
                  "err": {},
                  "uuid": "59c1f507-0fe2-42d2-ab84-102571a87e94",
                  "parentUUID": "df04f727-f49e-4dcd-8111-35d062fa71e9",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check package VHDL Check signal. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"a\",\n        description: \"\"\n    },\n    type: \"integer\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "d64ba060-e775-4cf7-b5ed-6c8c94d8595c",
                  "parentUUID": "df04f727-f49e-4dcd-8111-35d062fa71e9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 0",
                  "fullTitle": "Check package VHDL Check signal. Check multimple declaration in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"b\",\n        description: \"\"\n    },\n    type: \"std_logic_vector(1 downto 0)\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "3d6f691e-8bc3-485a-a833-ced4511a8011",
                  "parentUUID": "df04f727-f49e-4dcd-8111-35d062fa71e9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 1",
                  "fullTitle": "Check package VHDL Check signal. Check multimple declaration in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.SIGNAL,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"c\",\n        description: \"\"\n    },\n    type: \"std_logic_vector(1 downto 0)\"\n};\ncheck_signal(actual, expected);",
                  "err": {},
                  "uuid": "77a766e2-a2ed-49de-9e99-f7124b8e71bf",
                  "parentUUID": "df04f727-f49e-4dcd-8111-35d062fa71e9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d64ba060-e775-4cf7-b5ed-6c8c94d8595c",
                "3d6f691e-8bc3-485a-a833-ced4511a8011",
                "77a766e2-a2ed-49de-9e99-f7124b8e71bf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "85503a34-468d-4adb-bcc2-cf63ae6a8f10",
              "title": "Check constant.",
              "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_vhdl_package.spec.ts",
              "file": "/tests/parser/parser_vhdl_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check constant.\"",
                  "fullTitle": "Check package VHDL Check constant. \"before all\" hook in \"Check constant.\"",
                  "timedOut": false,
                  "duration": 20,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_constant_array();",
                  "err": {},
                  "uuid": "6d86e185-0f1f-43ff-ba6a-82037256ae71",
                  "parentUUID": "85503a34-468d-4adb-bcc2-cf63ae6a8f10",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check package VHDL Check constant. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"d\",\n        description: \"\"\n    },\n    type: \"integer\",\n    default_value: \"8\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "4453ef17-8749-408c-a97b-394426d44d1b",
                  "parentUUID": "85503a34-468d-4adb-bcc2-cf63ae6a8f10",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 0",
                  "fullTitle": "Check package VHDL Check constant. Check multimple declaration in one line 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[1];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"e\",\n        description: \"\"\n    },\n    type: \"integer\",\n    default_value: \"0\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "a08d1e85-964b-434f-a296-7cbd3b25c570",
                  "parentUUID": "85503a34-468d-4adb-bcc2-cf63ae6a8f10",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check multimple declaration in one line 1",
                  "fullTitle": "Check package VHDL Check constant. Check multimple declaration in one line 1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[2];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.CONSTANT,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"f\",\n        description: \"\"\n    },\n    type: \"integer\",\n    default_value: \"0\"\n};\ncheck_constant(actual, expected);",
                  "err": {},
                  "uuid": "0f30ecdb-659d-43e7-b3c0-03c36624c2e7",
                  "parentUUID": "85503a34-468d-4adb-bcc2-cf63ae6a8f10",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4453ef17-8749-408c-a97b-394426d44d1b",
                "a08d1e85-964b-434f-a296-7cbd3b25c570",
                "0f30ecdb-659d-43e7-b3c0-03c36624c2e7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ac7d8308-1e76-4bde-968a-486fb2e95659",
              "title": "Check type.",
              "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_vhdl_package.spec.ts",
              "file": "/tests/parser/parser_vhdl_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check type.\"",
                  "fullTitle": "Check package VHDL Check type. \"before all\" hook in \"Check type.\"",
                  "timedOut": false,
                  "duration": 18,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_type_array();",
                  "err": {},
                  "uuid": "221344ef-a832-48ca-8fec-1f54ef2e6647",
                  "parentUUID": "ac7d8308-1e76-4bde-968a-486fb2e95659",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check simple",
                  "fullTitle": "Check package VHDL Check type. Check simple",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.TYPE,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"state_0\",\n        description: \"\"\n    },\n    type: \"(INIT, ENDS)\",\n    logic: []\n};\ncheck_type(actual, expected);",
                  "err": {},
                  "uuid": "5f0787d3-8429-4d25-97df-094057766bc2",
                  "parentUUID": "ac7d8308-1e76-4bde-968a-486fb2e95659",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5f0787d3-8429-4d25-97df-094057766bc2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ab49057a-ae06-4499-a8d4-add7a5a668da",
              "title": "Check function.",
              "fullFile": "/home/runner/work/colibri2/colibri2/tests/parser/parser_vhdl_package.spec.ts",
              "file": "/tests/parser/parser_vhdl_package.spec.ts",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Check function.\"",
                  "fullTitle": "Check package VHDL Check function. \"before all\" hook in \"Check function.\"",
                  "timedOut": false,
                  "duration": 20,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "result = await parse();\nelement_array = result.get_function_array();",
                  "err": {},
                  "uuid": "f633abb4-dcc8-4a7a-bfd6-90588959a5ad",
                  "parentUUID": "ab49057a-ae06-4499-a8d4-add7a5a668da",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check with arguments and return",
                  "fullTitle": "Check package VHDL Check function. Check with arguments and return",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const actual = element_array[0];\nconst expected = {\n    hdl_element_type: common_1.TYPE_HDL_ELEMENT.FUNCTION,\n    info: {\n        position: {\n            line: 0,\n            column: 0\n        },\n        name: \"counter\",\n        description: \"\"\n    },\n    type: \"\",\n    arguments: \"(signal minutes: in integer; signal seconds: out integer;)\",\n    return: \"\"\n};\ncheck_function(actual, expected);",
                  "err": {},
                  "uuid": "2300c861-60da-40d8-be6c-7ddd6e0e98b7",
                  "parentUUID": "ab49057a-ae06-4499-a8d4-add7a5a668da",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2300c861-60da-40d8-be6c-7ddd6e0e98b7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "fa486d5a-ebd3-4ef4-b8d0-dd11316d9e1f",
          "title": "Test local process",
          "fullFile": "/home/runner/work/colibri2/colibri2/tests/process/process.spec.ts",
          "file": "/tests/process/process.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check exec successful",
              "fullTitle": "Test local process Check exec successful",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const process_i = new process_1.Process();\nconst command = 'echo \"hello world!\"';\nconst result = await process_i.exec_wait(command);\nconst expected_result = {\n    command: command,\n    stdout: 'hello world!',\n    stderr: '',\n    return_value: 0,\n    successful: true\n};\nconst os = process.platform;\nif (os === 'win32') {\n    expected_result.stdout = \"\\\"hello world!\\\"\";\n}\n(0, assert_1.deepEqual)(result, expected_result);",
              "err": {},
              "uuid": "b7e6e10b-d9f2-4ef1-b969-eb72ec35a1a5",
              "parentUUID": "fa486d5a-ebd3-4ef4-b8d0-dd11316d9e1f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check exec not successful",
              "fullTitle": "Test local process Check exec not successful",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const process_i = new process_1.Process();\nconst command = 'asdf';\nconst result = await process_i.exec_wait(command);\nconst expected_result = {\n    command: command,\n    stdout: '',\n    stderr: '/bin/sh: 1: asdf: not found',\n    return_value: -1,\n    successful: false\n};\nconst os = process.platform;\nif (os === 'darwin' || os === 'win32') {\n    expected_result.stderr = '';\n    result.stderr = '';\n}\n(0, assert_1.deepEqual)(result, expected_result);",
              "err": {},
              "uuid": "bc9a174c-3fde-4e4b-a7e5-6fbf94a64ce2",
              "parentUUID": "fa486d5a-ebd3-4ef4-b8d0-dd11316d9e1f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b7e6e10b-d9f2-4ef1-b969-eb72ec35a1a5",
            "bc9a174c-3fde-4e4b-a7e5-6fbf94a64ce2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 31,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4ca844ef-2876-4086-b9e5-5c57a18ae6a2",
          "title": "Test utils",
          "fullFile": "/home/runner/work/colibri2/colibri2/tests/process/process.spec.ts",
          "file": "/tests/process/process.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check create temporal file",
              "fullTitle": "Test utils Check create temporal file",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const expected_text = \"sample of text\";\nconst tmp_file_path = await (0, utils_1.create_temp_file)(expected_text);\nconst fs = require('fs');\nconst current_text = fs.readFileSync(tmp_file_path);\n(0, assert_1.equal)(current_text, expected_text);",
              "err": {},
              "uuid": "6e3b52e0-ade3-4e74-b262-585fcc46d91d",
              "parentUUID": "4ca844ef-2876-4086-b9e5-5c57a18ae6a2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6e3b52e0-ade3-4e74-b262-585fcc46d91d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c61f4473-3adc-4bea-9774-539461e3d4e0",
          "title": "Test Python utils",
          "fullFile": "/home/runner/work/colibri2/colibri2/tests/process/python.spec.ts",
          "file": "/tests/process/python.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check get_python3_path in system path",
              "fullTitle": "Test Python utils Check get_python3_path in system path",
              "timedOut": false,
              "duration": 77,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const opt = {\n    path: \"\"\n};\nconst result = await python.get_python_path(opt);\ncheck_python_system_path(result.python_path);\n(0, assert_1.equal)(result.successful, true);",
              "err": {},
              "uuid": "9a22b78b-774c-433d-a29a-103dc6a93280",
              "parentUUID": "c61f4473-3adc-4bea-9774-539461e3d4e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check get_python3_path in custom path",
              "fullTitle": "Test Python utils Check get_python3_path in custom path",
              "timedOut": false,
              "duration": 65,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(5000);\nconst opt = {\n    path: \"/usr/bin/python3\"\n};\nconst system_os = (0, utils_1.get_os)();\nif (system_os === common.OS.MAC) {\n    opt.path = \"/usr/local/opt/python@3.9/bin/python3.9\";\n}\nelse if (system_os === common.OS.WINDOWS) {\n    opt.path = \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\\3.9.13\\\\x64\\\\python3.exe\";\n}\nconst result = await python.get_python_path(opt);\ncheck_python_system_path(result.python_path);\n(0, assert_1.equal)(result.successful, true);",
              "err": {},
              "uuid": "08cf3374-ea85-496f-b133-1becdb521381",
              "parentUUID": "c61f4473-3adc-4bea-9774-539461e3d4e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check get_python3_path in a bad custom path ",
              "fullTitle": "Test Python utils Check get_python3_path in a bad custom path ",
              "timedOut": false,
              "duration": 107,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const opt = {\n    path: \"/usr/bin/python999\"\n};\nconst result = await python.get_python_path(opt);\ncheck_python_system_path(result.python_path);\n(0, assert_1.equal)(result.successful, true);",
              "err": {},
              "uuid": "c23da955-9132-48f0-b2bc-71e68c984ba1",
              "parentUUID": "c61f4473-3adc-4bea-9774-539461e3d4e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check python3 package and true",
              "fullTitle": "Test Python utils Check python3 package and true",
              "timedOut": false,
              "duration": 99,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const package_name = 'time';\nconst opt = {\n    path: \"/usr/bin/python\"\n};\nconst result_path = await python.get_python_path(opt);\nconst result = await python.check_python_package(result_path.python_path, package_name);\n(0, assert_1.equal)(result, true);",
              "err": {},
              "uuid": "571a2a0d-936d-419d-b69e-ed729bee37ad",
              "parentUUID": "c61f4473-3adc-4bea-9774-539461e3d4e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check python3 package and false",
              "fullTitle": "Test Python utils Check python3 package and false",
              "timedOut": false,
              "duration": 261,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const package_name = 'time1234';\nconst opt = {\n    path: \"/usr/bin/python\"\n};\nconst result_path = await python.get_python_path(opt);\nconst result = await python.check_python_package(result_path.python_path, package_name);\n(0, assert_1.equal)(result, false);",
              "err": {},
              "uuid": "1346fef0-c7db-486d-a6a0-c1025b1cafc8",
              "parentUUID": "c61f4473-3adc-4bea-9774-539461e3d4e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check python3 package list and true",
              "fullTitle": "Test Python utils Check python3 package list and true",
              "timedOut": false,
              "duration": 136,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const package_name = ['time', 'os'];\nconst opt = {\n    path: \"/usr/bin/python\"\n};\nconst result_path = await python.get_python_path(opt);\nconst result = await python.check_python_package_list(result_path.python_path, package_name);\n(0, assert_1.equal)(result, true);",
              "err": {},
              "uuid": "932e43c8-d9ae-4969-bf64-a2b051c78218",
              "parentUUID": "c61f4473-3adc-4bea-9774-539461e3d4e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check python3 package list and false",
              "fullTitle": "Test Python utils Check python3 package list and false",
              "timedOut": false,
              "duration": 209,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const package_name = ['time', 'os123'];\nconst opt = {\n    path: \"/usr/bin/python\"\n};\nconst result_path = await python.get_python_path(opt);\nconst result = await python.check_python_package_list(result_path.python_path, package_name);\n(0, assert_1.equal)(result, false);",
              "err": {},
              "uuid": "235c3341-d776-4489-97cc-411193a68e2e",
              "parentUUID": "c61f4473-3adc-4bea-9774-539461e3d4e0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9a22b78b-774c-433d-a29a-103dc6a93280",
            "08cf3374-ea85-496f-b133-1becdb521381",
            "c23da955-9132-48f0-b2bc-71e68c984ba1",
            "571a2a0d-936d-419d-b69e-ed729bee37ad",
            "1346fef0-c7db-486d-a6a0-c1025b1cafc8",
            "932e43c8-d9ae-4969-bf64-a2b051c78218",
            "235c3341-d776-4489-97cc-411193a68e2e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 954,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d4fe1d07-dd94-4ec8-815c-dd986afc97a5",
          "title": "Check template vhdl element",
          "fullFile": "/home/runner/work/colibri2/colibri2/tests/template/template.spec.ts",
          "file": "/tests/template/template.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check cocotb",
              "fullTitle": "Check template vhdl element Check cocotb",
              "timedOut": false,
              "duration": 30,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: common.TYPE_INSTANCE_DECLARATION.INLINE,\n    clock_generation_style: common.TYPE_CLOCK_GENERATION_STYLE.IFELSE\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = fs.readFileSync(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "d4754390-0750-4e2b-a550-0d20a227ff76",
              "parentUUID": "d4fe1d07-dd94-4ec8-815c-dd986afc97a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check testbench_normal",
              "fullTitle": "Check template vhdl element Check testbench_normal",
              "timedOut": false,
              "duration": 21,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: common.TYPE_INSTANCE_DECLARATION.INLINE,\n    clock_generation_style: common.TYPE_CLOCK_GENERATION_STYLE.IFELSE\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = fs.readFileSync(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "0d32af95-a8e8-41b2-b4b9-1a467416fcc8",
              "parentUUID": "d4fe1d07-dd94-4ec8-815c-dd986afc97a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check testbench_vunit",
              "fullTitle": "Check template vhdl element Check testbench_vunit",
              "timedOut": false,
              "duration": 27,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: common.TYPE_INSTANCE_DECLARATION.INLINE,\n    clock_generation_style: common.TYPE_CLOCK_GENERATION_STYLE.IFELSE\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = fs.readFileSync(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "287e4f8f-cef1-49bd-88cf-10f41feee35a",
              "parentUUID": "d4fe1d07-dd94-4ec8-815c-dd986afc97a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_component",
              "fullTitle": "Check template vhdl element Check hdl_element_component",
              "timedOut": false,
              "duration": 21,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: common.TYPE_INSTANCE_DECLARATION.INLINE,\n    clock_generation_style: common.TYPE_CLOCK_GENERATION_STYLE.IFELSE\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = fs.readFileSync(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "b23f3f47-03bc-4836-b15f-90c5d36fbc99",
              "parentUUID": "d4fe1d07-dd94-4ec8-815c-dd986afc97a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_instance",
              "fullTitle": "Check template vhdl element Check hdl_element_instance",
              "timedOut": false,
              "duration": 21,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: common.TYPE_INSTANCE_DECLARATION.INLINE,\n    clock_generation_style: common.TYPE_CLOCK_GENERATION_STYLE.IFELSE\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = fs.readFileSync(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "486fc5ce-e5a8-4510-9b66-6191a60a48b6",
              "parentUUID": "d4fe1d07-dd94-4ec8-815c-dd986afc97a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_signal",
              "fullTitle": "Check template vhdl element Check hdl_element_signal",
              "timedOut": false,
              "duration": 21,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: common.TYPE_INSTANCE_DECLARATION.INLINE,\n    clock_generation_style: common.TYPE_CLOCK_GENERATION_STYLE.IFELSE\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = fs.readFileSync(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "fb36c2fd-ed73-4501-9204-bd52f230ee57",
              "parentUUID": "d4fe1d07-dd94-4ec8-815c-dd986afc97a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_mix_instance",
              "fullTitle": "Check template vhdl element Check hdl_element_mix_instance",
              "timedOut": false,
              "duration": 29,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: common.TYPE_INSTANCE_DECLARATION.INLINE,\n    clock_generation_style: common.TYPE_CLOCK_GENERATION_STYLE.IFELSE\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = fs.readFileSync(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "c2c6c540-a44e-4410-b55c-028e4cbf0576",
              "parentUUID": "d4fe1d07-dd94-4ec8-815c-dd986afc97a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_mix_testbench_normal",
              "fullTitle": "Check template vhdl element Check hdl_element_mix_testbench_normal",
              "timedOut": false,
              "duration": 28,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: common.TYPE_INSTANCE_DECLARATION.INLINE,\n    clock_generation_style: common.TYPE_CLOCK_GENERATION_STYLE.IFELSE\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = fs.readFileSync(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "2a1af3b0-808f-45dd-a7b3-7b43eac63d23",
              "parentUUID": "d4fe1d07-dd94-4ec8-815c-dd986afc97a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_mix_testbench_vunit",
              "fullTitle": "Check template vhdl element Check hdl_element_mix_testbench_vunit",
              "timedOut": false,
              "duration": 163,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: common.TYPE_INSTANCE_DECLARATION.INLINE,\n    clock_generation_style: common.TYPE_CLOCK_GENERATION_STYLE.IFELSE\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = fs.readFileSync(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "15d51551-7c75-4a1f-a21b-e3e9038c41f7",
              "parentUUID": "d4fe1d07-dd94-4ec8-815c-dd986afc97a5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d4754390-0750-4e2b-a550-0d20a227ff76",
            "0d32af95-a8e8-41b2-b4b9-1a467416fcc8",
            "287e4f8f-cef1-49bd-88cf-10f41feee35a",
            "b23f3f47-03bc-4836-b15f-90c5d36fbc99",
            "486fc5ce-e5a8-4510-9b66-6191a60a48b6",
            "fb36c2fd-ed73-4501-9204-bd52f230ee57",
            "c2c6c540-a44e-4410-b55c-028e4cbf0576",
            "2a1af3b0-808f-45dd-a7b3-7b43eac63d23",
            "15d51551-7c75-4a1f-a21b-e3e9038c41f7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 361,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f4e5aa9b-a3a7-4b37-ad33-395cea8ac999",
          "title": "Check template verilog element",
          "fullFile": "/home/runner/work/colibri2/colibri2/tests/template/template.spec.ts",
          "file": "/tests/template/template.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check cocotb",
              "fullTitle": "Check template verilog element Check cocotb",
              "timedOut": false,
              "duration": 259,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: common.TYPE_INSTANCE_DECLARATION.INLINE,\n    clock_generation_style: common.TYPE_CLOCK_GENERATION_STYLE.IFELSE\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = fs.readFileSync(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "14555ad8-5409-4755-97d6-429ed18a896a",
              "parentUUID": "f4e5aa9b-a3a7-4b37-ad33-395cea8ac999",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check testbench_normal",
              "fullTitle": "Check template verilog element Check testbench_normal",
              "timedOut": false,
              "duration": 328,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: common.TYPE_INSTANCE_DECLARATION.INLINE,\n    clock_generation_style: common.TYPE_CLOCK_GENERATION_STYLE.IFELSE\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = fs.readFileSync(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "32782dd8-1650-4313-856d-eeee858c579f",
              "parentUUID": "f4e5aa9b-a3a7-4b37-ad33-395cea8ac999",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check testbench_vunit",
              "fullTitle": "Check template verilog element Check testbench_vunit",
              "timedOut": false,
              "duration": 234,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: common.TYPE_INSTANCE_DECLARATION.INLINE,\n    clock_generation_style: common.TYPE_CLOCK_GENERATION_STYLE.IFELSE\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = fs.readFileSync(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "ecdba0e1-ec12-4ca3-bc57-8015575edbbe",
              "parentUUID": "f4e5aa9b-a3a7-4b37-ad33-395cea8ac999",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check testbench_vunit",
              "fullTitle": "Check template verilog element Check testbench_vunit",
              "timedOut": false,
              "duration": 344,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: common.TYPE_INSTANCE_DECLARATION.INLINE,\n    clock_generation_style: common.TYPE_CLOCK_GENERATION_STYLE.IFELSE\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = fs.readFileSync(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "c94c1175-a28f-4fbc-80eb-07944e2a14b0",
              "parentUUID": "f4e5aa9b-a3a7-4b37-ad33-395cea8ac999",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_signal",
              "fullTitle": "Check template verilog element Check hdl_element_signal",
              "timedOut": false,
              "duration": 248,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: common.TYPE_INSTANCE_DECLARATION.INLINE,\n    clock_generation_style: common.TYPE_CLOCK_GENERATION_STYLE.IFELSE\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = fs.readFileSync(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "6173567d-a4c7-4a60-b4e3-31aa2d76b742",
              "parentUUID": "f4e5aa9b-a3a7-4b37-ad33-395cea8ac999",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_mix_instance",
              "fullTitle": "Check template verilog element Check hdl_element_mix_instance",
              "timedOut": false,
              "duration": 348,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: common.TYPE_INSTANCE_DECLARATION.INLINE,\n    clock_generation_style: common.TYPE_CLOCK_GENERATION_STYLE.IFELSE\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = fs.readFileSync(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "ba9cf095-0d6f-4f07-bc50-613853beb729",
              "parentUUID": "f4e5aa9b-a3a7-4b37-ad33-395cea8ac999",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_mix_testbench_normal",
              "fullTitle": "Check template verilog element Check hdl_element_mix_testbench_normal",
              "timedOut": false,
              "duration": 259,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: common.TYPE_INSTANCE_DECLARATION.INLINE,\n    clock_generation_style: common.TYPE_CLOCK_GENERATION_STYLE.IFELSE\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = fs.readFileSync(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "2542af47-668a-441d-9200-2c5f656e3ed7",
              "parentUUID": "f4e5aa9b-a3a7-4b37-ad33-395cea8ac999",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check hdl_element_mix_testbench_vunit",
              "fullTitle": "Check template verilog element Check hdl_element_mix_testbench_vunit",
              "timedOut": false,
              "duration": 349,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let code_hdl = verilog_code;\nif (language === general_1.HDL_LANG.VHDL) {\n    code_hdl = vhdl_code;\n}\nelse {\n    code_hdl = verilog_code;\n}\nconst options = {\n    header_file_path: \"\",\n    indent_char: \"  \",\n    instance_style: common.TYPE_INSTANCE_DECLARATION.INLINE,\n    clock_generation_style: common.TYPE_CLOCK_GENERATION_STYLE.IFELSE\n};\nconst template_manager = await generate_template_manager(language);\nconst template = await template_manager.generate(code_hdl, template_type.id, options);\nconst output_path = paht_lib.join(C_OUTPUT_BASE_PATH, `${language}_${template_type.id}.${language}`);\nfs.writeFileSync(output_path, template);\n//Get exepcted template\nconst input_path = paht_lib.join(__dirname, 'expected', `${language}_${template_type.id}.${language}`);\nconst expected = fs.readFileSync(input_path);\n(0, assert_1.equal)(template, expected);",
              "err": {},
              "uuid": "77801a5c-7e9c-4878-9401-78168fb426ce",
              "parentUUID": "f4e5aa9b-a3a7-4b37-ad33-395cea8ac999",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "14555ad8-5409-4755-97d6-429ed18a896a",
            "32782dd8-1650-4313-856d-eeee858c579f",
            "ecdba0e1-ec12-4ca3-bc57-8015575edbbe",
            "c94c1175-a28f-4fbc-80eb-07944e2a14b0",
            "6173567d-a4c7-4a60-b4e3-31aa2d76b742",
            "ba9cf095-0d6f-4f07-bc50-613853beb729",
            "2542af47-668a-441d-9200-2c5f656e3ed7",
            "77801a5c-7e9c-4878-9401-78168fb426ce"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2369,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d8604924-b64d-40ef-bea6-8867fd7120cf",
          "title": "Check get language",
          "fullFile": "/home/runner/work/colibri2/colibri2/tests/utils/hdl_utils.spec.ts",
          "file": "/tests/utils/hdl_utils.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "From path Verilog",
              "fullTitle": "Check get language From path Verilog",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const path_dummy = '/home/user/file.v';\nconst lang_expected = general_1.HDL_LANG.VERILOG;\nconst lang_current = hdl_utils.get_lang_from_path(path_dummy);\n(0, assert_1.equal)(lang_current, lang_expected);",
              "err": {},
              "uuid": "668f2842-99c0-4cd0-a7c2-6bb9c4b93eda",
              "parentUUID": "d8604924-b64d-40ef-bea6-8867fd7120cf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "From path SystemVerilog",
              "fullTitle": "Check get language From path SystemVerilog",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const path_dummy = '/home/user/file.sv';\nconst lang_expected = general_1.HDL_LANG.SYSTEMVERILOG;\nconst lang_current = hdl_utils.get_lang_from_path(path_dummy);\n(0, assert_1.equal)(lang_current, lang_expected);",
              "err": {},
              "uuid": "7393c87e-4a13-4a7b-af91-e59e6ffb8849",
              "parentUUID": "d8604924-b64d-40ef-bea6-8867fd7120cf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "From path VHDL",
              "fullTitle": "Check get language From path VHDL",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const path_dummy = '/home/user/file.vhd';\nconst lang_expected = general_1.HDL_LANG.VHDL;\nconst lang_current = hdl_utils.get_lang_from_path(path_dummy);\n(0, assert_1.equal)(lang_current, lang_expected);",
              "err": {},
              "uuid": "afd9554d-09de-463e-acb2-ab22631b8d28",
              "parentUUID": "d8604924-b64d-40ef-bea6-8867fd7120cf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "From path NONE",
              "fullTitle": "Check get language From path NONE",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const path_dummy = '/home/user/file.txt';\nconst lang_expected = general_1.HDL_LANG.NONE;\nconst lang_current = hdl_utils.get_lang_from_path(path_dummy);\n(0, assert_1.equal)(lang_current, lang_expected);",
              "err": {},
              "uuid": "781a5139-c394-4b7d-9119-4caad8967c58",
              "parentUUID": "d8604924-b64d-40ef-bea6-8867fd7120cf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "668f2842-99c0-4cd0-a7c2-6bb9c4b93eda",
            "7393c87e-4a13-4a7b-af91-e59e6ffb8849",
            "afd9554d-09de-463e-acb2-ab22631b8d28",
            "781a5139-c394-4b7d-9119-4caad8967c58"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "cabb90c1-b493-4be4-ae0a-baddfd9bf130",
          "title": "Check remove comments",
          "fullFile": "/home/runner/work/colibri2/colibri2/tests/utils/hdl_utils.spec.ts",
          "file": "/tests/utils/hdl_utils.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Remove comments VHDL",
              "fullTitle": "Check remove comments Remove comments VHDL",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = `\n-- One line comment\n-- One line comment 2\nTest no comment\n/* multiline\ncomment\nexample*/\nTest no comment 2`;\n// eslint-disable-next-line max-len\nconst code_expected = \"\\n                   \\n                     \\nTest no comment\\n/           \\n       \\n         \\nTest no comment 2\";\nconst code_current = hdl_utils.remove_comments_vhdl(code_dummy);\n(0, assert_1.equal)(code_current, code_expected);",
              "err": {},
              "uuid": "ca9cb50c-81ee-4667-94fd-316a0443a383",
              "parentUUID": "cabb90c1-b493-4be4-ae0a-baddfd9bf130",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Remove comments Verilog",
              "fullTitle": "Check remove comments Remove comments Verilog",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = `\n// One line comment\n// One line comment 2\nTest no comment\n/* multiline\ncomment\nexample*/\nTest no comment 2`;\n// eslint-disable-next-line max-len\nconst code_expected = \"\\n                   \\n                     \\nTest no comment\\n            \\n       \\n         \\nTest no comment 2\";\nconst code_current = hdl_utils.remove_comments_verilog(code_dummy);\n(0, assert_1.equal)(code_current, code_expected);",
              "err": {},
              "uuid": "5de74c5f-dc7a-484f-8c84-1eb005d986f6",
              "parentUUID": "cabb90c1-b493-4be4-ae0a-baddfd9bf130",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ca9cb50c-81ee-4667-94fd-316a0443a383",
            "5de74c5f-dc7a-484f-8c84-1eb005d986f6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "84c85e97-adfe-446a-900a-43bb508894bd",
          "title": "Check get top level with regex",
          "fullFile": "/home/runner/work/colibri2/colibri2/tests/utils/hdl_utils.spec.ts",
          "file": "/tests/utils/hdl_utils.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "From VHDL code",
              "fullTitle": "Check get top level with regex From VHDL code",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "it(`Get top level VHDL`, async function () {\n    const code_dummy = `\n    library ieee;\n    use ieee.std_logic_1164.all;\n    use ieee.numeric_std.all;\n    entity test_entity_name is\n    generic (\n        a : integer;\n        b : unsigned;\n        c : signed;\n        d : std_logic;\n        e : std_logic_vector;\n        f : std_logic_vector(5 downto 0)\n      );\n    port(\n      g : in std_logic;\n      h : out std_logic;\n      i : inout std_logic\n    );\n    end test_entity_name;  \n    architecture e_arch of test_entity_name is\n    begin \n    end e_arch;\n    `;\n    const expected = 'test_entity_name';\n    const current = await hdl_utils.get_toplevel(code_dummy, general_1.HDL_LANG.VHDL);\n    (0, assert_1.equal)(current, expected);\n});\nit(`Get top level Verilog`, async function () {\n    const code_dummy = `\n    module test_entity_name2 \n        #(\n            parameter a=8,\n            parameter b=9,\n            parameter c=10, d=11\n        )\n        (\n            input e,\n            output f,\n            input reg g,\n            input wire h,\n            input reg [7:0] i, j,\n            input wire [9:0] k,\n            output wire [9:0] l\n        );  \n    \n        function [7:0] sum;  \n            input [7:0] a, b;  \n            begin  \n                sum = a + b;  \n            end  \n        endfunction\n    \n        wire m;\n        wire n, p;\n        reg [1:0] q;\n    \n        localparam r = 2;\n    \n        always @(posedge a) begin : label_0\n        end\n    \n        always_comb begin\n        end\n    \n        always_ff begin : label_1\n        end\n    \n        always_latch begin\n        end\n    \n        test_entity_name \n        #(\n          .a(a ),\n          .b(b ),\n          .c(c ),\n          .d (d )\n        )\n        test_entity_name_dut (\n          .e (e ),\n          .f (f ),\n          .g (g ),\n          .h (h ),\n          .i (i ),\n          .j (j ),\n          .k (k ),\n          .l  ( l)\n        );\n      \n    endmodule\n    `;\n    const expected = 'test_entity_name2';\n    const current = await hdl_utils.get_toplevel(code_dummy, general_1.HDL_LANG.VERILOG);\n    (0, assert_1.equal)(current, expected);\n});",
              "err": {},
              "uuid": "1a25c99e-0b09-4a51-9957-2458290bf84d",
              "parentUUID": "84c85e97-adfe-446a-900a-43bb508894bd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1a25c99e-0b09-4a51-9957-2458290bf84d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c6db419c-140d-45a4-974d-154519b2fb36",
          "title": "Check hover VHDL",
          "fullFile": "/home/runner/work/colibri2/colibri2/tests/utils/number.spec.ts",
          "file": "/tests/utils/number.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Binary unsigned",
              "fullTitle": "Check hover VHDL Binary unsigned",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = '\"0011\"';\nconst expected_number = {\n    signed_n: 0,\n    unsigned_n: 3,\n    is_multi: false,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "337b01c8-8510-4ff3-b735-875e2e1e1127",
              "parentUUID": "c6db419c-140d-45a4-974d-154519b2fb36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Binary unsigned or signed",
              "fullTitle": "Check hover VHDL Binary unsigned or signed",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = '\"1101\"';\nconst expected_number = {\n    signed_n: -3,\n    unsigned_n: 13,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "116250fe-666f-49fc-bea4-266b3f0506f6",
              "parentUUID": "c6db419c-140d-45a4-974d-154519b2fb36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Binary unsigned or signed with separator",
              "fullTitle": "Check hover VHDL Binary unsigned or signed with separator",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = '\"1_10_0\"';\nconst expected_number = {\n    signed_n: -4,\n    unsigned_n: 12,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "7e82bc85-cd72-451f-b0da-33f50aced5a0",
              "parentUUID": "c6db419c-140d-45a4-974d-154519b2fb36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hexadeximal unsigned",
              "fullTitle": "Check hover VHDL Hexadeximal unsigned",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = 'x\"0aB0\"';\nconst expected_number = {\n    signed_n: 0,\n    unsigned_n: 2736,\n    is_multi: false,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "6a4b0c93-8602-4cca-9ee5-35e451296fcb",
              "parentUUID": "c6db419c-140d-45a4-974d-154519b2fb36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hexadeximal unsigned or signed",
              "fullTitle": "Check hover VHDL Hexadeximal unsigned or signed",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = 'x\"aaB0\"';\nconst expected_number = {\n    signed_n: -21840,\n    unsigned_n: 43696,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "9ef8a2ae-185f-4a02-8679-9b7f08cc113b",
              "parentUUID": "c6db419c-140d-45a4-974d-154519b2fb36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hexadeximal unsigned or signed with separator",
              "fullTitle": "Check hover VHDL Hexadeximal unsigned or signed with separator",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = 'x\"a_a_b0\"';\nconst expected_number = {\n    signed_n: -21840,\n    unsigned_n: 43696,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "0bade216-82ea-4134-9e2d-dcdfbfc7f5db",
              "parentUUID": "c6db419c-140d-45a4-974d-154519b2fb36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Octal unsigned",
              "fullTitle": "Check hover VHDL Octal unsigned",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = 'o\"0175\"';\nconst expected_number = {\n    signed_n: 0,\n    unsigned_n: 125,\n    is_multi: false,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "a5e85291-2eda-4f06-813b-eea8c75232c4",
              "parentUUID": "c6db419c-140d-45a4-974d-154519b2fb36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Octal unsigned or signed",
              "fullTitle": "Check hover VHDL Octal unsigned or signed",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = 'O\"232\"';\nconst expected_number = {\n    signed_n: -102,\n    unsigned_n: 154,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "35e493b9-9070-40a9-8553-7c99f296e54e",
              "parentUUID": "c6db419c-140d-45a4-974d-154519b2fb36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Octal unsigned or signed with separator",
              "fullTitle": "Check hover VHDL Octal unsigned or signed with separator",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = 'o\"2_3_2\"';\nconst expected_number = {\n    signed_n: -102,\n    unsigned_n: 154,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "e9c2e53a-79ec-4662-bba4-4bda18d16453",
              "parentUUID": "c6db419c-140d-45a4-974d-154519b2fb36",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "337b01c8-8510-4ff3-b735-875e2e1e1127",
            "116250fe-666f-49fc-bea4-266b3f0506f6",
            "7e82bc85-cd72-451f-b0da-33f50aced5a0",
            "6a4b0c93-8602-4cca-9ee5-35e451296fcb",
            "9ef8a2ae-185f-4a02-8679-9b7f08cc113b",
            "0bade216-82ea-4134-9e2d-dcdfbfc7f5db",
            "a5e85291-2eda-4f06-813b-eea8c75232c4",
            "35e493b9-9070-40a9-8553-7c99f296e54e",
            "e9c2e53a-79ec-4662-bba4-4bda18d16453"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3f7a79fe-3ebd-4def-bd4a-c3cf359fa91a",
          "title": "Check hover Verilog",
          "fullFile": "/home/runner/work/colibri2/colibri2/tests/utils/number.spec.ts",
          "file": "/tests/utils/number.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Binary unsigned",
              "fullTitle": "Check hover Verilog Binary unsigned",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'b0011'\";\nconst expected_number = {\n    signed_n: 0,\n    unsigned_n: 3,\n    is_multi: false,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "d7f695e1-c0f0-4aa8-8009-ae5865c5daab",
              "parentUUID": "3f7a79fe-3ebd-4def-bd4a-c3cf359fa91a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Binary unsigned or signed",
              "fullTitle": "Check hover Verilog Binary unsigned or signed",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'b1101'\";\nconst expected_number = {\n    signed_n: -3,\n    unsigned_n: 13,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "895e999b-2c97-4e72-9385-7d65e8674e33",
              "parentUUID": "3f7a79fe-3ebd-4def-bd4a-c3cf359fa91a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Binary unsigned or signed with separator",
              "fullTitle": "Check hover Verilog Binary unsigned or signed with separator",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'b1_10_0'\";\nconst expected_number = {\n    signed_n: -4,\n    unsigned_n: 12,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "b65dbb63-3d23-4e54-a733-282fce8cb3d1",
              "parentUUID": "3f7a79fe-3ebd-4def-bd4a-c3cf359fa91a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hexadeximal unsigned",
              "fullTitle": "Check hover Verilog Hexadeximal unsigned",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'h0aB0'\";\nconst expected_number = {\n    signed_n: 0,\n    unsigned_n: 2736,\n    is_multi: false,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "9696e924-f533-4e99-943d-2ee2e5938843",
              "parentUUID": "3f7a79fe-3ebd-4def-bd4a-c3cf359fa91a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hexadeximal unsigned or signed",
              "fullTitle": "Check hover Verilog Hexadeximal unsigned or signed",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'haaB0'\";\nconst expected_number = {\n    signed_n: -21840,\n    unsigned_n: 43696,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "ed085024-d7d2-4c13-bf7f-29bfbc0ee507",
              "parentUUID": "3f7a79fe-3ebd-4def-bd4a-c3cf359fa91a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Hexadeximal unsigned or signed with separator",
              "fullTitle": "Check hover Verilog Hexadeximal unsigned or signed with separator",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'ha_a_b0'\";\nconst expected_number = {\n    signed_n: -21840,\n    unsigned_n: 43696,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "74d4f790-5604-4adf-b2e2-d47b28738d78",
              "parentUUID": "3f7a79fe-3ebd-4def-bd4a-c3cf359fa91a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Octal unsigned",
              "fullTitle": "Check hover Verilog Octal unsigned",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'o0175'\";\nconst expected_number = {\n    signed_n: 0,\n    unsigned_n: 125,\n    is_multi: false,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "8899091a-0202-4233-9b27-313ac4c6dd77",
              "parentUUID": "3f7a79fe-3ebd-4def-bd4a-c3cf359fa91a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Octal unsigned or signed",
              "fullTitle": "Check hover Verilog Octal unsigned or signed",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'o232'\";\nconst expected_number = {\n    signed_n: -102,\n    unsigned_n: 154,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "114530b6-9257-4609-98a5-146dfd488f7c",
              "parentUUID": "3f7a79fe-3ebd-4def-bd4a-c3cf359fa91a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Octal unsigned or signed with separator",
              "fullTitle": "Check hover Verilog Octal unsigned or signed with separator",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const code_dummy = \"4'o2_3_2'\";\nconst expected_number = {\n    signed_n: -102,\n    unsigned_n: 154,\n    is_multi: true,\n    is_ok: true\n};\nconst current_number = (0, numbers_1.hdl_hover)(code_dummy, lang);\n(0, assert_1.deepEqual)(current_number, expected_number);",
              "err": {},
              "uuid": "d966a46c-0dd9-4475-af7f-9d353d85a4f8",
              "parentUUID": "3f7a79fe-3ebd-4def-bd4a-c3cf359fa91a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d7f695e1-c0f0-4aa8-8009-ae5865c5daab",
            "895e999b-2c97-4e72-9385-7d65e8674e33",
            "b65dbb63-3d23-4e54-a733-282fce8cb3d1",
            "9696e924-f533-4e99-943d-2ee2e5938843",
            "ed085024-d7d2-4c13-bf7f-29bfbc0ee507",
            "74d4f790-5604-4adf-b2e2-d47b28738d78",
            "8899091a-0202-4233-9b27-313ac4c6dd77",
            "114530b6-9257-4609-98a5-146dfd488f7c",
            "d966a46c-0dd9-4475-af7f-9d353d85a4f8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [
        "ad7d2172-da18-4aeb-8436-cf63537c2393",
        "5fe9b700-3956-47cb-8f10-bd3d7d4b0d2f"
      ],
      "duration": 0,
      "root": true,
      "rootEmpty": false,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default"
      },
      "version": "6.2.0"
    }
  }
}